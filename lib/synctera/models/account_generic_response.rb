=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.139.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Synctera
  class AccountGenericResponse
    attr_accessor :access_status

    # Timestamp of the last modification of the access_status. RFC3339 format.
    attr_accessor :access_status_last_updated_time

    attr_accessor :account_closure

    # Account number
    attr_accessor :account_number

    # The response will contain the bank fintech ID (3 or 6 digits) plus the last 4 digits, with the digits in between replaced with * characters. Shadow mode account numbers will not be masked.
    attr_accessor :account_number_masked

    # Purpose of the account
    attr_accessor :account_purpose

    attr_accessor :account_type

    # The application ID for this account. 
    attr_accessor :application_id

    # The number of days past the billing period to initiate an auto payment. Only applicable for accounts with type `CHARGE_SECURED`, where the account holder has opted in for auto payment functionality. This value must be lower than or equal the `grace_period` setting on the account. If this value is 0, the auto payment will happen on the same day as the statement is generated. Auto payment only occurs if regular payments are not received on time. 
    attr_accessor :auto_payment_period

    attr_accessor :balance_ceiling

    attr_accessor :balance_floor

    # A list of balances for account based on different type
    attr_accessor :balances

    # Identifier of the bank side account that this account is a part of
    attr_accessor :bank_account_id

    # Bank routing number
    attr_accessor :bank_routing

    attr_accessor :billing_period

    # A list of the business IDs of the account holders.
    attr_accessor :business_ids

    # The account close date. This is the bank's posting date when the account resource's status was changed to CLOSED or CHARGED_OFF.
    attr_accessor :close_date

    # Account creation timestamp in RFC3339 format
    attr_accessor :creation_time

    # The credit limit for this line of credit account in cents. Minimum is 0. 
    attr_accessor :credit_limit

    # Account currency or account settlement currency. ISO 4217 alphabetic currency code. Default USD
    attr_accessor :currency

    # A list of the customer IDs of the account holders.
    attr_accessor :customer_ids

    attr_accessor :customer_type

    # The number of days since the account went past due on their minimum payments.
    attr_accessor :days_past_due

    # Exchange rate type
    attr_accessor :exchange_rate_type

    # A list of fee account products that the current account associates with.
    attr_accessor :fee_product_ids

    attr_accessor :funds_ownership

    attr_accessor :general_ledger_category

    attr_accessor :general_ledger_type

    # The number of days past the billing period to allow for payment before it is considered due. This directly infers the due date for a payment. The default will be set to 21 days. 
    attr_accessor :grace_period

    # International bank account number
    attr_accessor :iban

    # Account ID
    attr_accessor :id

    # An interest account product that the current account associates with.
    attr_accessor :interest_product_id

    # Account is investment (variable balance) account or a multi-balance account pool. Default false
    attr_accessor :is_account_pool

    # A flag to indicate whether ACH transactions are enabled.
    attr_accessor :is_ach_enabled

    # A flag to indicate whether card transactions are enabled.
    attr_accessor :is_card_enabled

    # A flag to indicate whether EFT Canada transactions are enabled.
    attr_accessor :is_eft_ca_enabled

    # A flag to indicate whether external card transactions are enabled.
    attr_accessor :is_external_card_enabled

    # A flag to indicate whether P2P transactions are enabled.
    attr_accessor :is_p2p_enabled

    # A flag to indicate whether SAR generation is enabled.
    attr_accessor :is_sar_enabled

    # A flag to indicate whether this account is being used as security for another account.
    attr_accessor :is_security

    # A flag to indicate whether Synctera Pay transactions are enabled.
    attr_accessor :is_synctera_pay_enabled

    # A flag to indicate whether auto pay feature is enabled.
    attr_accessor :is_system_auto_pay_enabled

    # A flag to indicate whether wire transactions are enabled.
    attr_accessor :is_wire_enabled

    # Timestamp of the last account modification in RFC3339 format
    attr_accessor :last_updated_time

    # User provided account metadata
    attr_accessor :metadata

    attr_accessor :minimum_payment

    # User provided account nickname
    attr_accessor :nickname

    # The account open date. This is the bank's posting date when the account resource was created.
    attr_accessor :open_date

    # This field is unused and will be removed in a future API version. 
    attr_accessor :overdraft_limit

    attr_accessor :restrictions

    attr_accessor :security

    # List of spend control IDs to control spending for the account
    attr_accessor :spend_control_ids

    attr_accessor :spending_limits

    attr_accessor :status

    attr_accessor :stop_payments

    # SWIFT code
    attr_accessor :swift_code

    # The id of the tenant containing the resource. This is relevant for Fintechs that have multiple workspaces. 
    attr_accessor :tenant

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'access_status' => :'access_status',
        :'access_status_last_updated_time' => :'access_status_last_updated_time',
        :'account_closure' => :'account_closure',
        :'account_number' => :'account_number',
        :'account_number_masked' => :'account_number_masked',
        :'account_purpose' => :'account_purpose',
        :'account_type' => :'account_type',
        :'application_id' => :'application_id',
        :'auto_payment_period' => :'auto_payment_period',
        :'balance_ceiling' => :'balance_ceiling',
        :'balance_floor' => :'balance_floor',
        :'balances' => :'balances',
        :'bank_account_id' => :'bank_account_id',
        :'bank_routing' => :'bank_routing',
        :'billing_period' => :'billing_period',
        :'business_ids' => :'business_ids',
        :'close_date' => :'close_date',
        :'creation_time' => :'creation_time',
        :'credit_limit' => :'credit_limit',
        :'currency' => :'currency',
        :'customer_ids' => :'customer_ids',
        :'customer_type' => :'customer_type',
        :'days_past_due' => :'days_past_due',
        :'exchange_rate_type' => :'exchange_rate_type',
        :'fee_product_ids' => :'fee_product_ids',
        :'funds_ownership' => :'funds_ownership',
        :'general_ledger_category' => :'general_ledger_category',
        :'general_ledger_type' => :'general_ledger_type',
        :'grace_period' => :'grace_period',
        :'iban' => :'iban',
        :'id' => :'id',
        :'interest_product_id' => :'interest_product_id',
        :'is_account_pool' => :'is_account_pool',
        :'is_ach_enabled' => :'is_ach_enabled',
        :'is_card_enabled' => :'is_card_enabled',
        :'is_eft_ca_enabled' => :'is_eft_ca_enabled',
        :'is_external_card_enabled' => :'is_external_card_enabled',
        :'is_p2p_enabled' => :'is_p2p_enabled',
        :'is_sar_enabled' => :'is_sar_enabled',
        :'is_security' => :'is_security',
        :'is_synctera_pay_enabled' => :'is_synctera_pay_enabled',
        :'is_system_auto_pay_enabled' => :'is_system_auto_pay_enabled',
        :'is_wire_enabled' => :'is_wire_enabled',
        :'last_updated_time' => :'last_updated_time',
        :'metadata' => :'metadata',
        :'minimum_payment' => :'minimum_payment',
        :'nickname' => :'nickname',
        :'open_date' => :'open_date',
        :'overdraft_limit' => :'overdraft_limit',
        :'restrictions' => :'restrictions',
        :'security' => :'security',
        :'spend_control_ids' => :'spend_control_ids',
        :'spending_limits' => :'spending_limits',
        :'status' => :'status',
        :'stop_payments' => :'stop_payments',
        :'swift_code' => :'swift_code',
        :'tenant' => :'tenant'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'access_status' => :'AccountAccessStatus',
        :'access_status_last_updated_time' => :'Time',
        :'account_closure' => :'AccountClosure',
        :'account_number' => :'String',
        :'account_number_masked' => :'String',
        :'account_purpose' => :'String',
        :'account_type' => :'AccountType',
        :'application_id' => :'String',
        :'auto_payment_period' => :'Integer',
        :'balance_ceiling' => :'BalanceCeiling',
        :'balance_floor' => :'BalanceFloor',
        :'balances' => :'Array<Balance>',
        :'bank_account_id' => :'String',
        :'bank_routing' => :'String',
        :'billing_period' => :'BillingPeriod',
        :'business_ids' => :'Array<String>',
        :'close_date' => :'Date',
        :'creation_time' => :'Time',
        :'credit_limit' => :'Integer',
        :'currency' => :'String',
        :'customer_ids' => :'Array<String>',
        :'customer_type' => :'CustomerType',
        :'days_past_due' => :'Integer',
        :'exchange_rate_type' => :'String',
        :'fee_product_ids' => :'Array<String>',
        :'funds_ownership' => :'FundsOwnership',
        :'general_ledger_category' => :'GeneralLedgerCategory',
        :'general_ledger_type' => :'GeneralLedgerType',
        :'grace_period' => :'Integer',
        :'iban' => :'String',
        :'id' => :'String',
        :'interest_product_id' => :'String',
        :'is_account_pool' => :'Boolean',
        :'is_ach_enabled' => :'Boolean',
        :'is_card_enabled' => :'Boolean',
        :'is_eft_ca_enabled' => :'Boolean',
        :'is_external_card_enabled' => :'Boolean',
        :'is_p2p_enabled' => :'Boolean',
        :'is_sar_enabled' => :'Boolean',
        :'is_security' => :'Boolean',
        :'is_synctera_pay_enabled' => :'Boolean',
        :'is_system_auto_pay_enabled' => :'Boolean',
        :'is_wire_enabled' => :'Boolean',
        :'last_updated_time' => :'Time',
        :'metadata' => :'Object',
        :'minimum_payment' => :'MinimumPayment',
        :'nickname' => :'String',
        :'open_date' => :'Date',
        :'overdraft_limit' => :'Integer',
        :'restrictions' => :'AccountRestrictions',
        :'security' => :'Security',
        :'spend_control_ids' => :'Array<String>',
        :'spending_limits' => :'SpendingLimits',
        :'status' => :'AccountStatus',
        :'stop_payments' => :'Array<StopPayment>',
        :'swift_code' => :'String',
        :'tenant' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Synctera::AccountGenericResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Synctera::AccountGenericResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'access_status')
        self.access_status = attributes[:'access_status']
      end

      if attributes.key?(:'access_status_last_updated_time')
        self.access_status_last_updated_time = attributes[:'access_status_last_updated_time']
      end

      if attributes.key?(:'account_closure')
        self.account_closure = attributes[:'account_closure']
      end

      if attributes.key?(:'account_number')
        self.account_number = attributes[:'account_number']
      end

      if attributes.key?(:'account_number_masked')
        self.account_number_masked = attributes[:'account_number_masked']
      end

      if attributes.key?(:'account_purpose')
        self.account_purpose = attributes[:'account_purpose']
      end

      if attributes.key?(:'account_type')
        self.account_type = attributes[:'account_type']
      end

      if attributes.key?(:'application_id')
        self.application_id = attributes[:'application_id']
      end

      if attributes.key?(:'auto_payment_period')
        self.auto_payment_period = attributes[:'auto_payment_period']
      end

      if attributes.key?(:'balance_ceiling')
        self.balance_ceiling = attributes[:'balance_ceiling']
      end

      if attributes.key?(:'balance_floor')
        self.balance_floor = attributes[:'balance_floor']
      end

      if attributes.key?(:'balances')
        if (value = attributes[:'balances']).is_a?(Array)
          self.balances = value
        end
      end

      if attributes.key?(:'bank_account_id')
        self.bank_account_id = attributes[:'bank_account_id']
      end

      if attributes.key?(:'bank_routing')
        self.bank_routing = attributes[:'bank_routing']
      end

      if attributes.key?(:'billing_period')
        self.billing_period = attributes[:'billing_period']
      end

      if attributes.key?(:'business_ids')
        if (value = attributes[:'business_ids']).is_a?(Array)
          self.business_ids = value
        end
      end

      if attributes.key?(:'close_date')
        self.close_date = attributes[:'close_date']
      end

      if attributes.key?(:'creation_time')
        self.creation_time = attributes[:'creation_time']
      end

      if attributes.key?(:'credit_limit')
        self.credit_limit = attributes[:'credit_limit']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'customer_ids')
        if (value = attributes[:'customer_ids']).is_a?(Array)
          self.customer_ids = value
        end
      end

      if attributes.key?(:'customer_type')
        self.customer_type = attributes[:'customer_type']
      end

      if attributes.key?(:'days_past_due')
        self.days_past_due = attributes[:'days_past_due']
      end

      if attributes.key?(:'exchange_rate_type')
        self.exchange_rate_type = attributes[:'exchange_rate_type']
      end

      if attributes.key?(:'fee_product_ids')
        if (value = attributes[:'fee_product_ids']).is_a?(Array)
          self.fee_product_ids = value
        end
      end

      if attributes.key?(:'funds_ownership')
        self.funds_ownership = attributes[:'funds_ownership']
      end

      if attributes.key?(:'general_ledger_category')
        self.general_ledger_category = attributes[:'general_ledger_category']
      end

      if attributes.key?(:'general_ledger_type')
        self.general_ledger_type = attributes[:'general_ledger_type']
      end

      if attributes.key?(:'grace_period')
        self.grace_period = attributes[:'grace_period']
      end

      if attributes.key?(:'iban')
        self.iban = attributes[:'iban']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'interest_product_id')
        self.interest_product_id = attributes[:'interest_product_id']
      end

      if attributes.key?(:'is_account_pool')
        self.is_account_pool = attributes[:'is_account_pool']
      end

      if attributes.key?(:'is_ach_enabled')
        self.is_ach_enabled = attributes[:'is_ach_enabled']
      end

      if attributes.key?(:'is_card_enabled')
        self.is_card_enabled = attributes[:'is_card_enabled']
      end

      if attributes.key?(:'is_eft_ca_enabled')
        self.is_eft_ca_enabled = attributes[:'is_eft_ca_enabled']
      end

      if attributes.key?(:'is_external_card_enabled')
        self.is_external_card_enabled = attributes[:'is_external_card_enabled']
      end

      if attributes.key?(:'is_p2p_enabled')
        self.is_p2p_enabled = attributes[:'is_p2p_enabled']
      end

      if attributes.key?(:'is_sar_enabled')
        self.is_sar_enabled = attributes[:'is_sar_enabled']
      end

      if attributes.key?(:'is_security')
        self.is_security = attributes[:'is_security']
      end

      if attributes.key?(:'is_synctera_pay_enabled')
        self.is_synctera_pay_enabled = attributes[:'is_synctera_pay_enabled']
      end

      if attributes.key?(:'is_system_auto_pay_enabled')
        self.is_system_auto_pay_enabled = attributes[:'is_system_auto_pay_enabled']
      end

      if attributes.key?(:'is_wire_enabled')
        self.is_wire_enabled = attributes[:'is_wire_enabled']
      end

      if attributes.key?(:'last_updated_time')
        self.last_updated_time = attributes[:'last_updated_time']
      end

      if attributes.key?(:'metadata')
        self.metadata = attributes[:'metadata']
      end

      if attributes.key?(:'minimum_payment')
        self.minimum_payment = attributes[:'minimum_payment']
      end

      if attributes.key?(:'nickname')
        self.nickname = attributes[:'nickname']
      end

      if attributes.key?(:'open_date')
        self.open_date = attributes[:'open_date']
      end

      if attributes.key?(:'overdraft_limit')
        self.overdraft_limit = attributes[:'overdraft_limit']
      end

      if attributes.key?(:'restrictions')
        self.restrictions = attributes[:'restrictions']
      end

      if attributes.key?(:'security')
        self.security = attributes[:'security']
      end

      if attributes.key?(:'spend_control_ids')
        if (value = attributes[:'spend_control_ids']).is_a?(Array)
          self.spend_control_ids = value
        end
      end

      if attributes.key?(:'spending_limits')
        self.spending_limits = attributes[:'spending_limits']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'stop_payments')
        if (value = attributes[:'stop_payments']).is_a?(Array)
          self.stop_payments = value
        end
      end

      if attributes.key?(:'swift_code')
        self.swift_code = attributes[:'swift_code']
      end

      if attributes.key?(:'tenant')
        self.tenant = attributes[:'tenant']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@account_number.nil? && @account_number.to_s.length > 50
        invalid_properties.push('invalid value for "account_number", the character length must be smaller than or equal to 50.')
      end

      if !@account_number_masked.nil? && @account_number_masked.to_s.length > 50
        invalid_properties.push('invalid value for "account_number_masked", the character length must be smaller than or equal to 50.')
      end

      if !@auto_payment_period.nil? && @auto_payment_period > 28
        invalid_properties.push('invalid value for "auto_payment_period", must be smaller than or equal to 28.')
      end

      if !@auto_payment_period.nil? && @auto_payment_period < 0
        invalid_properties.push('invalid value for "auto_payment_period", must be greater than or equal to 0.')
      end

      if !@bank_routing.nil? && @bank_routing.to_s.length > 9
        invalid_properties.push('invalid value for "bank_routing", the character length must be smaller than or equal to 9.')
      end

      if !@credit_limit.nil? && @credit_limit < 0
        invalid_properties.push('invalid value for "credit_limit", must be greater than or equal to 0.')
      end

      pattern = Regexp.new(/^[A-Z]{3}$/)
      if !@currency.nil? && @currency !~ pattern
        invalid_properties.push("invalid value for \"currency\", must conform to the pattern #{pattern}.")
      end

      if !@exchange_rate_type.nil? && @exchange_rate_type.to_s.length > 10
        invalid_properties.push('invalid value for "exchange_rate_type", the character length must be smaller than or equal to 10.')
      end

      if !@grace_period.nil? && @grace_period > 28
        invalid_properties.push('invalid value for "grace_period", must be smaller than or equal to 28.')
      end

      if !@grace_period.nil? && @grace_period < 21
        invalid_properties.push('invalid value for "grace_period", must be greater than or equal to 21.')
      end

      if !@iban.nil? && @iban.to_s.length > 34
        invalid_properties.push('invalid value for "iban", the character length must be smaller than or equal to 34.')
      end

      if !@overdraft_limit.nil? && @overdraft_limit < 0
        invalid_properties.push('invalid value for "overdraft_limit", must be greater than or equal to 0.')
      end

      if !@spend_control_ids.nil? && @spend_control_ids.length > 10
        invalid_properties.push('invalid value for "spend_control_ids", number of items must be less than or equal to 10.')
      end

      if !@swift_code.nil? && @swift_code.to_s.length > 11
        invalid_properties.push('invalid value for "swift_code", the character length must be smaller than or equal to 11.')
      end

      if !@swift_code.nil? && @swift_code.to_s.length < 8
        invalid_properties.push('invalid value for "swift_code", the character length must be great than or equal to 8.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@account_number.nil? && @account_number.to_s.length > 50
      return false if !@account_number_masked.nil? && @account_number_masked.to_s.length > 50
      return false if !@auto_payment_period.nil? && @auto_payment_period > 28
      return false if !@auto_payment_period.nil? && @auto_payment_period < 0
      return false if !@bank_routing.nil? && @bank_routing.to_s.length > 9
      return false if !@credit_limit.nil? && @credit_limit < 0
      return false if !@currency.nil? && @currency !~ Regexp.new(/^[A-Z]{3}$/)
      return false if !@exchange_rate_type.nil? && @exchange_rate_type.to_s.length > 10
      return false if !@grace_period.nil? && @grace_period > 28
      return false if !@grace_period.nil? && @grace_period < 21
      return false if !@iban.nil? && @iban.to_s.length > 34
      return false if !@overdraft_limit.nil? && @overdraft_limit < 0
      return false if !@spend_control_ids.nil? && @spend_control_ids.length > 10
      return false if !@swift_code.nil? && @swift_code.to_s.length > 11
      return false if !@swift_code.nil? && @swift_code.to_s.length < 8
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] account_number Value to be assigned
    def account_number=(account_number)
      if account_number.nil?
        fail ArgumentError, 'account_number cannot be nil'
      end

      if account_number.to_s.length > 50
        fail ArgumentError, 'invalid value for "account_number", the character length must be smaller than or equal to 50.'
      end

      @account_number = account_number
    end

    # Custom attribute writer method with validation
    # @param [Object] account_number_masked Value to be assigned
    def account_number_masked=(account_number_masked)
      if account_number_masked.nil?
        fail ArgumentError, 'account_number_masked cannot be nil'
      end

      if account_number_masked.to_s.length > 50
        fail ArgumentError, 'invalid value for "account_number_masked", the character length must be smaller than or equal to 50.'
      end

      @account_number_masked = account_number_masked
    end

    # Custom attribute writer method with validation
    # @param [Object] auto_payment_period Value to be assigned
    def auto_payment_period=(auto_payment_period)
      if auto_payment_period.nil?
        fail ArgumentError, 'auto_payment_period cannot be nil'
      end

      if auto_payment_period > 28
        fail ArgumentError, 'invalid value for "auto_payment_period", must be smaller than or equal to 28.'
      end

      if auto_payment_period < 0
        fail ArgumentError, 'invalid value for "auto_payment_period", must be greater than or equal to 0.'
      end

      @auto_payment_period = auto_payment_period
    end

    # Custom attribute writer method with validation
    # @param [Object] bank_routing Value to be assigned
    def bank_routing=(bank_routing)
      if bank_routing.nil?
        fail ArgumentError, 'bank_routing cannot be nil'
      end

      if bank_routing.to_s.length > 9
        fail ArgumentError, 'invalid value for "bank_routing", the character length must be smaller than or equal to 9.'
      end

      @bank_routing = bank_routing
    end

    # Custom attribute writer method with validation
    # @param [Object] credit_limit Value to be assigned
    def credit_limit=(credit_limit)
      if credit_limit.nil?
        fail ArgumentError, 'credit_limit cannot be nil'
      end

      if credit_limit < 0
        fail ArgumentError, 'invalid value for "credit_limit", must be greater than or equal to 0.'
      end

      @credit_limit = credit_limit
    end

    # Custom attribute writer method with validation
    # @param [Object] currency Value to be assigned
    def currency=(currency)
      if currency.nil?
        fail ArgumentError, 'currency cannot be nil'
      end

      pattern = Regexp.new(/^[A-Z]{3}$/)
      if currency !~ pattern
        fail ArgumentError, "invalid value for \"currency\", must conform to the pattern #{pattern}."
      end

      @currency = currency
    end

    # Custom attribute writer method with validation
    # @param [Object] exchange_rate_type Value to be assigned
    def exchange_rate_type=(exchange_rate_type)
      if exchange_rate_type.nil?
        fail ArgumentError, 'exchange_rate_type cannot be nil'
      end

      if exchange_rate_type.to_s.length > 10
        fail ArgumentError, 'invalid value for "exchange_rate_type", the character length must be smaller than or equal to 10.'
      end

      @exchange_rate_type = exchange_rate_type
    end

    # Custom attribute writer method with validation
    # @param [Object] grace_period Value to be assigned
    def grace_period=(grace_period)
      if grace_period.nil?
        fail ArgumentError, 'grace_period cannot be nil'
      end

      if grace_period > 28
        fail ArgumentError, 'invalid value for "grace_period", must be smaller than or equal to 28.'
      end

      if grace_period < 21
        fail ArgumentError, 'invalid value for "grace_period", must be greater than or equal to 21.'
      end

      @grace_period = grace_period
    end

    # Custom attribute writer method with validation
    # @param [Object] iban Value to be assigned
    def iban=(iban)
      if iban.nil?
        fail ArgumentError, 'iban cannot be nil'
      end

      if iban.to_s.length > 34
        fail ArgumentError, 'invalid value for "iban", the character length must be smaller than or equal to 34.'
      end

      @iban = iban
    end

    # Custom attribute writer method with validation
    # @param [Object] overdraft_limit Value to be assigned
    def overdraft_limit=(overdraft_limit)
      if overdraft_limit.nil?
        fail ArgumentError, 'overdraft_limit cannot be nil'
      end

      if overdraft_limit < 0
        fail ArgumentError, 'invalid value for "overdraft_limit", must be greater than or equal to 0.'
      end

      @overdraft_limit = overdraft_limit
    end

    # Custom attribute writer method with validation
    # @param [Object] spend_control_ids Value to be assigned
    def spend_control_ids=(spend_control_ids)
      if spend_control_ids.nil?
        fail ArgumentError, 'spend_control_ids cannot be nil'
      end

      if spend_control_ids.length > 10
        fail ArgumentError, 'invalid value for "spend_control_ids", number of items must be less than or equal to 10.'
      end

      @spend_control_ids = spend_control_ids
    end

    # Custom attribute writer method with validation
    # @param [Object] swift_code Value to be assigned
    def swift_code=(swift_code)
      if swift_code.nil?
        fail ArgumentError, 'swift_code cannot be nil'
      end

      if swift_code.to_s.length > 11
        fail ArgumentError, 'invalid value for "swift_code", the character length must be smaller than or equal to 11.'
      end

      if swift_code.to_s.length < 8
        fail ArgumentError, 'invalid value for "swift_code", the character length must be great than or equal to 8.'
      end

      @swift_code = swift_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          access_status == o.access_status &&
          access_status_last_updated_time == o.access_status_last_updated_time &&
          account_closure == o.account_closure &&
          account_number == o.account_number &&
          account_number_masked == o.account_number_masked &&
          account_purpose == o.account_purpose &&
          account_type == o.account_type &&
          application_id == o.application_id &&
          auto_payment_period == o.auto_payment_period &&
          balance_ceiling == o.balance_ceiling &&
          balance_floor == o.balance_floor &&
          balances == o.balances &&
          bank_account_id == o.bank_account_id &&
          bank_routing == o.bank_routing &&
          billing_period == o.billing_period &&
          business_ids == o.business_ids &&
          close_date == o.close_date &&
          creation_time == o.creation_time &&
          credit_limit == o.credit_limit &&
          currency == o.currency &&
          customer_ids == o.customer_ids &&
          customer_type == o.customer_type &&
          days_past_due == o.days_past_due &&
          exchange_rate_type == o.exchange_rate_type &&
          fee_product_ids == o.fee_product_ids &&
          funds_ownership == o.funds_ownership &&
          general_ledger_category == o.general_ledger_category &&
          general_ledger_type == o.general_ledger_type &&
          grace_period == o.grace_period &&
          iban == o.iban &&
          id == o.id &&
          interest_product_id == o.interest_product_id &&
          is_account_pool == o.is_account_pool &&
          is_ach_enabled == o.is_ach_enabled &&
          is_card_enabled == o.is_card_enabled &&
          is_eft_ca_enabled == o.is_eft_ca_enabled &&
          is_external_card_enabled == o.is_external_card_enabled &&
          is_p2p_enabled == o.is_p2p_enabled &&
          is_sar_enabled == o.is_sar_enabled &&
          is_security == o.is_security &&
          is_synctera_pay_enabled == o.is_synctera_pay_enabled &&
          is_system_auto_pay_enabled == o.is_system_auto_pay_enabled &&
          is_wire_enabled == o.is_wire_enabled &&
          last_updated_time == o.last_updated_time &&
          metadata == o.metadata &&
          minimum_payment == o.minimum_payment &&
          nickname == o.nickname &&
          open_date == o.open_date &&
          overdraft_limit == o.overdraft_limit &&
          restrictions == o.restrictions &&
          security == o.security &&
          spend_control_ids == o.spend_control_ids &&
          spending_limits == o.spending_limits &&
          status == o.status &&
          stop_payments == o.stop_payments &&
          swift_code == o.swift_code &&
          tenant == o.tenant
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [access_status, access_status_last_updated_time, account_closure, account_number, account_number_masked, account_purpose, account_type, application_id, auto_payment_period, balance_ceiling, balance_floor, balances, bank_account_id, bank_routing, billing_period, business_ids, close_date, creation_time, credit_limit, currency, customer_ids, customer_type, days_past_due, exchange_rate_type, fee_product_ids, funds_ownership, general_ledger_category, general_ledger_type, grace_period, iban, id, interest_product_id, is_account_pool, is_ach_enabled, is_card_enabled, is_eft_ca_enabled, is_external_card_enabled, is_p2p_enabled, is_sar_enabled, is_security, is_synctera_pay_enabled, is_system_auto_pay_enabled, is_wire_enabled, last_updated_time, metadata, minimum_payment, nickname, open_date, overdraft_limit, restrictions, security, spend_control_ids, spending_limits, status, stop_payments, swift_code, tenant].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Synctera.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
