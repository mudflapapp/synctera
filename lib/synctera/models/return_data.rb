=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.145.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module Synctera
  # Filled if the entry is a return.
  class ReturnData
    # Return reason code, i.e. why is the entry being returned.
    attr_accessor :code

    # Code of the original dishonored return (without \"R\"). Filled only if this is a contested return.
    attr_accessor :dishonored_return_code

    # Settlement date of the original dishonored return. Filled only if this is a contested return. Formatted as an ordinal date, a single day-of-year number between 1-366.
    attr_accessor :dishonored_return_settlement_date

    # Trace number of the original dishonored return. Filled only if this is a contested return.
    attr_accessor :dishonored_return_trace

    # Required for return reason code R69. Contains the code(s) to indicate the field(s) in which erroneous information in the original return is located.
    attr_accessor :field_errors

    # Receiving financial institution of the original entry.
    attr_accessor :original_dfi_no

    # Trace number of the original entry that is being returned.
    attr_accessor :original_trace

    # Return reason code of the original return (just the number). Filled only if this is a dishonored return.
    attr_accessor :return_code

    # Settlement date of the original return. Filled only if this is a dishonored return. Formatted as an ordinal date, a single day-of-year number between 1-366.
    attr_accessor :return_settlement_date

    # Trace number of the original return. Filled only if this is a dishonored return.
    attr_accessor :return_trace

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'code' => :'code',
        :'dishonored_return_code' => :'dishonored_return_code',
        :'dishonored_return_settlement_date' => :'dishonored_return_settlement_date',
        :'dishonored_return_trace' => :'dishonored_return_trace',
        :'field_errors' => :'field_errors',
        :'original_dfi_no' => :'original_dfi_no',
        :'original_trace' => :'original_trace',
        :'return_code' => :'return_code',
        :'return_settlement_date' => :'return_settlement_date',
        :'return_trace' => :'return_trace'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'code' => :'String',
        :'dishonored_return_code' => :'String',
        :'dishonored_return_settlement_date' => :'String',
        :'dishonored_return_trace' => :'String',
        :'field_errors' => :'String',
        :'original_dfi_no' => :'String',
        :'original_trace' => :'String',
        :'return_code' => :'String',
        :'return_settlement_date' => :'String',
        :'return_trace' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Synctera::ReturnData` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Synctera::ReturnData`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'code')
        self.code = attributes[:'code']
      else
        self.code = nil
      end

      if attributes.key?(:'dishonored_return_code')
        self.dishonored_return_code = attributes[:'dishonored_return_code']
      end

      if attributes.key?(:'dishonored_return_settlement_date')
        self.dishonored_return_settlement_date = attributes[:'dishonored_return_settlement_date']
      end

      if attributes.key?(:'dishonored_return_trace')
        self.dishonored_return_trace = attributes[:'dishonored_return_trace']
      end

      if attributes.key?(:'field_errors')
        self.field_errors = attributes[:'field_errors']
      end

      if attributes.key?(:'original_dfi_no')
        self.original_dfi_no = attributes[:'original_dfi_no']
      else
        self.original_dfi_no = nil
      end

      if attributes.key?(:'original_trace')
        self.original_trace = attributes[:'original_trace']
      else
        self.original_trace = nil
      end

      if attributes.key?(:'return_code')
        self.return_code = attributes[:'return_code']
      end

      if attributes.key?(:'return_settlement_date')
        self.return_settlement_date = attributes[:'return_settlement_date']
      end

      if attributes.key?(:'return_trace')
        self.return_trace = attributes[:'return_trace']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @code.nil?
        invalid_properties.push('invalid value for "code", code cannot be nil.')
      end

      if @original_dfi_no.nil?
        invalid_properties.push('invalid value for "original_dfi_no", original_dfi_no cannot be nil.')
      end

      if @original_trace.nil?
        invalid_properties.push('invalid value for "original_trace", original_trace cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @code.nil?
      return false if @original_dfi_no.nil?
      return false if @original_trace.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          code == o.code &&
          dishonored_return_code == o.dishonored_return_code &&
          dishonored_return_settlement_date == o.dishonored_return_settlement_date &&
          dishonored_return_trace == o.dishonored_return_trace &&
          field_errors == o.field_errors &&
          original_dfi_no == o.original_dfi_no &&
          original_trace == o.original_trace &&
          return_code == o.return_code &&
          return_settlement_date == o.return_settlement_date &&
          return_trace == o.return_trace
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [code, dishonored_return_code, dishonored_return_settlement_date, dishonored_return_trace, field_errors, original_dfi_no, original_trace, return_code, return_settlement_date, return_trace].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Synctera.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
