=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 1.82.0

Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'date'
require 'time'

module Synctera
  # A summary for the security account backing the credit account.
  class SecurityAccountSummary
    # The unique identifier of the backing account.
    attr_accessor :account_id

    # Account number of the backing account.
    attr_accessor :account_number

    # The type of the account. It refers to the backing account. 
    attr_accessor :account_type

    # The annual percentage yield (APY) for the security account for this statement period, in basis points. For example, an APY of 5.5% will display as 550. 
    attr_accessor :apy

    # The security account balance at the end of the statement period, in ISO 4217 minor currency units. For example, $1,000 USD will be displayed as 100000.
    attr_accessor :closing_balance

    attr_accessor :disclosure

    # The total interest earned by the security account for this statement period in ISO 4217 minor currency units. For example, $1.50 USD of interest will be displayed as 150. 
    attr_accessor :interest

    # The total interest earned by the security account in the previous statement period in ISO 4217 minor currency units. For example, $1.50 USD of interest will be displayed as 150. 
    attr_accessor :interest_previous_month

    # The total interest earned by the security account in the previous year in ISO 4217 minor currency units. For example, $100 USD of interest will be displayed as 10000. 
    attr_accessor :interest_previous_year

    # The total interest earned by the security account for this year to date in ISO 4217 minor currency units. For example, $100 USD of interest will be displayed as 10000. 
    attr_accessor :interest_ytd

    # The security account balance at the start of the statement period, in ISO 4217 minor currency units. For example, $1,000 USD will be displayed as 100000.
    attr_accessor :opening_balance

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account_id' => :'account_id',
        :'account_number' => :'account_number',
        :'account_type' => :'account_type',
        :'apy' => :'apy',
        :'closing_balance' => :'closing_balance',
        :'disclosure' => :'disclosure',
        :'interest' => :'interest',
        :'interest_previous_month' => :'interest_previous_month',
        :'interest_previous_year' => :'interest_previous_year',
        :'interest_ytd' => :'interest_ytd',
        :'opening_balance' => :'opening_balance'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'account_id' => :'String',
        :'account_number' => :'String',
        :'account_type' => :'String',
        :'apy' => :'Integer',
        :'closing_balance' => :'Integer',
        :'disclosure' => :'String',
        :'interest' => :'Integer',
        :'interest_previous_month' => :'Integer',
        :'interest_previous_year' => :'Integer',
        :'interest_ytd' => :'Integer',
        :'opening_balance' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Synctera::SecurityAccountSummary` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Synctera::SecurityAccountSummary`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'account_id')
        self.account_id = attributes[:'account_id']
      end

      if attributes.key?(:'account_number')
        self.account_number = attributes[:'account_number']
      end

      if attributes.key?(:'account_type')
        self.account_type = attributes[:'account_type']
      end

      if attributes.key?(:'apy')
        self.apy = attributes[:'apy']
      end

      if attributes.key?(:'closing_balance')
        self.closing_balance = attributes[:'closing_balance']
      end

      if attributes.key?(:'disclosure')
        self.disclosure = attributes[:'disclosure']
      end

      if attributes.key?(:'interest')
        self.interest = attributes[:'interest']
      end

      if attributes.key?(:'interest_previous_month')
        self.interest_previous_month = attributes[:'interest_previous_month']
      end

      if attributes.key?(:'interest_previous_year')
        self.interest_previous_year = attributes[:'interest_previous_year']
      end

      if attributes.key?(:'interest_ytd')
        self.interest_ytd = attributes[:'interest_ytd']
      end

      if attributes.key?(:'opening_balance')
        self.opening_balance = attributes[:'opening_balance']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_id == o.account_id &&
          account_number == o.account_number &&
          account_type == o.account_type &&
          apy == o.apy &&
          closing_balance == o.closing_balance &&
          disclosure == o.disclosure &&
          interest == o.interest &&
          interest_previous_month == o.interest_previous_month &&
          interest_previous_year == o.interest_previous_year &&
          interest_ytd == o.interest_ytd &&
          opening_balance == o.opening_balance
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [account_id, account_number, account_type, apy, closing_balance, disclosure, interest, interest_previous_month, interest_previous_year, interest_ytd, opening_balance].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Synctera.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
