=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 1.82.0

Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'date'
require 'time'

module Synctera
  # A summary of the accrued interest for the credit account in the current period.
  class CreditSummary
    # The portion of the posted account balance that exceeds the account's credit limit, in ISO 4217 minor currency units.
    attr_accessor :amount_over_limit

    # Any outstanding balance from a previous statement for this account in ISO 4217 minor currency units. 
    attr_accessor :amount_past_due

    # The annual percentage rate of the credit account, in basis points.
    attr_accessor :apr

    # Balance on which interest is computed during the time interval covered by the statement.
    attr_accessor :balance_for_interest

    # The credit limit of the credit account, in ISO 4217 minor currency units. Not applicable for charge secured accounts.
    attr_accessor :credit_limit

    # A suggested regulatory disclosure to display on the statement.
    attr_accessor :disclosure

    # The total fees charged on the credit account in ISO 4217 minor currency units during the time interval covered by the statement.
    attr_accessor :fees

    # The total fees charged on the credit account in ISO 4217 minor currency units for the year to date.
    attr_accessor :fees_ytd

    # The total interest charged on the credit account in ISO 4217 minor currency units during the time interval covered by the statement.
    attr_accessor :interest

    # The total interest charged on the credit account in ISO 4217 minor currency units for the year to date.
    attr_accessor :interest_ytd

    # Whether or not the credit account is past due on payment.
    attr_accessor :is_past_due

    # The date of the last payment received.
    attr_accessor :last_payment_date

    # The minimum payment amount due by the payment due date in ISO 4217 minor currency units.
    attr_accessor :minimum_payment_due

    # The date the next payment is due.
    attr_accessor :payment_due_date

    # The sum of all payments received in ISO 4217 minor currency units.
    attr_accessor :payments_received

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'amount_over_limit' => :'amount_over_limit',
        :'amount_past_due' => :'amount_past_due',
        :'apr' => :'apr',
        :'balance_for_interest' => :'balance_for_interest',
        :'credit_limit' => :'credit_limit',
        :'disclosure' => :'disclosure',
        :'fees' => :'fees',
        :'fees_ytd' => :'fees_ytd',
        :'interest' => :'interest',
        :'interest_ytd' => :'interest_ytd',
        :'is_past_due' => :'is_past_due',
        :'last_payment_date' => :'last_payment_date',
        :'minimum_payment_due' => :'minimum_payment_due',
        :'payment_due_date' => :'payment_due_date',
        :'payments_received' => :'payments_received'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'amount_over_limit' => :'Integer',
        :'amount_past_due' => :'Integer',
        :'apr' => :'Integer',
        :'balance_for_interest' => :'Integer',
        :'credit_limit' => :'Integer',
        :'disclosure' => :'String',
        :'fees' => :'Integer',
        :'fees_ytd' => :'Integer',
        :'interest' => :'Integer',
        :'interest_ytd' => :'Integer',
        :'is_past_due' => :'Boolean',
        :'last_payment_date' => :'Date',
        :'minimum_payment_due' => :'Integer',
        :'payment_due_date' => :'Date',
        :'payments_received' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Synctera::CreditSummary` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Synctera::CreditSummary`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'amount_over_limit')
        self.amount_over_limit = attributes[:'amount_over_limit']
      end

      if attributes.key?(:'amount_past_due')
        self.amount_past_due = attributes[:'amount_past_due']
      end

      if attributes.key?(:'apr')
        self.apr = attributes[:'apr']
      end

      if attributes.key?(:'balance_for_interest')
        self.balance_for_interest = attributes[:'balance_for_interest']
      end

      if attributes.key?(:'credit_limit')
        self.credit_limit = attributes[:'credit_limit']
      end

      if attributes.key?(:'disclosure')
        self.disclosure = attributes[:'disclosure']
      end

      if attributes.key?(:'fees')
        self.fees = attributes[:'fees']
      end

      if attributes.key?(:'fees_ytd')
        self.fees_ytd = attributes[:'fees_ytd']
      end

      if attributes.key?(:'interest')
        self.interest = attributes[:'interest']
      end

      if attributes.key?(:'interest_ytd')
        self.interest_ytd = attributes[:'interest_ytd']
      end

      if attributes.key?(:'is_past_due')
        self.is_past_due = attributes[:'is_past_due']
      end

      if attributes.key?(:'last_payment_date')
        self.last_payment_date = attributes[:'last_payment_date']
      end

      if attributes.key?(:'minimum_payment_due')
        self.minimum_payment_due = attributes[:'minimum_payment_due']
      end

      if attributes.key?(:'payment_due_date')
        self.payment_due_date = attributes[:'payment_due_date']
      end

      if attributes.key?(:'payments_received')
        self.payments_received = attributes[:'payments_received']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          amount_over_limit == o.amount_over_limit &&
          amount_past_due == o.amount_past_due &&
          apr == o.apr &&
          balance_for_interest == o.balance_for_interest &&
          credit_limit == o.credit_limit &&
          disclosure == o.disclosure &&
          fees == o.fees &&
          fees_ytd == o.fees_ytd &&
          interest == o.interest &&
          interest_ytd == o.interest_ytd &&
          is_past_due == o.is_past_due &&
          last_payment_date == o.last_payment_date &&
          minimum_payment_due == o.minimum_payment_due &&
          payment_due_date == o.payment_due_date &&
          payments_received == o.payments_received
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [amount_over_limit, amount_past_due, apr, balance_for_interest, credit_limit, disclosure, fees, fees_ytd, interest, interest_ytd, is_past_due, last_payment_date, minimum_payment_due, payment_due_date, payments_received].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Synctera.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
