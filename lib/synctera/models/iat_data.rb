=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.147.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module Synctera
  # Aggregates contents of the IAT addenda records (10-16)
  class IatData
    # For inbound IAT payments this field should contain the USD amount or may be blank. Amount is in cents ($100 would be 10000).
    attr_accessor :foreign_payment_amount

    attr_accessor :foreign_trace_number

    # Receiving Company Name/Individual Name
    attr_accessor :name

    # For Inbound IATs: This 3 position field contains a 2-character code as approved by the International Organization for Standardization (ISO) used to identify the country in which the branch of the bank that originated the entry is located. Values for other countries can be found on the International Organization for Standardization website: www.iso.org. 
    attr_accessor :odfi_branch_country_code

    # For Inbound IATs: The 2-digit code that identifies the numbering scheme used in the Foreign DFI Identification Number field: 01 = National Clearing System 02 = BIC Code 03 = IBAN Code 
    attr_accessor :odfi_id_number_qualifier

    # For Inbound IATs: This field contains the bank ID number of the Foreign Bank providing funding for the payment transaction. 
    attr_accessor :odfi_identification

    # For Inbound IATs: The name of the foreign bank providing funding for the payment transaction 
    attr_accessor :odfi_name

    attr_accessor :originator_address

    # The originators name
    attr_accessor :originator_name

    # This 3 position field contains a 2-character code as approved by the International Organization for Standardization (ISO) used to identify the country in which the branch of the bank that receives the entry is located. Values for other countries can be found on the International Organization for Standardization website: www.iso.org 
    attr_accessor :rdfi_branch_country_code

    # The 2-digit code that identifies the numbering scheme used in the Receiving DFI Identification Number field: 01 = National Clearing System 02 = BIC Code 03 = IBAN Code 
    attr_accessor :rdfi_id_number_qualifier

    # The bank identification number of the DFI at which the Receiver maintains his account.
    attr_accessor :rdfi_identification

    # Name of the Receiver's bank
    attr_accessor :rdfi_name

    attr_accessor :receiver_address

    # The accounting number by which the Originator is known to the Receiver for descriptive purposes.
    attr_accessor :receiver_id_number

    # Transaction Type Code Describes the type of payment ANN = Annuity, BUS = Business/Commercial, DEP = Deposit, LOA = Loan, MIS = Miscellaneous, MOR = Mortgage PEN = Pension, RLS = Rent/Lease, REM = Remittance2, SAL = Salary/Payroll, TAX = Tax, TEL = Telephone-Initiated Transaction WEB = Internet-Initiated Transaction, ARC = Accounts Receivable Entry, BOC = Back Office Conversion Entry, POP = Point of Purchase Entry, RCK = Re-presented Check Entry 
    attr_accessor :transaction_type_code

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'foreign_payment_amount' => :'foreign_payment_amount',
        :'foreign_trace_number' => :'foreign_trace_number',
        :'name' => :'name',
        :'odfi_branch_country_code' => :'odfi_branch_country_code',
        :'odfi_id_number_qualifier' => :'odfi_id_number_qualifier',
        :'odfi_identification' => :'odfi_identification',
        :'odfi_name' => :'odfi_name',
        :'originator_address' => :'originator_address',
        :'originator_name' => :'originator_name',
        :'rdfi_branch_country_code' => :'rdfi_branch_country_code',
        :'rdfi_id_number_qualifier' => :'rdfi_id_number_qualifier',
        :'rdfi_identification' => :'rdfi_identification',
        :'rdfi_name' => :'rdfi_name',
        :'receiver_address' => :'receiver_address',
        :'receiver_id_number' => :'receiver_id_number',
        :'transaction_type_code' => :'transaction_type_code'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'foreign_payment_amount' => :'Integer',
        :'foreign_trace_number' => :'String',
        :'name' => :'String',
        :'odfi_branch_country_code' => :'String',
        :'odfi_id_number_qualifier' => :'String',
        :'odfi_identification' => :'String',
        :'odfi_name' => :'String',
        :'originator_address' => :'IatAddress',
        :'originator_name' => :'String',
        :'rdfi_branch_country_code' => :'String',
        :'rdfi_id_number_qualifier' => :'String',
        :'rdfi_identification' => :'String',
        :'rdfi_name' => :'String',
        :'receiver_address' => :'IatAddress',
        :'receiver_id_number' => :'String',
        :'transaction_type_code' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Synctera::IatData` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Synctera::IatData`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'foreign_payment_amount')
        self.foreign_payment_amount = attributes[:'foreign_payment_amount']
      else
        self.foreign_payment_amount = nil
      end

      if attributes.key?(:'foreign_trace_number')
        self.foreign_trace_number = attributes[:'foreign_trace_number']
      else
        self.foreign_trace_number = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'odfi_branch_country_code')
        self.odfi_branch_country_code = attributes[:'odfi_branch_country_code']
      else
        self.odfi_branch_country_code = nil
      end

      if attributes.key?(:'odfi_id_number_qualifier')
        self.odfi_id_number_qualifier = attributes[:'odfi_id_number_qualifier']
      else
        self.odfi_id_number_qualifier = nil
      end

      if attributes.key?(:'odfi_identification')
        self.odfi_identification = attributes[:'odfi_identification']
      else
        self.odfi_identification = nil
      end

      if attributes.key?(:'odfi_name')
        self.odfi_name = attributes[:'odfi_name']
      else
        self.odfi_name = nil
      end

      if attributes.key?(:'originator_address')
        self.originator_address = attributes[:'originator_address']
      else
        self.originator_address = nil
      end

      if attributes.key?(:'originator_name')
        self.originator_name = attributes[:'originator_name']
      else
        self.originator_name = nil
      end

      if attributes.key?(:'rdfi_branch_country_code')
        self.rdfi_branch_country_code = attributes[:'rdfi_branch_country_code']
      else
        self.rdfi_branch_country_code = nil
      end

      if attributes.key?(:'rdfi_id_number_qualifier')
        self.rdfi_id_number_qualifier = attributes[:'rdfi_id_number_qualifier']
      else
        self.rdfi_id_number_qualifier = nil
      end

      if attributes.key?(:'rdfi_identification')
        self.rdfi_identification = attributes[:'rdfi_identification']
      else
        self.rdfi_identification = nil
      end

      if attributes.key?(:'rdfi_name')
        self.rdfi_name = attributes[:'rdfi_name']
      else
        self.rdfi_name = nil
      end

      if attributes.key?(:'receiver_address')
        self.receiver_address = attributes[:'receiver_address']
      else
        self.receiver_address = nil
      end

      if attributes.key?(:'receiver_id_number')
        self.receiver_id_number = attributes[:'receiver_id_number']
      else
        self.receiver_id_number = nil
      end

      if attributes.key?(:'transaction_type_code')
        self.transaction_type_code = attributes[:'transaction_type_code']
      else
        self.transaction_type_code = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @foreign_payment_amount.nil?
        invalid_properties.push('invalid value for "foreign_payment_amount", foreign_payment_amount cannot be nil.')
      end

      if @foreign_trace_number.nil?
        invalid_properties.push('invalid value for "foreign_trace_number", foreign_trace_number cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @odfi_branch_country_code.nil?
        invalid_properties.push('invalid value for "odfi_branch_country_code", odfi_branch_country_code cannot be nil.')
      end

      if @odfi_id_number_qualifier.nil?
        invalid_properties.push('invalid value for "odfi_id_number_qualifier", odfi_id_number_qualifier cannot be nil.')
      end

      if @odfi_identification.nil?
        invalid_properties.push('invalid value for "odfi_identification", odfi_identification cannot be nil.')
      end

      if @odfi_name.nil?
        invalid_properties.push('invalid value for "odfi_name", odfi_name cannot be nil.')
      end

      if @originator_address.nil?
        invalid_properties.push('invalid value for "originator_address", originator_address cannot be nil.')
      end

      if @originator_name.nil?
        invalid_properties.push('invalid value for "originator_name", originator_name cannot be nil.')
      end

      if @rdfi_branch_country_code.nil?
        invalid_properties.push('invalid value for "rdfi_branch_country_code", rdfi_branch_country_code cannot be nil.')
      end

      if @rdfi_id_number_qualifier.nil?
        invalid_properties.push('invalid value for "rdfi_id_number_qualifier", rdfi_id_number_qualifier cannot be nil.')
      end

      if @rdfi_identification.nil?
        invalid_properties.push('invalid value for "rdfi_identification", rdfi_identification cannot be nil.')
      end

      if @rdfi_name.nil?
        invalid_properties.push('invalid value for "rdfi_name", rdfi_name cannot be nil.')
      end

      if @receiver_address.nil?
        invalid_properties.push('invalid value for "receiver_address", receiver_address cannot be nil.')
      end

      if @receiver_id_number.nil?
        invalid_properties.push('invalid value for "receiver_id_number", receiver_id_number cannot be nil.')
      end

      if @transaction_type_code.nil?
        invalid_properties.push('invalid value for "transaction_type_code", transaction_type_code cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @foreign_payment_amount.nil?
      return false if @foreign_trace_number.nil?
      return false if @name.nil?
      return false if @odfi_branch_country_code.nil?
      return false if @odfi_id_number_qualifier.nil?
      return false if @odfi_identification.nil?
      return false if @odfi_name.nil?
      return false if @originator_address.nil?
      return false if @originator_name.nil?
      return false if @rdfi_branch_country_code.nil?
      return false if @rdfi_id_number_qualifier.nil?
      return false if @rdfi_identification.nil?
      return false if @rdfi_name.nil?
      return false if @receiver_address.nil?
      return false if @receiver_id_number.nil?
      return false if @transaction_type_code.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          foreign_payment_amount == o.foreign_payment_amount &&
          foreign_trace_number == o.foreign_trace_number &&
          name == o.name &&
          odfi_branch_country_code == o.odfi_branch_country_code &&
          odfi_id_number_qualifier == o.odfi_id_number_qualifier &&
          odfi_identification == o.odfi_identification &&
          odfi_name == o.odfi_name &&
          originator_address == o.originator_address &&
          originator_name == o.originator_name &&
          rdfi_branch_country_code == o.rdfi_branch_country_code &&
          rdfi_id_number_qualifier == o.rdfi_id_number_qualifier &&
          rdfi_identification == o.rdfi_identification &&
          rdfi_name == o.rdfi_name &&
          receiver_address == o.receiver_address &&
          receiver_id_number == o.receiver_id_number &&
          transaction_type_code == o.transaction_type_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [foreign_payment_amount, foreign_trace_number, name, odfi_branch_country_code, odfi_id_number_qualifier, odfi_identification, odfi_name, originator_address, originator_name, rdfi_branch_country_code, rdfi_id_number_qualifier, rdfi_identification, rdfi_name, receiver_address, receiver_id_number, transaction_type_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Synctera.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
