=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 1.82.0

Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'date'
require 'time'

module Synctera
  # Create an action against a disputed card transaction
  class CardDisputeAction
    attr_accessor :action

    # Memo text related to card dispute action * Required for PRE_ARBITRATION, ARBITRATION, PRE_COMPLIANCE, COMPLIANCE 
    attr_accessor :memo

    # Message text related to card dispute action * Max length for debit transactions is 38 characters 
    attr_accessor :message

    attr_accessor :payment_rail

    attr_accessor :reason_code

    attr_accessor :state

    # The unique identifier of the supporting document
    attr_accessor :supporting_doc_id

    # Memo text describing the reason for updating a reason code. * Required for PRE_ARBITRATION and ARBITRATION if a reason code is provided in the request. If no reason code is present in the request, the original CHARGEBACK reason code will be used. 
    attr_accessor :updated_reason_code_memo

    # * Required for PRE_COMPLIANCE and COMPLIANCE 
    attr_accessor :violation_code

    # The timestamp representing when the violation occurred. * Required for PRE_COMPLIANCE and COMPLIANCE 
    attr_accessor :violation_date

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'action' => :'action',
        :'memo' => :'memo',
        :'message' => :'message',
        :'payment_rail' => :'payment_rail',
        :'reason_code' => :'reason_code',
        :'state' => :'state',
        :'supporting_doc_id' => :'supporting_doc_id',
        :'updated_reason_code_memo' => :'updated_reason_code_memo',
        :'violation_code' => :'violation_code',
        :'violation_date' => :'violation_date'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'action' => :'CardAction',
        :'memo' => :'String',
        :'message' => :'String',
        :'payment_rail' => :'PaymentRail',
        :'reason_code' => :'CardDisputeReasonCodes',
        :'state' => :'CardActionState',
        :'supporting_doc_id' => :'String',
        :'updated_reason_code_memo' => :'String',
        :'violation_code' => :'String',
        :'violation_date' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Synctera::CardDisputeAction` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Synctera::CardDisputeAction`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'action')
        self.action = attributes[:'action']
      else
        self.action = nil
      end

      if attributes.key?(:'memo')
        self.memo = attributes[:'memo']
      end

      if attributes.key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.key?(:'payment_rail')
        self.payment_rail = attributes[:'payment_rail']
      else
        self.payment_rail = nil
      end

      if attributes.key?(:'reason_code')
        self.reason_code = attributes[:'reason_code']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      else
        self.state = nil
      end

      if attributes.key?(:'supporting_doc_id')
        self.supporting_doc_id = attributes[:'supporting_doc_id']
      end

      if attributes.key?(:'updated_reason_code_memo')
        self.updated_reason_code_memo = attributes[:'updated_reason_code_memo']
      end

      if attributes.key?(:'violation_code')
        self.violation_code = attributes[:'violation_code']
      end

      if attributes.key?(:'violation_date')
        self.violation_date = attributes[:'violation_date']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @action.nil?
        invalid_properties.push('invalid value for "action", action cannot be nil.')
      end

      if !@memo.nil? && @memo.to_s.length > 1000
        invalid_properties.push('invalid value for "memo", the character length must be smaller than or equal to 1000.')
      end

      if !@message.nil? && @message.to_s.length > 100
        invalid_properties.push('invalid value for "message", the character length must be smaller than or equal to 100.')
      end

      if @payment_rail.nil?
        invalid_properties.push('invalid value for "payment_rail", payment_rail cannot be nil.')
      end

      if @state.nil?
        invalid_properties.push('invalid value for "state", state cannot be nil.')
      end

      if !@updated_reason_code_memo.nil? && @updated_reason_code_memo.to_s.length > 1000
        invalid_properties.push('invalid value for "updated_reason_code_memo", the character length must be smaller than or equal to 1000.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @action.nil?
      return false if !@memo.nil? && @memo.to_s.length > 1000
      return false if !@message.nil? && @message.to_s.length > 100
      return false if @payment_rail.nil?
      return false if @state.nil?
      return false if !@updated_reason_code_memo.nil? && @updated_reason_code_memo.to_s.length > 1000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] memo Value to be assigned
    def memo=(memo)
      if memo.nil?
        fail ArgumentError, 'memo cannot be nil'
      end

      if memo.to_s.length > 1000
        fail ArgumentError, 'invalid value for "memo", the character length must be smaller than or equal to 1000.'
      end

      @memo = memo
    end

    # Custom attribute writer method with validation
    # @param [Object] message Value to be assigned
    def message=(message)
      if message.nil?
        fail ArgumentError, 'message cannot be nil'
      end

      if message.to_s.length > 100
        fail ArgumentError, 'invalid value for "message", the character length must be smaller than or equal to 100.'
      end

      @message = message
    end

    # Custom attribute writer method with validation
    # @param [Object] updated_reason_code_memo Value to be assigned
    def updated_reason_code_memo=(updated_reason_code_memo)
      if updated_reason_code_memo.nil?
        fail ArgumentError, 'updated_reason_code_memo cannot be nil'
      end

      if updated_reason_code_memo.to_s.length > 1000
        fail ArgumentError, 'invalid value for "updated_reason_code_memo", the character length must be smaller than or equal to 1000.'
      end

      @updated_reason_code_memo = updated_reason_code_memo
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          action == o.action &&
          memo == o.memo &&
          message == o.message &&
          payment_rail == o.payment_rail &&
          reason_code == o.reason_code &&
          state == o.state &&
          supporting_doc_id == o.supporting_doc_id &&
          updated_reason_code_memo == o.updated_reason_code_memo &&
          violation_code == o.violation_code &&
          violation_date == o.violation_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [action, memo, message, payment_rail, reason_code, state, supporting_doc_id, updated_reason_code_memo, violation_code, violation_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Synctera.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
