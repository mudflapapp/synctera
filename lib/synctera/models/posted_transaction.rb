=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.145.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module Synctera
  class PostedTransaction
    # The creation date of the transaction
    attr_accessor :created

    attr_accessor :data

    # The set of disputes related to this transaction. Since a dispute can be for a partial amount of a transaction, a single transaction can be involved in multiple disputes.
    attr_accessor :disputes

    # The \"effective date\" of a transaction. This may be earlier than posted_date in some cases (for example, a transaction that occurs on a Saturday may not be posted until the following Monday, but would have an effective date of Saturday)
    attr_accessor :effective_date

    attr_accessor :id

    # The idempotency key used when initially creating this transaction.
    attr_accessor :idemkey

    # Whether or not this transaction represents a purely informational operation or an actual money movement
    attr_accessor :info_only

    # Whether or not this transaction was created operating in \"lead ledger\" mode
    attr_accessor :lead_mode

    # The date the transaction was posted. This is the date any money is considered to be added or removed from an account.
    attr_accessor :posted_date

    # An external ID provided by the payment network to represent this transaction. This will always be null for internal transfers.
    attr_accessor :reference_id

    # The date the transaction was settled according to Synctera's platform. Generally, this can be interpretted the date the transaction was actually processed and settlement by the payment network.
    attr_accessor :settlement_date

    attr_accessor :status

    # The specific transaction type. For example, for `ach`, this may be \"outgoing_debit\".
    attr_accessor :subtype

    # The id of the tenant containing the resource. This is relevant for Fintechs that have multiple workspaces. 
    attr_accessor :tenant

    # The time the transaction occurred.
    attr_accessor :transaction_time

    # The general type of transaction. For example, \"card\" or \"ach\".
    attr_accessor :type

    # The date the transaction was last updated
    attr_accessor :updated

    # The unique identifier of the transaction.
    attr_accessor :uuid

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'created' => :'created',
        :'data' => :'data',
        :'disputes' => :'disputes',
        :'effective_date' => :'effective_date',
        :'id' => :'id',
        :'idemkey' => :'idemkey',
        :'info_only' => :'info_only',
        :'lead_mode' => :'lead_mode',
        :'posted_date' => :'posted_date',
        :'reference_id' => :'reference_id',
        :'settlement_date' => :'settlement_date',
        :'status' => :'status',
        :'subtype' => :'subtype',
        :'tenant' => :'tenant',
        :'transaction_time' => :'transaction_time',
        :'type' => :'type',
        :'updated' => :'updated',
        :'uuid' => :'uuid'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'created' => :'Time',
        :'data' => :'PostedTransactionData',
        :'disputes' => :'Array<TransactionDispute>',
        :'effective_date' => :'Time',
        :'id' => :'Integer',
        :'idemkey' => :'String',
        :'info_only' => :'Boolean',
        :'lead_mode' => :'Boolean',
        :'posted_date' => :'Time',
        :'reference_id' => :'String',
        :'settlement_date' => :'Date',
        :'status' => :'String',
        :'subtype' => :'String',
        :'tenant' => :'String',
        :'transaction_time' => :'Time',
        :'type' => :'String',
        :'updated' => :'Time',
        :'uuid' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'reference_id',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Synctera::PostedTransaction` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Synctera::PostedTransaction`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      else
        self.created = nil
      end

      if attributes.key?(:'data')
        self.data = attributes[:'data']
      else
        self.data = nil
      end

      if attributes.key?(:'disputes')
        if (value = attributes[:'disputes']).is_a?(Array)
          self.disputes = value
        end
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      else
        self.effective_date = nil
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'idemkey')
        self.idemkey = attributes[:'idemkey']
      else
        self.idemkey = nil
      end

      if attributes.key?(:'info_only')
        self.info_only = attributes[:'info_only']
      else
        self.info_only = nil
      end

      if attributes.key?(:'lead_mode')
        self.lead_mode = attributes[:'lead_mode']
      else
        self.lead_mode = nil
      end

      if attributes.key?(:'posted_date')
        self.posted_date = attributes[:'posted_date']
      else
        self.posted_date = nil
      end

      if attributes.key?(:'reference_id')
        self.reference_id = attributes[:'reference_id']
      else
        self.reference_id = nil
      end

      if attributes.key?(:'settlement_date')
        self.settlement_date = attributes[:'settlement_date']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'subtype')
        self.subtype = attributes[:'subtype']
      else
        self.subtype = nil
      end

      if attributes.key?(:'tenant')
        self.tenant = attributes[:'tenant']
      else
        self.tenant = nil
      end

      if attributes.key?(:'transaction_time')
        self.transaction_time = attributes[:'transaction_time']
      else
        self.transaction_time = nil
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = nil
      end

      if attributes.key?(:'updated')
        self.updated = attributes[:'updated']
      else
        self.updated = nil
      end

      if attributes.key?(:'uuid')
        self.uuid = attributes[:'uuid']
      else
        self.uuid = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @created.nil?
        invalid_properties.push('invalid value for "created", created cannot be nil.')
      end

      if @data.nil?
        invalid_properties.push('invalid value for "data", data cannot be nil.')
      end

      if @effective_date.nil?
        invalid_properties.push('invalid value for "effective_date", effective_date cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @idemkey.nil?
        invalid_properties.push('invalid value for "idemkey", idemkey cannot be nil.')
      end

      if @info_only.nil?
        invalid_properties.push('invalid value for "info_only", info_only cannot be nil.')
      end

      if @lead_mode.nil?
        invalid_properties.push('invalid value for "lead_mode", lead_mode cannot be nil.')
      end

      if @posted_date.nil?
        invalid_properties.push('invalid value for "posted_date", posted_date cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @subtype.nil?
        invalid_properties.push('invalid value for "subtype", subtype cannot be nil.')
      end

      if @tenant.nil?
        invalid_properties.push('invalid value for "tenant", tenant cannot be nil.')
      end

      if @transaction_time.nil?
        invalid_properties.push('invalid value for "transaction_time", transaction_time cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @updated.nil?
        invalid_properties.push('invalid value for "updated", updated cannot be nil.')
      end

      if @uuid.nil?
        invalid_properties.push('invalid value for "uuid", uuid cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @created.nil?
      return false if @data.nil?
      return false if @effective_date.nil?
      return false if @id.nil?
      return false if @idemkey.nil?
      return false if @info_only.nil?
      return false if @lead_mode.nil?
      return false if @posted_date.nil?
      return false if @status.nil?
      return false if @subtype.nil?
      return false if @tenant.nil?
      return false if @transaction_time.nil?
      return false if @type.nil?
      return false if @updated.nil?
      return false if @uuid.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created == o.created &&
          data == o.data &&
          disputes == o.disputes &&
          effective_date == o.effective_date &&
          id == o.id &&
          idemkey == o.idemkey &&
          info_only == o.info_only &&
          lead_mode == o.lead_mode &&
          posted_date == o.posted_date &&
          reference_id == o.reference_id &&
          settlement_date == o.settlement_date &&
          status == o.status &&
          subtype == o.subtype &&
          tenant == o.tenant &&
          transaction_time == o.transaction_time &&
          type == o.type &&
          updated == o.updated &&
          uuid == o.uuid
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [created, data, disputes, effective_date, id, idemkey, info_only, lead_mode, posted_date, reference_id, settlement_date, status, subtype, tenant, transaction_time, type, updated, uuid].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Synctera.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
