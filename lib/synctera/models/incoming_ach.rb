=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.145.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module Synctera
  # Represents an incoming ACH entry.
  class IncomingAch
    # The unique identifier for a receiving account. If the entry is in suspense (status = \"IN_SUSPENSE\"), this represents the intended customer account, i.e. the account that 'account_no' from the ACH entry refers to (if it exists in the Synctera system). If the entry has been posted (status = \"POSTED\"), it is the account the transaction was actually posted to. In that case it does not necessarily correspond to the account number in 'account_no'. 
    attr_accessor :account_id

    # Receiving account number. This is the account number from the ACH entry, actual account the transaction gets posted to after processing may be different (e.g. suspense account).
    attr_accessor :account_no

    # Transfer amount in cents ($100 would be 10000)
    attr_accessor :amount

    # Company Entry Description field in ACH batch header.
    attr_accessor :company_entry_description

    # Company Name field in ACH batch header.
    attr_accessor :company_name

    # The type of transaction (debit or credit). An incoming debit pulls money out of the receiving account, a credit is a transfer in.
    attr_accessor :dc_sign

    # Free-form text describing the reason why this entry did not post to the intended account when first processed.
    attr_accessor :decline_reason

    # Effective date of the transaction
    attr_accessor :effective_date

    # Transaction ID in the ledger. The transaction may not exist yet in case the entry is a future-dated ACH.
    attr_accessor :external_id

    attr_accessor :iat_info

    attr_accessor :id

    # Value in this field varies depending on the SEC code. Can contain check serial number, identification number or a name of the originator.
    attr_accessor :identification_number

    # Was the effective date in the future when the entry was received?
    attr_accessor :is_future_dated

    attr_accessor :notification_of_change

    # The routing number of the DFI that originated the entry, with check digit included (9 digits in total).
    attr_accessor :originating_routing_number

    # ID of the linked outgoing ACH entry. This is filled only for incoming ACH entries that are returns and links to the original outgoing entry that is now being returned.
    attr_accessor :outgoing_ach_id

    # Contents of all attached records with addenda 05 (payment related information). Some SEC codes allow multiple instances of addenda 05.
    attr_accessor :reference_info

    attr_accessor :return_data

    # SEC (Standard Entry Class) code of the ACH entry
    attr_accessor :sec_code

    # Settlement date of the transaction
    attr_accessor :settlement_date

    # Processing status of the incoming entry
    attr_accessor :status

    # The id of the tenant containing the resource. This is relevant for Fintechs that have multiple workspaces. 
    attr_accessor :tenant

    # Trace number of the ACH entry
    attr_accessor :trace_no

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account_id' => :'account_id',
        :'account_no' => :'account_no',
        :'amount' => :'amount',
        :'company_entry_description' => :'company_entry_description',
        :'company_name' => :'company_name',
        :'dc_sign' => :'dc_sign',
        :'decline_reason' => :'decline_reason',
        :'effective_date' => :'effective_date',
        :'external_id' => :'external_id',
        :'iat_info' => :'iat_info',
        :'id' => :'id',
        :'identification_number' => :'identification_number',
        :'is_future_dated' => :'is_future_dated',
        :'notification_of_change' => :'notification_of_change',
        :'originating_routing_number' => :'originating_routing_number',
        :'outgoing_ach_id' => :'outgoing_ach_id',
        :'reference_info' => :'reference_info',
        :'return_data' => :'return_data',
        :'sec_code' => :'sec_code',
        :'settlement_date' => :'settlement_date',
        :'status' => :'status',
        :'tenant' => :'tenant',
        :'trace_no' => :'trace_no'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'account_id' => :'String',
        :'account_no' => :'String',
        :'amount' => :'Integer',
        :'company_entry_description' => :'String',
        :'company_name' => :'String',
        :'dc_sign' => :'String',
        :'decline_reason' => :'String',
        :'effective_date' => :'Date',
        :'external_id' => :'String',
        :'iat_info' => :'IatData',
        :'id' => :'String',
        :'identification_number' => :'String',
        :'is_future_dated' => :'Boolean',
        :'notification_of_change' => :'NocData',
        :'originating_routing_number' => :'String',
        :'outgoing_ach_id' => :'String',
        :'reference_info' => :'Array<String>',
        :'return_data' => :'ReturnData',
        :'sec_code' => :'String',
        :'settlement_date' => :'Date',
        :'status' => :'String',
        :'tenant' => :'String',
        :'trace_no' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Synctera::IncomingAch` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Synctera::IncomingAch`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'account_id')
        self.account_id = attributes[:'account_id']
      end

      if attributes.key?(:'account_no')
        self.account_no = attributes[:'account_no']
      else
        self.account_no = nil
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      else
        self.amount = nil
      end

      if attributes.key?(:'company_entry_description')
        self.company_entry_description = attributes[:'company_entry_description']
      else
        self.company_entry_description = nil
      end

      if attributes.key?(:'company_name')
        self.company_name = attributes[:'company_name']
      else
        self.company_name = nil
      end

      if attributes.key?(:'dc_sign')
        self.dc_sign = attributes[:'dc_sign']
      else
        self.dc_sign = nil
      end

      if attributes.key?(:'decline_reason')
        self.decline_reason = attributes[:'decline_reason']
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      else
        self.effective_date = nil
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.key?(:'iat_info')
        self.iat_info = attributes[:'iat_info']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'identification_number')
        self.identification_number = attributes[:'identification_number']
      else
        self.identification_number = nil
      end

      if attributes.key?(:'is_future_dated')
        self.is_future_dated = attributes[:'is_future_dated']
      else
        self.is_future_dated = nil
      end

      if attributes.key?(:'notification_of_change')
        self.notification_of_change = attributes[:'notification_of_change']
      end

      if attributes.key?(:'originating_routing_number')
        self.originating_routing_number = attributes[:'originating_routing_number']
      else
        self.originating_routing_number = nil
      end

      if attributes.key?(:'outgoing_ach_id')
        self.outgoing_ach_id = attributes[:'outgoing_ach_id']
      end

      if attributes.key?(:'reference_info')
        if (value = attributes[:'reference_info']).is_a?(Array)
          self.reference_info = value
        end
      end

      if attributes.key?(:'return_data')
        self.return_data = attributes[:'return_data']
      end

      if attributes.key?(:'sec_code')
        self.sec_code = attributes[:'sec_code']
      else
        self.sec_code = nil
      end

      if attributes.key?(:'settlement_date')
        self.settlement_date = attributes[:'settlement_date']
      else
        self.settlement_date = nil
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'tenant')
        self.tenant = attributes[:'tenant']
      else
        self.tenant = nil
      end

      if attributes.key?(:'trace_no')
        self.trace_no = attributes[:'trace_no']
      else
        self.trace_no = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @account_no.nil?
        invalid_properties.push('invalid value for "account_no", account_no cannot be nil.')
      end

      if @amount.nil?
        invalid_properties.push('invalid value for "amount", amount cannot be nil.')
      end

      if @company_entry_description.nil?
        invalid_properties.push('invalid value for "company_entry_description", company_entry_description cannot be nil.')
      end

      if @company_name.nil?
        invalid_properties.push('invalid value for "company_name", company_name cannot be nil.')
      end

      if @dc_sign.nil?
        invalid_properties.push('invalid value for "dc_sign", dc_sign cannot be nil.')
      end

      if @effective_date.nil?
        invalid_properties.push('invalid value for "effective_date", effective_date cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @identification_number.nil?
        invalid_properties.push('invalid value for "identification_number", identification_number cannot be nil.')
      end

      if @is_future_dated.nil?
        invalid_properties.push('invalid value for "is_future_dated", is_future_dated cannot be nil.')
      end

      if @originating_routing_number.nil?
        invalid_properties.push('invalid value for "originating_routing_number", originating_routing_number cannot be nil.')
      end

      if @sec_code.nil?
        invalid_properties.push('invalid value for "sec_code", sec_code cannot be nil.')
      end

      if @settlement_date.nil?
        invalid_properties.push('invalid value for "settlement_date", settlement_date cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @tenant.nil?
        invalid_properties.push('invalid value for "tenant", tenant cannot be nil.')
      end

      if @trace_no.nil?
        invalid_properties.push('invalid value for "trace_no", trace_no cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @account_no.nil?
      return false if @amount.nil?
      return false if @company_entry_description.nil?
      return false if @company_name.nil?
      return false if @dc_sign.nil?
      dc_sign_validator = EnumAttributeValidator.new('String', ["credit", "debit"])
      return false unless dc_sign_validator.valid?(@dc_sign)
      return false if @effective_date.nil?
      return false if @id.nil?
      return false if @identification_number.nil?
      return false if @is_future_dated.nil?
      return false if @originating_routing_number.nil?
      return false if @sec_code.nil?
      return false if @settlement_date.nil?
      return false if @status.nil?
      status_validator = EnumAttributeValidator.new('String', ["ERROR", "IGNORED", "INIT", "IN_SUSPENSE", "POSTED", "RETURNED"])
      return false unless status_validator.valid?(@status)
      return false if @tenant.nil?
      return false if @trace_no.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dc_sign Object to be assigned
    def dc_sign=(dc_sign)
      validator = EnumAttributeValidator.new('String', ["credit", "debit"])
      unless validator.valid?(dc_sign)
        warn "invalid value for \"dc_sign\", must be one of #{validator.allowable_values}."
      end
      @dc_sign = dc_sign
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["ERROR", "IGNORED", "INIT", "IN_SUSPENSE", "POSTED", "RETURNED"])
      unless validator.valid?(status)
        warn "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_id == o.account_id &&
          account_no == o.account_no &&
          amount == o.amount &&
          company_entry_description == o.company_entry_description &&
          company_name == o.company_name &&
          dc_sign == o.dc_sign &&
          decline_reason == o.decline_reason &&
          effective_date == o.effective_date &&
          external_id == o.external_id &&
          iat_info == o.iat_info &&
          id == o.id &&
          identification_number == o.identification_number &&
          is_future_dated == o.is_future_dated &&
          notification_of_change == o.notification_of_change &&
          originating_routing_number == o.originating_routing_number &&
          outgoing_ach_id == o.outgoing_ach_id &&
          reference_info == o.reference_info &&
          return_data == o.return_data &&
          sec_code == o.sec_code &&
          settlement_date == o.settlement_date &&
          status == o.status &&
          tenant == o.tenant &&
          trace_no == o.trace_no
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [account_id, account_no, amount, company_entry_description, company_name, dc_sign, decline_reason, effective_date, external_id, iat_info, id, identification_number, is_future_dated, notification_of_change, originating_routing_number, outgoing_ach_id, reference_info, return_data, sec_code, settlement_date, status, tenant, trace_no].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Synctera.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
