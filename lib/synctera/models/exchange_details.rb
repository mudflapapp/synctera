=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 1.82.0

Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'date'
require 'time'

module Synctera
  class ExchangeDetails
    # The fees associated with the exchange. 
    attr_accessor :fees

    # The exchange rate from source to target currency. For example: 1.30445 
    attr_accessor :rate

    # The amount in the source currency's minor unit. For example, 10000 would be $100 for USD. This is the amount inclusive of fees. 
    attr_accessor :source_amount

    # The ISO 4217 currency code
    attr_accessor :source_currency

    # The amount in the target currency's minor unit. For example, 13045 would be Â£130.45 for GBP. This is the amount inclusive of fees. 
    attr_accessor :target_amount

    # The ISO 4217 currency code
    attr_accessor :target_currency

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'fees' => :'fees',
        :'rate' => :'rate',
        :'source_amount' => :'source_amount',
        :'source_currency' => :'source_currency',
        :'target_amount' => :'target_amount',
        :'target_currency' => :'target_currency'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'fees' => :'Array<ExchangeFeeDetails>',
        :'rate' => :'String',
        :'source_amount' => :'Integer',
        :'source_currency' => :'String',
        :'target_amount' => :'Integer',
        :'target_currency' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Synctera::ExchangeDetails` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Synctera::ExchangeDetails`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'fees')
        if (value = attributes[:'fees']).is_a?(Array)
          self.fees = value
        end
      end

      if attributes.key?(:'rate')
        self.rate = attributes[:'rate']
      else
        self.rate = nil
      end

      if attributes.key?(:'source_amount')
        self.source_amount = attributes[:'source_amount']
      else
        self.source_amount = nil
      end

      if attributes.key?(:'source_currency')
        self.source_currency = attributes[:'source_currency']
      else
        self.source_currency = nil
      end

      if attributes.key?(:'target_amount')
        self.target_amount = attributes[:'target_amount']
      else
        self.target_amount = nil
      end

      if attributes.key?(:'target_currency')
        self.target_currency = attributes[:'target_currency']
      else
        self.target_currency = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @rate.nil?
        invalid_properties.push('invalid value for "rate", rate cannot be nil.')
      end

      if @source_amount.nil?
        invalid_properties.push('invalid value for "source_amount", source_amount cannot be nil.')
      end

      if @source_amount < 1
        invalid_properties.push('invalid value for "source_amount", must be greater than or equal to 1.')
      end

      if @source_currency.nil?
        invalid_properties.push('invalid value for "source_currency", source_currency cannot be nil.')
      end

      if @target_amount.nil?
        invalid_properties.push('invalid value for "target_amount", target_amount cannot be nil.')
      end

      if @target_amount < 1
        invalid_properties.push('invalid value for "target_amount", must be greater than or equal to 1.')
      end

      if @target_currency.nil?
        invalid_properties.push('invalid value for "target_currency", target_currency cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @rate.nil?
      return false if @source_amount.nil?
      return false if @source_amount < 1
      return false if @source_currency.nil?
      return false if @target_amount.nil?
      return false if @target_amount < 1
      return false if @target_currency.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] source_amount Value to be assigned
    def source_amount=(source_amount)
      if source_amount.nil?
        fail ArgumentError, 'source_amount cannot be nil'
      end

      if source_amount < 1
        fail ArgumentError, 'invalid value for "source_amount", must be greater than or equal to 1.'
      end

      @source_amount = source_amount
    end

    # Custom attribute writer method with validation
    # @param [Object] target_amount Value to be assigned
    def target_amount=(target_amount)
      if target_amount.nil?
        fail ArgumentError, 'target_amount cannot be nil'
      end

      if target_amount < 1
        fail ArgumentError, 'invalid value for "target_amount", must be greater than or equal to 1.'
      end

      @target_amount = target_amount
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          fees == o.fees &&
          rate == o.rate &&
          source_amount == o.source_amount &&
          source_currency == o.source_currency &&
          target_amount == o.target_amount &&
          target_currency == o.target_currency
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [fees, rate, source_amount, source_currency, target_amount, target_currency].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Synctera.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
