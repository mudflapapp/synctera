=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.108.0

Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'date'
require 'time'

module Synctera
  class InternationalWireResponse
    # Transfer amount in cents ($100 would be 10000) in the currency of the beneficiary.
    attr_accessor :amount_in_beneficiary_currency

    # The currency of the beneficiary's account in ISO4217 format.
    attr_accessor :beneficiary_currency

    # The ID of the associated case.
    attr_accessor :case_id

    attr_accessor :creation_time

    # The customer UUID representing the person initiating the Wire transfer.
    attr_accessor :customer_id

    # If the wire is declined after being successfully submitted, this field will contain a message explaining the reason for the decline.
    attr_accessor :decline_reason

    # The effective date of the transaction once it gets posted.
    attr_accessor :effective_date

    # The exchange rate used for the wire transfer.
    attr_accessor :fx_exchange_rate

    # The ID of the international wire transfer.
    attr_accessor :id

    attr_accessor :last_updated_time

    # The maximum amount the sender is willing to pay for the wire transfer in case FX fluctuates, required if the quote type is 'estimate'.
    attr_accessor :max_accepted_sender_cost

    # Additional transfer metadata structured as key-value pairs.
    attr_accessor :metadata

    # The network reference ID of the wire transfer.
    attr_accessor :network_reference_id

    # The account uuid representing the sender of the wire.
    attr_accessor :originating_account_id

    # The quote id returned from the /international_wire/quote endpoint, contains FX rate information. Required if the international wire is cross currency.
    attr_accessor :quote_id

    # The external account uuid representing the recipient of the wire. Needs to be configured with international bank routing details (e.g. SWIFT code, refer to external accounts documentation).
    attr_accessor :receiving_account_id

    # Debit amount to the wire sender, in cents ($100 would be 10000).
    attr_accessor :sender_amount

    # The currency of the sender's account in ISO4217 format.
    attr_accessor :sender_currency

    attr_accessor :status

    # ID of the resulting transaction resource.
    attr_accessor :transaction_id

    # Optional transaction instructions for the recipient bank if required by the recipient bank.
    attr_accessor :wire_instruction

    # Reason for the wire transfer.
    attr_accessor :wire_purpose

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'amount_in_beneficiary_currency' => :'amount_in_beneficiary_currency',
        :'beneficiary_currency' => :'beneficiary_currency',
        :'case_id' => :'case_id',
        :'creation_time' => :'creation_time',
        :'customer_id' => :'customer_id',
        :'decline_reason' => :'decline_reason',
        :'effective_date' => :'effective_date',
        :'fx_exchange_rate' => :'fx_exchange_rate',
        :'id' => :'id',
        :'last_updated_time' => :'last_updated_time',
        :'max_accepted_sender_cost' => :'max_accepted_sender_cost',
        :'metadata' => :'metadata',
        :'network_reference_id' => :'network_reference_id',
        :'originating_account_id' => :'originating_account_id',
        :'quote_id' => :'quote_id',
        :'receiving_account_id' => :'receiving_account_id',
        :'sender_amount' => :'sender_amount',
        :'sender_currency' => :'sender_currency',
        :'status' => :'status',
        :'transaction_id' => :'transaction_id',
        :'wire_instruction' => :'wire_instruction',
        :'wire_purpose' => :'wire_purpose'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'amount_in_beneficiary_currency' => :'Integer',
        :'beneficiary_currency' => :'String',
        :'case_id' => :'Integer',
        :'creation_time' => :'Time',
        :'customer_id' => :'String',
        :'decline_reason' => :'String',
        :'effective_date' => :'Date',
        :'fx_exchange_rate' => :'Float',
        :'id' => :'String',
        :'last_updated_time' => :'Time',
        :'max_accepted_sender_cost' => :'Integer',
        :'metadata' => :'Object',
        :'network_reference_id' => :'String',
        :'originating_account_id' => :'String',
        :'quote_id' => :'String',
        :'receiving_account_id' => :'String',
        :'sender_amount' => :'Integer',
        :'sender_currency' => :'String',
        :'status' => :'InternationalWireStatus',
        :'transaction_id' => :'String',
        :'wire_instruction' => :'String',
        :'wire_purpose' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Synctera::InternationalWireResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Synctera::InternationalWireResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'amount_in_beneficiary_currency')
        self.amount_in_beneficiary_currency = attributes[:'amount_in_beneficiary_currency']
      else
        self.amount_in_beneficiary_currency = nil
      end

      if attributes.key?(:'beneficiary_currency')
        self.beneficiary_currency = attributes[:'beneficiary_currency']
      else
        self.beneficiary_currency = nil
      end

      if attributes.key?(:'case_id')
        self.case_id = attributes[:'case_id']
      end

      if attributes.key?(:'creation_time')
        self.creation_time = attributes[:'creation_time']
      else
        self.creation_time = nil
      end

      if attributes.key?(:'customer_id')
        self.customer_id = attributes[:'customer_id']
      else
        self.customer_id = nil
      end

      if attributes.key?(:'decline_reason')
        self.decline_reason = attributes[:'decline_reason']
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      end

      if attributes.key?(:'fx_exchange_rate')
        self.fx_exchange_rate = attributes[:'fx_exchange_rate']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'last_updated_time')
        self.last_updated_time = attributes[:'last_updated_time']
      else
        self.last_updated_time = nil
      end

      if attributes.key?(:'max_accepted_sender_cost')
        self.max_accepted_sender_cost = attributes[:'max_accepted_sender_cost']
      end

      if attributes.key?(:'metadata')
        self.metadata = attributes[:'metadata']
      end

      if attributes.key?(:'network_reference_id')
        self.network_reference_id = attributes[:'network_reference_id']
      end

      if attributes.key?(:'originating_account_id')
        self.originating_account_id = attributes[:'originating_account_id']
      else
        self.originating_account_id = nil
      end

      if attributes.key?(:'quote_id')
        self.quote_id = attributes[:'quote_id']
      end

      if attributes.key?(:'receiving_account_id')
        self.receiving_account_id = attributes[:'receiving_account_id']
      else
        self.receiving_account_id = nil
      end

      if attributes.key?(:'sender_amount')
        self.sender_amount = attributes[:'sender_amount']
      else
        self.sender_amount = nil
      end

      if attributes.key?(:'sender_currency')
        self.sender_currency = attributes[:'sender_currency']
      else
        self.sender_currency = nil
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'transaction_id')
        self.transaction_id = attributes[:'transaction_id']
      end

      if attributes.key?(:'wire_instruction')
        self.wire_instruction = attributes[:'wire_instruction']
      end

      if attributes.key?(:'wire_purpose')
        self.wire_purpose = attributes[:'wire_purpose']
      else
        self.wire_purpose = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @amount_in_beneficiary_currency.nil?
        invalid_properties.push('invalid value for "amount_in_beneficiary_currency", amount_in_beneficiary_currency cannot be nil.')
      end

      if @beneficiary_currency.nil?
        invalid_properties.push('invalid value for "beneficiary_currency", beneficiary_currency cannot be nil.')
      end

      if @creation_time.nil?
        invalid_properties.push('invalid value for "creation_time", creation_time cannot be nil.')
      end

      if @customer_id.nil?
        invalid_properties.push('invalid value for "customer_id", customer_id cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @last_updated_time.nil?
        invalid_properties.push('invalid value for "last_updated_time", last_updated_time cannot be nil.')
      end

      if @originating_account_id.nil?
        invalid_properties.push('invalid value for "originating_account_id", originating_account_id cannot be nil.')
      end

      if @receiving_account_id.nil?
        invalid_properties.push('invalid value for "receiving_account_id", receiving_account_id cannot be nil.')
      end

      if @sender_amount.nil?
        invalid_properties.push('invalid value for "sender_amount", sender_amount cannot be nil.')
      end

      if @sender_currency.nil?
        invalid_properties.push('invalid value for "sender_currency", sender_currency cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if !@wire_instruction.nil? && @wire_instruction.to_s.length > 210
        invalid_properties.push('invalid value for "wire_instruction", the character length must be smaller than or equal to 210.')
      end

      if @wire_purpose.nil?
        invalid_properties.push('invalid value for "wire_purpose", wire_purpose cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @amount_in_beneficiary_currency.nil?
      return false if @beneficiary_currency.nil?
      return false if @creation_time.nil?
      return false if @customer_id.nil?
      return false if @id.nil?
      return false if @last_updated_time.nil?
      return false if @originating_account_id.nil?
      return false if @receiving_account_id.nil?
      return false if @sender_amount.nil?
      return false if @sender_currency.nil?
      return false if @status.nil?
      return false if !@wire_instruction.nil? && @wire_instruction.to_s.length > 210
      return false if @wire_purpose.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] wire_instruction Value to be assigned
    def wire_instruction=(wire_instruction)
      if wire_instruction.nil?
        fail ArgumentError, 'wire_instruction cannot be nil'
      end

      if wire_instruction.to_s.length > 210
        fail ArgumentError, 'invalid value for "wire_instruction", the character length must be smaller than or equal to 210.'
      end

      @wire_instruction = wire_instruction
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          amount_in_beneficiary_currency == o.amount_in_beneficiary_currency &&
          beneficiary_currency == o.beneficiary_currency &&
          case_id == o.case_id &&
          creation_time == o.creation_time &&
          customer_id == o.customer_id &&
          decline_reason == o.decline_reason &&
          effective_date == o.effective_date &&
          fx_exchange_rate == o.fx_exchange_rate &&
          id == o.id &&
          last_updated_time == o.last_updated_time &&
          max_accepted_sender_cost == o.max_accepted_sender_cost &&
          metadata == o.metadata &&
          network_reference_id == o.network_reference_id &&
          originating_account_id == o.originating_account_id &&
          quote_id == o.quote_id &&
          receiving_account_id == o.receiving_account_id &&
          sender_amount == o.sender_amount &&
          sender_currency == o.sender_currency &&
          status == o.status &&
          transaction_id == o.transaction_id &&
          wire_instruction == o.wire_instruction &&
          wire_purpose == o.wire_purpose
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [amount_in_beneficiary_currency, beneficiary_currency, case_id, creation_time, customer_id, decline_reason, effective_date, fx_exchange_rate, id, last_updated_time, max_accepted_sender_cost, metadata, network_reference_id, originating_account_id, quote_id, receiving_account_id, sender_amount, sender_currency, status, transaction_id, wire_instruction, wire_purpose].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Synctera.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
