=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.111.0

Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'date'
require 'time'

module Synctera
  # Verify card passed AVS and CVV checks and if it able to perform PUSH/PULL transfers.
  class ExternalCardVerifications
    # Address verification results  Status | Description --- | --- VERIFIED | AVS verified NOT_VERIFIED | AVS not verified ADDRESS_MISMATCH | ZIP code match, address no match ZIP_MISMATCH | Address match, ZIP code no match ADDRESS_AND_ZIP_MISMATCH | Address and ZIP code no match 
    attr_accessor :address_verification_result

    # Card Verification Value results  Status | Description --- | --- VERIFIED | CVV and expiration date verified NOT_VERIFIED | CVV and expiration date not verified CVV_MISMATCH | Either CVV or expiration date does not match NOT_SUPPORTED | Issuer does not participate in CVV2 service 
    attr_accessor :cvv2_result

    # Issuer cardholder name verification result with Account Name Inquiry (ANI) service The result of verifying the cardholder name against the name on file at the issuing institution. If this fails, it means the issuing institution has a different person's name on file as the cardholder.  Status | Description --- | --- VERIFIED | ANI Name verified NOT_VERIFIED | ANI Name not verified NOT_SUPPORTED | Issuer does not participate in ANI service NAME_MISMATCH | ANI Name does not match 
    attr_accessor :name_verification_result

    # Indicates if the card is able to perform PULL transfers.
    attr_accessor :pull_enabled

    # Indicates if the card is able to perform PUSH transfers.
    attr_accessor :push_enabled

    attr_accessor :state

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'address_verification_result' => :'address_verification_result',
        :'cvv2_result' => :'cvv2_result',
        :'name_verification_result' => :'name_verification_result',
        :'pull_enabled' => :'pull_enabled',
        :'push_enabled' => :'push_enabled',
        :'state' => :'state'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'address_verification_result' => :'String',
        :'cvv2_result' => :'String',
        :'name_verification_result' => :'String',
        :'pull_enabled' => :'Boolean',
        :'push_enabled' => :'Boolean',
        :'state' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Synctera::ExternalCardVerifications` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Synctera::ExternalCardVerifications`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'address_verification_result')
        self.address_verification_result = attributes[:'address_verification_result']
      else
        self.address_verification_result = nil
      end

      if attributes.key?(:'cvv2_result')
        self.cvv2_result = attributes[:'cvv2_result']
      else
        self.cvv2_result = nil
      end

      if attributes.key?(:'name_verification_result')
        self.name_verification_result = attributes[:'name_verification_result']
      else
        self.name_verification_result = nil
      end

      if attributes.key?(:'pull_enabled')
        self.pull_enabled = attributes[:'pull_enabled']
      else
        self.pull_enabled = nil
      end

      if attributes.key?(:'push_enabled')
        self.push_enabled = attributes[:'push_enabled']
      else
        self.push_enabled = nil
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      else
        self.state = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @address_verification_result.nil?
        invalid_properties.push('invalid value for "address_verification_result", address_verification_result cannot be nil.')
      end

      if @cvv2_result.nil?
        invalid_properties.push('invalid value for "cvv2_result", cvv2_result cannot be nil.')
      end

      if @name_verification_result.nil?
        invalid_properties.push('invalid value for "name_verification_result", name_verification_result cannot be nil.')
      end

      if @pull_enabled.nil?
        invalid_properties.push('invalid value for "pull_enabled", pull_enabled cannot be nil.')
      end

      if @push_enabled.nil?
        invalid_properties.push('invalid value for "push_enabled", push_enabled cannot be nil.')
      end

      if @state.nil?
        invalid_properties.push('invalid value for "state", state cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @address_verification_result.nil?
      address_verification_result_validator = EnumAttributeValidator.new('String', ["ADDRESS_AND_ZIP_MISMATCH", "ADDRESS_MISMATCH", "NOT_VERIFIED", "VERIFIED", "ZIP_MISMATCH"])
      return false unless address_verification_result_validator.valid?(@address_verification_result)
      return false if @cvv2_result.nil?
      cvv2_result_validator = EnumAttributeValidator.new('String', ["CVV_MISMATCH", "NOT_SUPPORTED", "NOT_VERIFIED", "VERIFIED"])
      return false unless cvv2_result_validator.valid?(@cvv2_result)
      return false if @name_verification_result.nil?
      name_verification_result_validator = EnumAttributeValidator.new('String', ["NAME_MISMATCH", "NOT_SUPPORTED", "NOT_VERIFIED", "VERIFIED"])
      return false unless name_verification_result_validator.valid?(@name_verification_result)
      return false if @pull_enabled.nil?
      return false if @push_enabled.nil?
      return false if @state.nil?
      state_validator = EnumAttributeValidator.new('String', ["FAILED", "SUCCEEDED"])
      return false unless state_validator.valid?(@state)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address_verification_result Object to be assigned
    def address_verification_result=(address_verification_result)
      validator = EnumAttributeValidator.new('String', ["ADDRESS_AND_ZIP_MISMATCH", "ADDRESS_MISMATCH", "NOT_VERIFIED", "VERIFIED", "ZIP_MISMATCH"])
      unless validator.valid?(address_verification_result)
        fail ArgumentError, "invalid value for \"address_verification_result\", must be one of #{validator.allowable_values}."
      end
      @address_verification_result = address_verification_result
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cvv2_result Object to be assigned
    def cvv2_result=(cvv2_result)
      validator = EnumAttributeValidator.new('String', ["CVV_MISMATCH", "NOT_SUPPORTED", "NOT_VERIFIED", "VERIFIED"])
      unless validator.valid?(cvv2_result)
        fail ArgumentError, "invalid value for \"cvv2_result\", must be one of #{validator.allowable_values}."
      end
      @cvv2_result = cvv2_result
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name_verification_result Object to be assigned
    def name_verification_result=(name_verification_result)
      validator = EnumAttributeValidator.new('String', ["NAME_MISMATCH", "NOT_SUPPORTED", "NOT_VERIFIED", "VERIFIED"])
      unless validator.valid?(name_verification_result)
        fail ArgumentError, "invalid value for \"name_verification_result\", must be one of #{validator.allowable_values}."
      end
      @name_verification_result = name_verification_result
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ["FAILED", "SUCCEEDED"])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for \"state\", must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          address_verification_result == o.address_verification_result &&
          cvv2_result == o.cvv2_result &&
          name_verification_result == o.name_verification_result &&
          pull_enabled == o.pull_enabled &&
          push_enabled == o.push_enabled &&
          state == o.state
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [address_verification_result, cvv2_result, name_verification_result, pull_enabled, push_enabled, state].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Synctera.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
