=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.147.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module Synctera
  class Fleets
    attr_accessor :driver_id

    attr_accessor :expanded_fuel_type

    attr_accessor :fleet_number

    attr_accessor :fuel_gross_amount

    attr_accessor :fuel_net_amount

    attr_accessor :fuel_product_qualifier

    attr_accessor :fuel_purchase_type

    attr_accessor :fuel_quantity

    attr_accessor :fuel_service_type

    attr_accessor :fuel_tax_amount

    attr_accessor :fuel_tax_exemption_status

    attr_accessor :fuel_type

    attr_accessor :fuel_unit_of_measure

    attr_accessor :fuel_unit_price

    attr_accessor :job_number

    attr_accessor :non_fuel_gross_amount

    attr_accessor :non_fuel_item_details

    attr_accessor :non_fuel_net_amount

    attr_accessor :non_fuel_tax_amount

    attr_accessor :non_fuel_tax_exemption_status

    attr_accessor :odometer_reading

    attr_accessor :sales_tax_amount

    attr_accessor :service_type

    attr_accessor :type_of_purchase

    attr_accessor :vat_tax_rate

    attr_accessor :vehicle_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'driver_id' => :'driver_id',
        :'expanded_fuel_type' => :'expanded_fuel_type',
        :'fleet_number' => :'fleet_number',
        :'fuel_gross_amount' => :'fuel_gross_amount',
        :'fuel_net_amount' => :'fuel_net_amount',
        :'fuel_product_qualifier' => :'fuel_product_qualifier',
        :'fuel_purchase_type' => :'fuel_purchase_type',
        :'fuel_quantity' => :'fuel_quantity',
        :'fuel_service_type' => :'fuel_service_type',
        :'fuel_tax_amount' => :'fuel_tax_amount',
        :'fuel_tax_exemption_status' => :'fuel_tax_exemption_status',
        :'fuel_type' => :'fuel_type',
        :'fuel_unit_of_measure' => :'fuel_unit_of_measure',
        :'fuel_unit_price' => :'fuel_unit_price',
        :'job_number' => :'job_number',
        :'non_fuel_gross_amount' => :'non_fuel_gross_amount',
        :'non_fuel_item_details' => :'non_fuel_item_details',
        :'non_fuel_net_amount' => :'non_fuel_net_amount',
        :'non_fuel_tax_amount' => :'non_fuel_tax_amount',
        :'non_fuel_tax_exemption_status' => :'non_fuel_tax_exemption_status',
        :'odometer_reading' => :'odometer_reading',
        :'sales_tax_amount' => :'sales_tax_amount',
        :'service_type' => :'service_type',
        :'type_of_purchase' => :'type_of_purchase',
        :'vat_tax_rate' => :'vat_tax_rate',
        :'vehicle_id' => :'vehicle_id'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'driver_id' => :'String',
        :'expanded_fuel_type' => :'String',
        :'fleet_number' => :'String',
        :'fuel_gross_amount' => :'Integer',
        :'fuel_net_amount' => :'Integer',
        :'fuel_product_qualifier' => :'String',
        :'fuel_purchase_type' => :'String',
        :'fuel_quantity' => :'Float',
        :'fuel_service_type' => :'String',
        :'fuel_tax_amount' => :'Integer',
        :'fuel_tax_exemption_status' => :'String',
        :'fuel_type' => :'String',
        :'fuel_unit_of_measure' => :'String',
        :'fuel_unit_price' => :'Float',
        :'job_number' => :'String',
        :'non_fuel_gross_amount' => :'Integer',
        :'non_fuel_item_details' => :'Array<NonFuelItemDetails>',
        :'non_fuel_net_amount' => :'Integer',
        :'non_fuel_tax_amount' => :'Integer',
        :'non_fuel_tax_exemption_status' => :'String',
        :'odometer_reading' => :'String',
        :'sales_tax_amount' => :'Integer',
        :'service_type' => :'String',
        :'type_of_purchase' => :'String',
        :'vat_tax_rate' => :'Float',
        :'vehicle_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Synctera::Fleets` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Synctera::Fleets`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'driver_id')
        self.driver_id = attributes[:'driver_id']
      end

      if attributes.key?(:'expanded_fuel_type')
        self.expanded_fuel_type = attributes[:'expanded_fuel_type']
      end

      if attributes.key?(:'fleet_number')
        self.fleet_number = attributes[:'fleet_number']
      end

      if attributes.key?(:'fuel_gross_amount')
        self.fuel_gross_amount = attributes[:'fuel_gross_amount']
      end

      if attributes.key?(:'fuel_net_amount')
        self.fuel_net_amount = attributes[:'fuel_net_amount']
      end

      if attributes.key?(:'fuel_product_qualifier')
        self.fuel_product_qualifier = attributes[:'fuel_product_qualifier']
      end

      if attributes.key?(:'fuel_purchase_type')
        self.fuel_purchase_type = attributes[:'fuel_purchase_type']
      end

      if attributes.key?(:'fuel_quantity')
        self.fuel_quantity = attributes[:'fuel_quantity']
      end

      if attributes.key?(:'fuel_service_type')
        self.fuel_service_type = attributes[:'fuel_service_type']
      end

      if attributes.key?(:'fuel_tax_amount')
        self.fuel_tax_amount = attributes[:'fuel_tax_amount']
      end

      if attributes.key?(:'fuel_tax_exemption_status')
        self.fuel_tax_exemption_status = attributes[:'fuel_tax_exemption_status']
      end

      if attributes.key?(:'fuel_type')
        self.fuel_type = attributes[:'fuel_type']
      end

      if attributes.key?(:'fuel_unit_of_measure')
        self.fuel_unit_of_measure = attributes[:'fuel_unit_of_measure']
      end

      if attributes.key?(:'fuel_unit_price')
        self.fuel_unit_price = attributes[:'fuel_unit_price']
      end

      if attributes.key?(:'job_number')
        self.job_number = attributes[:'job_number']
      end

      if attributes.key?(:'non_fuel_gross_amount')
        self.non_fuel_gross_amount = attributes[:'non_fuel_gross_amount']
      end

      if attributes.key?(:'non_fuel_item_details')
        if (value = attributes[:'non_fuel_item_details']).is_a?(Array)
          self.non_fuel_item_details = value
        end
      end

      if attributes.key?(:'non_fuel_net_amount')
        self.non_fuel_net_amount = attributes[:'non_fuel_net_amount']
      end

      if attributes.key?(:'non_fuel_tax_amount')
        self.non_fuel_tax_amount = attributes[:'non_fuel_tax_amount']
      end

      if attributes.key?(:'non_fuel_tax_exemption_status')
        self.non_fuel_tax_exemption_status = attributes[:'non_fuel_tax_exemption_status']
      end

      if attributes.key?(:'odometer_reading')
        self.odometer_reading = attributes[:'odometer_reading']
      end

      if attributes.key?(:'sales_tax_amount')
        self.sales_tax_amount = attributes[:'sales_tax_amount']
      end

      if attributes.key?(:'service_type')
        self.service_type = attributes[:'service_type']
      end

      if attributes.key?(:'type_of_purchase')
        self.type_of_purchase = attributes[:'type_of_purchase']
      end

      if attributes.key?(:'vat_tax_rate')
        self.vat_tax_rate = attributes[:'vat_tax_rate']
      end

      if attributes.key?(:'vehicle_id')
        self.vehicle_id = attributes[:'vehicle_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          driver_id == o.driver_id &&
          expanded_fuel_type == o.expanded_fuel_type &&
          fleet_number == o.fleet_number &&
          fuel_gross_amount == o.fuel_gross_amount &&
          fuel_net_amount == o.fuel_net_amount &&
          fuel_product_qualifier == o.fuel_product_qualifier &&
          fuel_purchase_type == o.fuel_purchase_type &&
          fuel_quantity == o.fuel_quantity &&
          fuel_service_type == o.fuel_service_type &&
          fuel_tax_amount == o.fuel_tax_amount &&
          fuel_tax_exemption_status == o.fuel_tax_exemption_status &&
          fuel_type == o.fuel_type &&
          fuel_unit_of_measure == o.fuel_unit_of_measure &&
          fuel_unit_price == o.fuel_unit_price &&
          job_number == o.job_number &&
          non_fuel_gross_amount == o.non_fuel_gross_amount &&
          non_fuel_item_details == o.non_fuel_item_details &&
          non_fuel_net_amount == o.non_fuel_net_amount &&
          non_fuel_tax_amount == o.non_fuel_tax_amount &&
          non_fuel_tax_exemption_status == o.non_fuel_tax_exemption_status &&
          odometer_reading == o.odometer_reading &&
          sales_tax_amount == o.sales_tax_amount &&
          service_type == o.service_type &&
          type_of_purchase == o.type_of_purchase &&
          vat_tax_rate == o.vat_tax_rate &&
          vehicle_id == o.vehicle_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [driver_id, expanded_fuel_type, fleet_number, fuel_gross_amount, fuel_net_amount, fuel_product_qualifier, fuel_purchase_type, fuel_quantity, fuel_service_type, fuel_tax_amount, fuel_tax_exemption_status, fuel_type, fuel_unit_of_measure, fuel_unit_price, job_number, non_fuel_gross_amount, non_fuel_item_details, non_fuel_net_amount, non_fuel_tax_amount, non_fuel_tax_exemption_status, odometer_reading, sales_tax_amount, service_type, type_of_purchase, vat_tax_rate, vehicle_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Synctera.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
