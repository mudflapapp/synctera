=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 1.82.0

Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'cgi'

module Synctera
  class TransactionsBetaApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a transaction by ID
    # > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Get a transaction by its uuid 
    # @param id [String] Transaction ID
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :show_partial_clearings Include a transaction for each clearing of an authorization.
    # @return [Transaction1]
    def get_transaction_by_id(id, opts = {})
      data, _status_code, _headers = get_transaction_by_id_with_http_info(id, opts)
      data
    end

    # Get a transaction by ID
    # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Get a transaction by its uuid 
    # @param id [String] Transaction ID
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :show_partial_clearings Include a transaction for each clearing of an authorization.
    # @return [Array<(Transaction1, Integer, Hash)>] Transaction1 data, response status code and response headers
    def get_transaction_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsBetaApi.get_transaction_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TransactionsBetaApi.get_transaction_by_id"
      end
      # resource path
      local_var_path = '/transactions/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'show_partial_clearings'] = opts[:'show_partial_clearings'] if !opts[:'show_partial_clearings'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Transaction1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"TransactionsBetaApi.get_transaction_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsBetaApi#get_transaction_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Transactions
    # > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Get paginated list of transactions matching the provided filters 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :posted_amount Only return transactions equal to the given &#x60;posted_amount&#x60;
    # @option opts [Boolean] :include_child_transactions Include transactions from sub-accounts when listing transactions for a given account
    # @option opts [Integer] :amount Only return transactions equal to the given &#x60;amount&#x60;
    # @option opts [Date] :posted_date Only return transactions matching the given &#x60;posted_date&#x60;
    # @option opts [Integer] :amount_lt Only return transactions with &#x60;amount&#x60; less than &#x60;amount_lt&#x60;
    # @option opts [Array<TransactionTypes>] :type Only return transactions matching the given type
    # @option opts [Integer] :posted_amount_gte Only return transactions with &#x60;posted_amount&#x60; greater than or equal to &#x60;posted_amount_gte&#x60;
    # @option opts [Integer] :posted_amount_lt Only return transactions with &#x60;posted_amount&#x60; less than &#x60;posted_amount_lt&#x60;
    # @option opts [Integer] :posted_amount_lte Only return transactions with &#x60;posted_amount&#x60; less than or equal to &#x60;posted_amount_lte&#x60;
    # @option opts [Array<TransactionStatuses>] :status Only return transactions with the given status or statuses
    # @option opts [String] :internal_account_id Only return transactions matching the given &#x60;internal_account_id&#x60;
    # @option opts [String] :account_id Account ID
    # @option opts [Integer] :pending_amount_lte Only return transactions with &#x60;pending_amount&#x60; less than or equal to &#x60;pending_amount_lte&#x60;
    # @option opts [Integer] :amount_gte Only return transactions with &#x60;amount&#x60; greater than or equal to &#x60;amount_gte&#x60;
    # @option opts [Boolean] :show_partial_clearings Include a transaction for each clearing of an authorization.
    # @option opts [String] :group_id Only return transactions matching the given &#x60;group_id&#x60;
    # @option opts [Integer] :pending_amount_gte Only return transactions with &#x60;pending_amount&#x60; greater than or equal to &#x60;pending_amount_gte&#x60;
    # @option opts [Boolean] :exclude_jit_transactions Hide \&quot;JIT funding\&quot; transactions from results
    # @option opts [String] :page_token 
    # @option opts [String] :card_id Card ID
    # @option opts [Integer] :pending_amount Only return transactions equal to the given &#x60;pending_amount&#x60;
    # @option opts [String] :account_source Determines whether to return only transactions against customer accounts (&#x60;CUSTOMER&#x60;) vs internal accounts (&#x60;INTERNAL&#x60;). The default is to return all transactions if no &#x60;account_source&#x60; is specified.
    # @option opts [Date] :posted_date_from Only return transactions later than the given &#x60;posted_date&#x60;
    # @option opts [Integer] :posted_amount_gt only return transactions with &#x60;posted_amount&#x60; greater than &#x60;posted_amount_gt&#x60;
    # @option opts [Integer] :pending_amount_gt only return transactions with &#x60;pending_amount&#x60; greater than &#x60;pending_amount_gt&#x60;
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [Integer] :amount_gt Only return transactions with &#x60;amount&#x60; greater than &#x60;amount_gt&#x60;
    # @option opts [Date] :posted_date_to Only return transactions up to the given &#x60;posted_date&#x60;
    # @option opts [Integer] :amount_lte Only return transactions with &#x60;amount&#x60; less than or equal to &#x60;amount_lte&#x60;
    # @option opts [Array<AllTransactionSubtypes>] :subtype Only return transactions matching the given subtype
    # @option opts [Integer] :pending_amount_lt Only return transactions with &#x60;pending_amount&#x60; less than &#x60;pending_amount_lt&#x60;
    # @return [PaginatedTransactions]
    def list_transactions(opts = {})
      data, _status_code, _headers = list_transactions_with_http_info(opts)
      data
    end

    # List Transactions
    # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Get paginated list of transactions matching the provided filters 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :posted_amount Only return transactions equal to the given &#x60;posted_amount&#x60;
    # @option opts [Boolean] :include_child_transactions Include transactions from sub-accounts when listing transactions for a given account
    # @option opts [Integer] :amount Only return transactions equal to the given &#x60;amount&#x60;
    # @option opts [Date] :posted_date Only return transactions matching the given &#x60;posted_date&#x60;
    # @option opts [Integer] :amount_lt Only return transactions with &#x60;amount&#x60; less than &#x60;amount_lt&#x60;
    # @option opts [Array<TransactionTypes>] :type Only return transactions matching the given type
    # @option opts [Integer] :posted_amount_gte Only return transactions with &#x60;posted_amount&#x60; greater than or equal to &#x60;posted_amount_gte&#x60;
    # @option opts [Integer] :posted_amount_lt Only return transactions with &#x60;posted_amount&#x60; less than &#x60;posted_amount_lt&#x60;
    # @option opts [Integer] :posted_amount_lte Only return transactions with &#x60;posted_amount&#x60; less than or equal to &#x60;posted_amount_lte&#x60;
    # @option opts [Array<TransactionStatuses>] :status Only return transactions with the given status or statuses
    # @option opts [String] :internal_account_id Only return transactions matching the given &#x60;internal_account_id&#x60;
    # @option opts [String] :account_id Account ID
    # @option opts [Integer] :pending_amount_lte Only return transactions with &#x60;pending_amount&#x60; less than or equal to &#x60;pending_amount_lte&#x60;
    # @option opts [Integer] :amount_gte Only return transactions with &#x60;amount&#x60; greater than or equal to &#x60;amount_gte&#x60;
    # @option opts [Boolean] :show_partial_clearings Include a transaction for each clearing of an authorization.
    # @option opts [String] :group_id Only return transactions matching the given &#x60;group_id&#x60;
    # @option opts [Integer] :pending_amount_gte Only return transactions with &#x60;pending_amount&#x60; greater than or equal to &#x60;pending_amount_gte&#x60;
    # @option opts [Boolean] :exclude_jit_transactions Hide \&quot;JIT funding\&quot; transactions from results
    # @option opts [String] :page_token 
    # @option opts [String] :card_id Card ID
    # @option opts [Integer] :pending_amount Only return transactions equal to the given &#x60;pending_amount&#x60;
    # @option opts [String] :account_source Determines whether to return only transactions against customer accounts (&#x60;CUSTOMER&#x60;) vs internal accounts (&#x60;INTERNAL&#x60;). The default is to return all transactions if no &#x60;account_source&#x60; is specified.
    # @option opts [Date] :posted_date_from Only return transactions later than the given &#x60;posted_date&#x60;
    # @option opts [Integer] :posted_amount_gt only return transactions with &#x60;posted_amount&#x60; greater than &#x60;posted_amount_gt&#x60;
    # @option opts [Integer] :pending_amount_gt only return transactions with &#x60;pending_amount&#x60; greater than &#x60;pending_amount_gt&#x60;
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [Integer] :amount_gt Only return transactions with &#x60;amount&#x60; greater than &#x60;amount_gt&#x60;
    # @option opts [Date] :posted_date_to Only return transactions up to the given &#x60;posted_date&#x60;
    # @option opts [Integer] :amount_lte Only return transactions with &#x60;amount&#x60; less than or equal to &#x60;amount_lte&#x60;
    # @option opts [Array<AllTransactionSubtypes>] :subtype Only return transactions matching the given subtype
    # @option opts [Integer] :pending_amount_lt Only return transactions with &#x60;pending_amount&#x60; less than &#x60;pending_amount_lt&#x60;
    # @return [Array<(PaginatedTransactions, Integer, Hash)>] PaginatedTransactions data, response status code and response headers
    def list_transactions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsBetaApi.list_transactions ...'
      end
      allowable_values = ["CUSTOMER", "INTERNAL"]
      if @api_client.config.client_side_validation && opts[:'account_source'] && !allowable_values.include?(opts[:'account_source'])
        fail ArgumentError, "invalid value for \"account_source\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling TransactionsBetaApi.list_transactions, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/transactions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'posted_amount'] = opts[:'posted_amount'] if !opts[:'posted_amount'].nil?
      query_params[:'include_child_transactions'] = opts[:'include_child_transactions'] if !opts[:'include_child_transactions'].nil?
      query_params[:'amount'] = opts[:'amount'] if !opts[:'amount'].nil?
      query_params[:'posted_date'] = opts[:'posted_date'] if !opts[:'posted_date'].nil?
      query_params[:'amount_lt'] = opts[:'amount_lt'] if !opts[:'amount_lt'].nil?
      query_params[:'type'] = @api_client.build_collection_param(opts[:'type'], :csv) if !opts[:'type'].nil?
      query_params[:'posted_amount_gte'] = opts[:'posted_amount_gte'] if !opts[:'posted_amount_gte'].nil?
      query_params[:'posted_amount_lt'] = opts[:'posted_amount_lt'] if !opts[:'posted_amount_lt'].nil?
      query_params[:'posted_amount_lte'] = opts[:'posted_amount_lte'] if !opts[:'posted_amount_lte'].nil?
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :csv) if !opts[:'status'].nil?
      query_params[:'internal_account_id'] = opts[:'internal_account_id'] if !opts[:'internal_account_id'].nil?
      query_params[:'account_id'] = opts[:'account_id'] if !opts[:'account_id'].nil?
      query_params[:'pending_amount_lte'] = opts[:'pending_amount_lte'] if !opts[:'pending_amount_lte'].nil?
      query_params[:'amount_gte'] = opts[:'amount_gte'] if !opts[:'amount_gte'].nil?
      query_params[:'show_partial_clearings'] = opts[:'show_partial_clearings'] if !opts[:'show_partial_clearings'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'pending_amount_gte'] = opts[:'pending_amount_gte'] if !opts[:'pending_amount_gte'].nil?
      query_params[:'exclude_jit_transactions'] = opts[:'exclude_jit_transactions'] if !opts[:'exclude_jit_transactions'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'card_id'] = opts[:'card_id'] if !opts[:'card_id'].nil?
      query_params[:'pending_amount'] = opts[:'pending_amount'] if !opts[:'pending_amount'].nil?
      query_params[:'account_source'] = opts[:'account_source'] if !opts[:'account_source'].nil?
      query_params[:'posted_date_from'] = opts[:'posted_date_from'] if !opts[:'posted_date_from'].nil?
      query_params[:'posted_amount_gt'] = opts[:'posted_amount_gt'] if !opts[:'posted_amount_gt'].nil?
      query_params[:'pending_amount_gt'] = opts[:'pending_amount_gt'] if !opts[:'pending_amount_gt'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'amount_gt'] = opts[:'amount_gt'] if !opts[:'amount_gt'].nil?
      query_params[:'posted_date_to'] = opts[:'posted_date_to'] if !opts[:'posted_date_to'].nil?
      query_params[:'amount_lte'] = opts[:'amount_lte'] if !opts[:'amount_lte'].nil?
      query_params[:'subtype'] = @api_client.build_collection_param(opts[:'subtype'], :csv) if !opts[:'subtype'].nil?
      query_params[:'pending_amount_lt'] = opts[:'pending_amount_lt'] if !opts[:'pending_amount_lt'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedTransactions'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"TransactionsBetaApi.list_transactions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsBetaApi#list_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
