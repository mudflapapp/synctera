=begin
#Synctera API

#<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.74.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'cgi'

module Synctera
  class LicensesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a license and associate it with a business
    # License represents a business permit that will be verified 
    # @param post_license [PostLicense] license to be created
    # @param [Hash] opts the optional parameters
    # @return [ResponseLicense]
    def create_licenses(post_license, opts = {})
      data, _status_code, _headers = create_licenses_with_http_info(post_license, opts)
      data
    end

    # Create a license and associate it with a business
    # License represents a business permit that will be verified 
    # @param post_license [PostLicense] license to be created
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseLicense, Integer, Hash)>] ResponseLicense data, response status code and response headers
    def create_licenses_with_http_info(post_license, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LicensesApi.create_licenses ...'
      end
      # verify the required parameter 'post_license' is set
      if @api_client.config.client_side_validation && post_license.nil?
        fail ArgumentError, "Missing the required parameter 'post_license' when calling LicensesApi.create_licenses"
      end
      # resource path
      local_var_path = '/licenses'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_license)

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseLicense'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"LicensesApi.create_licenses",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LicensesApi#create_licenses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get license
    # Get license record by id
    # @param license_id [String] License record identifier
    # @param [Hash] opts the optional parameters
    # @return [ResponseLicense]
    def get_license(license_id, opts = {})
      data, _status_code, _headers = get_license_with_http_info(license_id, opts)
      data
    end

    # Get license
    # Get license record by id
    # @param license_id [String] License record identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseLicense, Integer, Hash)>] ResponseLicense data, response status code and response headers
    def get_license_with_http_info(license_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LicensesApi.get_license ...'
      end
      # verify the required parameter 'license_id' is set
      if @api_client.config.client_side_validation && license_id.nil?
        fail ArgumentError, "Missing the required parameter 'license_id' when calling LicensesApi.get_license"
      end
      # resource path
      local_var_path = '/licenses/{license_id}'.sub('{' + 'license_id' + '}', CGI.escape(license_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseLicense'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"LicensesApi.get_license",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LicensesApi#get_license\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # list licenses
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :business_id Unique identifier for the business. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [String] :customer_id The customer&#39;s unique identifier
    # @return [LicenseList]
    def list_licenses(opts = {})
      data, _status_code, _headers = list_licenses_with_http_info(opts)
      data
    end

    # list licenses
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :business_id Unique identifier for the business. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [String] :customer_id The customer&#39;s unique identifier
    # @return [Array<(LicenseList, Integer, Hash)>] LicenseList data, response status code and response headers
    def list_licenses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LicensesApi.list_licenses ...'
      end
      # resource path
      local_var_path = '/licenses'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'business_id'] = @api_client.build_collection_param(opts[:'business_id'], :csv) if !opts[:'business_id'].nil?
      query_params[:'customer_id'] = opts[:'customer_id'] if !opts[:'customer_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LicenseList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"LicensesApi.list_licenses",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LicensesApi#list_licenses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patch License
    # Update a License by ID.
    # @param license_id [String] License record identifier
    # @param license_patch [LicensePatch] 
    # @param [Hash] opts the optional parameters
    # @return [ResponseLicense]
    def patch_license(license_id, license_patch, opts = {})
      data, _status_code, _headers = patch_license_with_http_info(license_id, license_patch, opts)
      data
    end

    # Patch License
    # Update a License by ID.
    # @param license_id [String] License record identifier
    # @param license_patch [LicensePatch] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseLicense, Integer, Hash)>] ResponseLicense data, response status code and response headers
    def patch_license_with_http_info(license_id, license_patch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LicensesApi.patch_license ...'
      end
      # verify the required parameter 'license_id' is set
      if @api_client.config.client_side_validation && license_id.nil?
        fail ArgumentError, "Missing the required parameter 'license_id' when calling LicensesApi.patch_license"
      end
      # verify the required parameter 'license_patch' is set
      if @api_client.config.client_side_validation && license_patch.nil?
        fail ArgumentError, "Missing the required parameter 'license_patch' when calling LicensesApi.patch_license"
      end
      # resource path
      local_var_path = '/licenses/{license_id}'.sub('{' + 'license_id' + '}', CGI.escape(license_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(license_patch)

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseLicense'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"LicensesApi.patch_license",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LicensesApi#patch_license\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
