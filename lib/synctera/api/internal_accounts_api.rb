=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.111.0

Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'cgi'

module Synctera
  class InternalAccountsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add internal accounts
    # Add an internal account.  Note: In production, this action can only be performed by Synctera administrators. 
    # @param internal_account_post [InternalAccountPost] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [InternalAccountResponse]
    def add_internal_accounts(internal_account_post, opts = {})
      data, _status_code, _headers = add_internal_accounts_with_http_info(internal_account_post, opts)
      data
    end

    # Add internal accounts
    # Add an internal account.  Note: In production, this action can only be performed by Synctera administrators. 
    # @param internal_account_post [InternalAccountPost] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(InternalAccountResponse, Integer, Hash)>] InternalAccountResponse data, response status code and response headers
    def add_internal_accounts_with_http_info(internal_account_post, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InternalAccountsApi.add_internal_accounts ...'
      end
      # verify the required parameter 'internal_account_post' is set
      if @api_client.config.client_side_validation && internal_account_post.nil?
        fail ArgumentError, "Missing the required parameter 'internal_account_post' when calling InternalAccountsApi.add_internal_accounts"
      end
      # resource path
      local_var_path = '/internal_accounts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(internal_account_post)

      # return_type
      return_type = opts[:debug_return_type] || 'InternalAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"InternalAccountsApi.add_internal_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InternalAccountsApi#add_internal_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get internal account by id
    # Returns an internal account by id 
    # @param internal_account_id [String] Unique identifier for the internal account.
    # @param [Hash] opts the optional parameters
    # @return [InternalAccountResponse]
    def get_internal_accounts(internal_account_id, opts = {})
      data, _status_code, _headers = get_internal_accounts_with_http_info(internal_account_id, opts)
      data
    end

    # Get internal account by id
    # Returns an internal account by id 
    # @param internal_account_id [String] Unique identifier for the internal account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InternalAccountResponse, Integer, Hash)>] InternalAccountResponse data, response status code and response headers
    def get_internal_accounts_with_http_info(internal_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InternalAccountsApi.get_internal_accounts ...'
      end
      # verify the required parameter 'internal_account_id' is set
      if @api_client.config.client_side_validation && internal_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'internal_account_id' when calling InternalAccountsApi.get_internal_accounts"
      end
      # resource path
      local_var_path = '/internal_accounts/{internal_account_id}'.sub('{' + 'internal_account_id' + '}', CGI.escape(internal_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InternalAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"InternalAccountsApi.get_internal_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InternalAccountsApi#get_internal_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List internal accounts
    # Returns a list of all internal accounts. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [Array<String>] :id Internal account ID(s). Multiple IDs can be provided as a comma-separated list. 
    # @return [InternalAccountsList]
    def list_internal_accounts(opts = {})
      data, _status_code, _headers = list_internal_accounts_with_http_info(opts)
      data
    end

    # List internal accounts
    # Returns a list of all internal accounts. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [Array<String>] :id Internal account ID(s). Multiple IDs can be provided as a comma-separated list. 
    # @return [Array<(InternalAccountsList, Integer, Hash)>] InternalAccountsList data, response status code and response headers
    def list_internal_accounts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InternalAccountsApi.list_internal_accounts ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling InternalAccountsApi.list_internal_accounts, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/internal_accounts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'id'] = @api_client.build_collection_param(opts[:'id'], :csv) if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InternalAccountsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"InternalAccountsApi.list_internal_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InternalAccountsApi#list_internal_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patch internal account
    # Patch internal account.  Note: In production, this action can only be performed by Synctera administrators. 
    # @param internal_account_id [String] Unique identifier for the internal account.
    # @param internal_account_patch [InternalAccountPatch] Internal Account fields to be patched
    # @param [Hash] opts the optional parameters
    # @return [InternalAccountResponse]
    def patch_internal_account(internal_account_id, internal_account_patch, opts = {})
      data, _status_code, _headers = patch_internal_account_with_http_info(internal_account_id, internal_account_patch, opts)
      data
    end

    # Patch internal account
    # Patch internal account.  Note: In production, this action can only be performed by Synctera administrators. 
    # @param internal_account_id [String] Unique identifier for the internal account.
    # @param internal_account_patch [InternalAccountPatch] Internal Account fields to be patched
    # @param [Hash] opts the optional parameters
    # @return [Array<(InternalAccountResponse, Integer, Hash)>] InternalAccountResponse data, response status code and response headers
    def patch_internal_account_with_http_info(internal_account_id, internal_account_patch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InternalAccountsApi.patch_internal_account ...'
      end
      # verify the required parameter 'internal_account_id' is set
      if @api_client.config.client_side_validation && internal_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'internal_account_id' when calling InternalAccountsApi.patch_internal_account"
      end
      # verify the required parameter 'internal_account_patch' is set
      if @api_client.config.client_side_validation && internal_account_patch.nil?
        fail ArgumentError, "Missing the required parameter 'internal_account_patch' when calling InternalAccountsApi.patch_internal_account"
      end
      # resource path
      local_var_path = '/internal_accounts/{internal_account_id}'.sub('{' + 'internal_account_id' + '}', CGI.escape(internal_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(internal_account_patch)

      # return_type
      return_type = opts[:debug_return_type] || 'InternalAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"InternalAccountsApi.patch_internal_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InternalAccountsApi#patch_internal_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
