=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 1.82.0

Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'cgi'

module Synctera
  class DisputesAlphaApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a document to a dispute
    # Add a supporting document to a dispute object 
    # @param dispute_id [String] 
    # @param file [File] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [DisputeDocumentResponse]
    def add_dispute_document(dispute_id, file, opts = {})
      data, _status_code, _headers = add_dispute_document_with_http_info(dispute_id, file, opts)
      data
    end

    # Add a document to a dispute
    # Add a supporting document to a dispute object 
    # @param dispute_id [String] 
    # @param file [File] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(DisputeDocumentResponse, Integer, Hash)>] DisputeDocumentResponse data, response status code and response headers
    def add_dispute_document_with_http_info(dispute_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DisputesAlphaApi.add_dispute_document ...'
      end
      # verify the required parameter 'dispute_id' is set
      if @api_client.config.client_side_validation && dispute_id.nil?
        fail ArgumentError, "Missing the required parameter 'dispute_id' when calling DisputesAlphaApi.add_dispute_document"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling DisputesAlphaApi.add_dispute_document"
      end
      # resource path
      local_var_path = '/disputes/{dispute_id}/documents'.sub('{' + 'dispute_id' + '}', CGI.escape(dispute_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DisputeDocumentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DisputesAlphaApi.add_dispute_document",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DisputesAlphaApi#add_dispute_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a dispute action
    # Create an action on a disputed transaction  > ðŸš§ Alpha > Spec only: This is an Alpha endpoint that is not yet implemented. Feedback from the community is welcome. We may make breaking changes. 
    # @param dispute_id [String] 
    # @param dispute_action_request [DisputeActionRequest] Details of the dispute action
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [DisputeActionResponse]
    def create_action(dispute_id, dispute_action_request, opts = {})
      data, _status_code, _headers = create_action_with_http_info(dispute_id, dispute_action_request, opts)
      data
    end

    # Create a dispute action
    # Create an action on a disputed transaction  &gt; ðŸš§ Alpha &gt; Spec only: This is an Alpha endpoint that is not yet implemented. Feedback from the community is welcome. We may make breaking changes. 
    # @param dispute_id [String] 
    # @param dispute_action_request [DisputeActionRequest] Details of the dispute action
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(DisputeActionResponse, Integer, Hash)>] DisputeActionResponse data, response status code and response headers
    def create_action_with_http_info(dispute_id, dispute_action_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DisputesAlphaApi.create_action ...'
      end
      # verify the required parameter 'dispute_id' is set
      if @api_client.config.client_side_validation && dispute_id.nil?
        fail ArgumentError, "Missing the required parameter 'dispute_id' when calling DisputesAlphaApi.create_action"
      end
      # verify the required parameter 'dispute_action_request' is set
      if @api_client.config.client_side_validation && dispute_action_request.nil?
        fail ArgumentError, "Missing the required parameter 'dispute_action_request' when calling DisputesAlphaApi.create_action"
      end
      # resource path
      local_var_path = '/disputes/{dispute_id}/actions'.sub('{' + 'dispute_id' + '}', CGI.escape(dispute_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(dispute_action_request)

      # return_type
      return_type = opts[:debug_return_type] || 'DisputeActionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DisputesAlphaApi.create_action",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DisputesAlphaApi#create_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Dispute a transaction
    # Create a dispute against a transaction.  > ðŸš§ Alpha > This is an Alpha endpoint. Feedback from the community is welcome. We may make breaking changes. 
    # @param dispute_request [DisputeRequest] Details of the disputed transaction.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [DisputeResponse]
    def create_dispute(dispute_request, opts = {})
      data, _status_code, _headers = create_dispute_with_http_info(dispute_request, opts)
      data
    end

    # Dispute a transaction
    # Create a dispute against a transaction.  &gt; ðŸš§ Alpha &gt; This is an Alpha endpoint. Feedback from the community is welcome. We may make breaking changes. 
    # @param dispute_request [DisputeRequest] Details of the disputed transaction.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(DisputeResponse, Integer, Hash)>] DisputeResponse data, response status code and response headers
    def create_dispute_with_http_info(dispute_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DisputesAlphaApi.create_dispute ...'
      end
      # verify the required parameter 'dispute_request' is set
      if @api_client.config.client_side_validation && dispute_request.nil?
        fail ArgumentError, "Missing the required parameter 'dispute_request' when calling DisputesAlphaApi.create_dispute"
      end
      # resource path
      local_var_path = '/disputes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(dispute_request)

      # return_type
      return_type = opts[:debug_return_type] || 'DisputeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DisputesAlphaApi.create_dispute",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DisputesAlphaApi#create_dispute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Dispute
    # Get a dispute by ID.  > ðŸš§ Alpha > This is an Alpha endpoint. Feedback from the community is welcome. We may make breaking changes. 
    # @param dispute_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [DisputeResponse]
    def get_dispute(dispute_id, opts = {})
      data, _status_code, _headers = get_dispute_with_http_info(dispute_id, opts)
      data
    end

    # Get a Dispute
    # Get a dispute by ID.  &gt; ðŸš§ Alpha &gt; This is an Alpha endpoint. Feedback from the community is welcome. We may make breaking changes. 
    # @param dispute_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DisputeResponse, Integer, Hash)>] DisputeResponse data, response status code and response headers
    def get_dispute_with_http_info(dispute_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DisputesAlphaApi.get_dispute ...'
      end
      # verify the required parameter 'dispute_id' is set
      if @api_client.config.client_side_validation && dispute_id.nil?
        fail ArgumentError, "Missing the required parameter 'dispute_id' when calling DisputesAlphaApi.get_dispute"
      end
      # resource path
      local_var_path = '/disputes/{dispute_id}'.sub('{' + 'dispute_id' + '}', CGI.escape(dispute_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DisputeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DisputesAlphaApi.get_dispute",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DisputesAlphaApi#get_dispute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get dispute document contents
    # Returns the bytes of the requested document
    # @param document_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_dispute_document_contents(document_id, opts = {})
      data, _status_code, _headers = get_dispute_document_contents_with_http_info(document_id, opts)
      data
    end

    # Get dispute document contents
    # Returns the bytes of the requested document
    # @param document_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_dispute_document_contents_with_http_info(document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DisputesAlphaApi.get_dispute_document_contents ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DisputesAlphaApi.get_dispute_document_contents"
      end
      # resource path
      local_var_path = '/disputes/documents/{document_id}/contents'.sub('{' + 'document_id' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DisputesAlphaApi.get_dispute_document_contents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DisputesAlphaApi#get_dispute_document_contents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List disputes
    # Get paginated list of disputes  > ðŸš§ Alpha > This is an Alpha endpoint. Feedback from the community is welcome. We may make breaking changes. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :transaction_id 
    # @option opts [PaymentRail] :payment_rail Specifies the payment rail type for the returned disputes. 
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @return [DisputeList]
    def list_disputes(opts = {})
      data, _status_code, _headers = list_disputes_with_http_info(opts)
      data
    end

    # List disputes
    # Get paginated list of disputes  &gt; ðŸš§ Alpha &gt; This is an Alpha endpoint. Feedback from the community is welcome. We may make breaking changes. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :transaction_id 
    # @option opts [PaymentRail] :payment_rail Specifies the payment rail type for the returned disputes. 
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @return [Array<(DisputeList, Integer, Hash)>] DisputeList data, response status code and response headers
    def list_disputes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DisputesAlphaApi.list_disputes ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DisputesAlphaApi.list_disputes, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/disputes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'transaction_id'] = opts[:'transaction_id'] if !opts[:'transaction_id'].nil?
      query_params[:'payment_rail'] = opts[:'payment_rail'] if !opts[:'payment_rail'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DisputeList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DisputesAlphaApi.list_disputes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DisputesAlphaApi#list_disputes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an dispute
    # Update an dispute.  > ðŸš§ Alpha > This is an Alpha endpoint. Feedback from the community is welcome. We may make breaking changes. 
    # @param dispute_id [String] 
    # @param dispute_patch_request [DisputePatchRequest] Dispute update request body
    # @param [Hash] opts the optional parameters
    # @return [DisputeResponse]
    def update_dispute(dispute_id, dispute_patch_request, opts = {})
      data, _status_code, _headers = update_dispute_with_http_info(dispute_id, dispute_patch_request, opts)
      data
    end

    # Update an dispute
    # Update an dispute.  &gt; ðŸš§ Alpha &gt; This is an Alpha endpoint. Feedback from the community is welcome. We may make breaking changes. 
    # @param dispute_id [String] 
    # @param dispute_patch_request [DisputePatchRequest] Dispute update request body
    # @param [Hash] opts the optional parameters
    # @return [Array<(DisputeResponse, Integer, Hash)>] DisputeResponse data, response status code and response headers
    def update_dispute_with_http_info(dispute_id, dispute_patch_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DisputesAlphaApi.update_dispute ...'
      end
      # verify the required parameter 'dispute_id' is set
      if @api_client.config.client_side_validation && dispute_id.nil?
        fail ArgumentError, "Missing the required parameter 'dispute_id' when calling DisputesAlphaApi.update_dispute"
      end
      # verify the required parameter 'dispute_patch_request' is set
      if @api_client.config.client_side_validation && dispute_patch_request.nil?
        fail ArgumentError, "Missing the required parameter 'dispute_patch_request' when calling DisputesAlphaApi.update_dispute"
      end
      # resource path
      local_var_path = '/disputes/{dispute_id}'.sub('{' + 'dispute_id' + '}', CGI.escape(dispute_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(dispute_patch_request)

      # return_type
      return_type = opts[:debug_return_type] || 'DisputeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DisputesAlphaApi.update_dispute",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DisputesAlphaApi#update_dispute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
