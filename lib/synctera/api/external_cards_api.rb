=begin
#Synctera API

#<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.74.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'cgi'

module Synctera
  class ExternalCardsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Authenticate 3DS (beta)
    # > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Validates the results of an External Card Transfer 3DS authentication challenge. 
    # @param authenticate3ds_request [Authenticate3dsRequest] Details of the External Card Transfer 3DS authentication challenge validation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Authenticate3dsResponse]
    def authenticate3_ds(authenticate3ds_request, opts = {})
      data, _status_code, _headers = authenticate3_ds_with_http_info(authenticate3ds_request, opts)
      data
    end

    # Authenticate 3DS (beta)
    # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Validates the results of an External Card Transfer 3DS authentication challenge. 
    # @param authenticate3ds_request [Authenticate3dsRequest] Details of the External Card Transfer 3DS authentication challenge validation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(Authenticate3dsResponse, Integer, Hash)>] Authenticate3dsResponse data, response status code and response headers
    def authenticate3_ds_with_http_info(authenticate3ds_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalCardsApi.authenticate3_ds ...'
      end
      # verify the required parameter 'authenticate3ds_request' is set
      if @api_client.config.client_side_validation && authenticate3ds_request.nil?
        fail ArgumentError, "Missing the required parameter 'authenticate3ds_request' when calling ExternalCardsApi.authenticate3_ds"
      end
      # resource path
      local_var_path = '/external_cards/authenticate_3ds'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(authenticate3ds_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Authenticate3dsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalCardsApi.authenticate3_ds",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalCardsApi#authenticate3_ds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create External Card from token
    # Create an External Card from token. The token is obtained through the iFrame, along with cardholder name, which also must be provided. Cardholder name is matched against customer name. 
    # @param external_card_request [ExternalCardRequest] Details of the External Card to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [ExternalCardResponse]
    def create_external_card_from_token(external_card_request, opts = {})
      data, _status_code, _headers = create_external_card_from_token_with_http_info(external_card_request, opts)
      data
    end

    # Create External Card from token
    # Create an External Card from token. The token is obtained through the iFrame, along with cardholder name, which also must be provided. Cardholder name is matched against customer name. 
    # @param external_card_request [ExternalCardRequest] Details of the External Card to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(ExternalCardResponse, Integer, Hash)>] ExternalCardResponse data, response status code and response headers
    def create_external_card_from_token_with_http_info(external_card_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalCardsApi.create_external_card_from_token ...'
      end
      # verify the required parameter 'external_card_request' is set
      if @api_client.config.client_side_validation && external_card_request.nil?
        fail ArgumentError, "Missing the required parameter 'external_card_request' when calling ExternalCardsApi.create_external_card_from_token"
      end
      # resource path
      local_var_path = '/external_cards/tokens'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(external_card_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalCardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalCardsApi.create_external_card_from_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalCardsApi#create_external_card_from_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create External Card Transfer
    # Create an External Card Transfer 
    # @param transfer_request [TransferRequest] Details of the External Card Transfer to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [TransferResponse]
    def create_external_card_transfer(transfer_request, opts = {})
      data, _status_code, _headers = create_external_card_transfer_with_http_info(transfer_request, opts)
      data
    end

    # Create External Card Transfer
    # Create an External Card Transfer 
    # @param transfer_request [TransferRequest] Details of the External Card Transfer to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(TransferResponse, Integer, Hash)>] TransferResponse data, response status code and response headers
    def create_external_card_transfer_with_http_info(transfer_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalCardsApi.create_external_card_transfer ...'
      end
      # verify the required parameter 'transfer_request' is set
      if @api_client.config.client_side_validation && transfer_request.nil?
        fail ArgumentError, "Missing the required parameter 'transfer_request' when calling ExternalCardsApi.create_external_card_transfer"
      end
      # resource path
      local_var_path = '/external_cards/transfers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(transfer_request)

      # return_type
      return_type = opts[:debug_return_type] || 'TransferResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalCardsApi.create_external_card_transfer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalCardsApi#create_external_card_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create External Card Transfer Reversal
    # Create an External Card Transfer Reversal 
    # @param transfer_id [String] The unique identifier of a transfer
    # @param transfer_reversal_request [TransferReversalRequest] Details of the External Card Transfer Reversal to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [TransferResponse]
    def create_external_card_transfer_reversal(transfer_id, transfer_reversal_request, opts = {})
      data, _status_code, _headers = create_external_card_transfer_reversal_with_http_info(transfer_id, transfer_reversal_request, opts)
      data
    end

    # Create External Card Transfer Reversal
    # Create an External Card Transfer Reversal 
    # @param transfer_id [String] The unique identifier of a transfer
    # @param transfer_reversal_request [TransferReversalRequest] Details of the External Card Transfer Reversal to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(TransferResponse, Integer, Hash)>] TransferResponse data, response status code and response headers
    def create_external_card_transfer_reversal_with_http_info(transfer_id, transfer_reversal_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalCardsApi.create_external_card_transfer_reversal ...'
      end
      # verify the required parameter 'transfer_id' is set
      if @api_client.config.client_side_validation && transfer_id.nil?
        fail ArgumentError, "Missing the required parameter 'transfer_id' when calling ExternalCardsApi.create_external_card_transfer_reversal"
      end
      # verify the required parameter 'transfer_reversal_request' is set
      if @api_client.config.client_side_validation && transfer_reversal_request.nil?
        fail ArgumentError, "Missing the required parameter 'transfer_reversal_request' when calling ExternalCardsApi.create_external_card_transfer_reversal"
      end
      # resource path
      local_var_path = '/external_cards/transfers/{transfer_id}/reversals'.sub('{' + 'transfer_id' + '}', CGI.escape(transfer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(transfer_reversal_request)

      # return_type
      return_type = opts[:debug_return_type] || 'TransferResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalCardsApi.create_external_card_transfer_reversal",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalCardsApi#create_external_card_transfer_reversal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete External Card
    # Delete an External Card
    # @param external_card_id [String] The unique identifier of an external card
    # @param [Hash] opts the optional parameters
    # @return [DeleteResponse]
    def delete_external_card(external_card_id, opts = {})
      data, _status_code, _headers = delete_external_card_with_http_info(external_card_id, opts)
      data
    end

    # Delete External Card
    # Delete an External Card
    # @param external_card_id [String] The unique identifier of an external card
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteResponse, Integer, Hash)>] DeleteResponse data, response status code and response headers
    def delete_external_card_with_http_info(external_card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalCardsApi.delete_external_card ...'
      end
      # verify the required parameter 'external_card_id' is set
      if @api_client.config.client_side_validation && external_card_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_card_id' when calling ExternalCardsApi.delete_external_card"
      end
      # resource path
      local_var_path = '/external_cards/{external_card_id}'.sub('{' + 'external_card_id' + '}', CGI.escape(external_card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalCardsApi.delete_external_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalCardsApi#delete_external_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get External Card
    # Get an External Card 
    # @param external_card_id [String] The unique identifier of an external card
    # @param [Hash] opts the optional parameters
    # @return [ExternalCardResponse]
    def get_external_card(external_card_id, opts = {})
      data, _status_code, _headers = get_external_card_with_http_info(external_card_id, opts)
      data
    end

    # Get External Card
    # Get an External Card 
    # @param external_card_id [String] The unique identifier of an external card
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExternalCardResponse, Integer, Hash)>] ExternalCardResponse data, response status code and response headers
    def get_external_card_with_http_info(external_card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalCardsApi.get_external_card ...'
      end
      # verify the required parameter 'external_card_id' is set
      if @api_client.config.client_side_validation && external_card_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_card_id' when calling ExternalCardsApi.get_external_card"
      end
      # resource path
      local_var_path = '/external_cards/{external_card_id}'.sub('{' + 'external_card_id' + '}', CGI.escape(external_card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalCardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalCardsApi.get_external_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalCardsApi#get_external_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get External Card Transfer
    # Get an External Card Transfer 
    # @param transfer_id [String] The unique identifier of a transfer
    # @param [Hash] opts the optional parameters
    # @return [TransferResponse]
    def get_external_card_transfer(transfer_id, opts = {})
      data, _status_code, _headers = get_external_card_transfer_with_http_info(transfer_id, opts)
      data
    end

    # Get External Card Transfer
    # Get an External Card Transfer 
    # @param transfer_id [String] The unique identifier of a transfer
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransferResponse, Integer, Hash)>] TransferResponse data, response status code and response headers
    def get_external_card_transfer_with_http_info(transfer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalCardsApi.get_external_card_transfer ...'
      end
      # verify the required parameter 'transfer_id' is set
      if @api_client.config.client_side_validation && transfer_id.nil?
        fail ArgumentError, "Missing the required parameter 'transfer_id' when calling ExternalCardsApi.get_external_card_transfer"
      end
      # resource path
      local_var_path = '/external_cards/transfers/{transfer_id}'.sub('{' + 'transfer_id' + '}', CGI.escape(transfer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransferResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalCardsApi.get_external_card_transfer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalCardsApi#get_external_card_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initialize 3DS (beta)
    # > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Initializes an External Card Transfer 3DS authentication. 
    # @param initialize3ds_request [Initialize3dsRequest] Details of the External Card Transfer 3DS authentication to initialize.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Initialize3dsResponse]
    def initialize3_ds(initialize3ds_request, opts = {})
      data, _status_code, _headers = initialize3_ds_with_http_info(initialize3ds_request, opts)
      data
    end

    # Initialize 3DS (beta)
    # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Initializes an External Card Transfer 3DS authentication. 
    # @param initialize3ds_request [Initialize3dsRequest] Details of the External Card Transfer 3DS authentication to initialize.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(Initialize3dsResponse, Integer, Hash)>] Initialize3dsResponse data, response status code and response headers
    def initialize3_ds_with_http_info(initialize3ds_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalCardsApi.initialize3_ds ...'
      end
      # verify the required parameter 'initialize3ds_request' is set
      if @api_client.config.client_side_validation && initialize3ds_request.nil?
        fail ArgumentError, "Missing the required parameter 'initialize3ds_request' when calling ExternalCardsApi.initialize3_ds"
      end
      # resource path
      local_var_path = '/external_cards/initialize_3ds'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(initialize3ds_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Initialize3dsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalCardsApi.initialize3_ds",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalCardsApi#initialize3_ds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List External Card Transfers
    # Get a paginated list of External Card Transfers 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :customer_id 
    # @option opts [TransferType] :type The type of an external transfer
    # @option opts [Array<String>] :originating_account_id 
    # @option opts [String] :external_card_id 
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @return [TransferListResponse]
    def list_external_card_transfers(opts = {})
      data, _status_code, _headers = list_external_card_transfers_with_http_info(opts)
      data
    end

    # List External Card Transfers
    # Get a paginated list of External Card Transfers 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :customer_id 
    # @option opts [TransferType] :type The type of an external transfer
    # @option opts [Array<String>] :originating_account_id 
    # @option opts [String] :external_card_id 
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @return [Array<(TransferListResponse, Integer, Hash)>] TransferListResponse data, response status code and response headers
    def list_external_card_transfers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalCardsApi.list_external_card_transfers ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ExternalCardsApi.list_external_card_transfers, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/external_cards/transfers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'customer_id'] = @api_client.build_collection_param(opts[:'customer_id'], :csv) if !opts[:'customer_id'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'originating_account_id'] = @api_client.build_collection_param(opts[:'originating_account_id'], :csv) if !opts[:'originating_account_id'].nil?
      query_params[:'external_card_id'] = opts[:'external_card_id'] if !opts[:'external_card_id'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransferListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalCardsApi.list_external_card_transfers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalCardsApi#list_external_card_transfers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List External Cards
    # Get a paginated list of External Cards 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_id 
    # @option opts [String] :business_id 
    # @option opts [String] :page_token 
    # @option opts [ExternalCardStatus] :status 
    # @option opts [Integer] :limit  (default to 100)
    # @return [ExternalCardListResponse]
    def list_external_cards(opts = {})
      data, _status_code, _headers = list_external_cards_with_http_info(opts)
      data
    end

    # List External Cards
    # Get a paginated list of External Cards 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_id 
    # @option opts [String] :business_id 
    # @option opts [String] :page_token 
    # @option opts [ExternalCardStatus] :status 
    # @option opts [Integer] :limit  (default to 100)
    # @return [Array<(ExternalCardListResponse, Integer, Hash)>] ExternalCardListResponse data, response status code and response headers
    def list_external_cards_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalCardsApi.list_external_cards ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ExternalCardsApi.list_external_cards, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/external_cards'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'customer_id'] = opts[:'customer_id'] if !opts[:'customer_id'].nil?
      query_params[:'business_id'] = opts[:'business_id'] if !opts[:'business_id'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalCardListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalCardsApi.list_external_cards",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalCardsApi#list_external_cards\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lookup 3DS (beta)
    # > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Using device collection data, performs a lookup for an External Card Transfer 3DS authentication. The results will indicate whether the transfer is successfully authenticated or if a 3DS challenge is required. 
    # @param lookup3ds_request [Lookup3dsRequest] Details of the External Card Transfer 3DS authentication lookup.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Lookup3dsResponse]
    def lookup3_ds(lookup3ds_request, opts = {})
      data, _status_code, _headers = lookup3_ds_with_http_info(lookup3ds_request, opts)
      data
    end

    # Lookup 3DS (beta)
    # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Using device collection data, performs a lookup for an External Card Transfer 3DS authentication. The results will indicate whether the transfer is successfully authenticated or if a 3DS challenge is required. 
    # @param lookup3ds_request [Lookup3dsRequest] Details of the External Card Transfer 3DS authentication lookup.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(Lookup3dsResponse, Integer, Hash)>] Lookup3dsResponse data, response status code and response headers
    def lookup3_ds_with_http_info(lookup3ds_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalCardsApi.lookup3_ds ...'
      end
      # verify the required parameter 'lookup3ds_request' is set
      if @api_client.config.client_side_validation && lookup3ds_request.nil?
        fail ArgumentError, "Missing the required parameter 'lookup3ds_request' when calling ExternalCardsApi.lookup3_ds"
      end
      # resource path
      local_var_path = '/external_cards/lookup_3ds'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(lookup3ds_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Lookup3dsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalCardsApi.lookup3_ds",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalCardsApi#lookup3_ds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update External Card
    # Update External Card data 
    # @param external_card_id [String] The unique identifier of an external card
    # @param external_card_update_request [ExternalCardUpdateRequest] Fields to update
    # @param [Hash] opts the optional parameters
    # @return [ExternalCardResponse]
    def update_external_card(external_card_id, external_card_update_request, opts = {})
      data, _status_code, _headers = update_external_card_with_http_info(external_card_id, external_card_update_request, opts)
      data
    end

    # Update External Card
    # Update External Card data 
    # @param external_card_id [String] The unique identifier of an external card
    # @param external_card_update_request [ExternalCardUpdateRequest] Fields to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExternalCardResponse, Integer, Hash)>] ExternalCardResponse data, response status code and response headers
    def update_external_card_with_http_info(external_card_id, external_card_update_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalCardsApi.update_external_card ...'
      end
      # verify the required parameter 'external_card_id' is set
      if @api_client.config.client_side_validation && external_card_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_card_id' when calling ExternalCardsApi.update_external_card"
      end
      # verify the required parameter 'external_card_update_request' is set
      if @api_client.config.client_side_validation && external_card_update_request.nil?
        fail ArgumentError, "Missing the required parameter 'external_card_update_request' when calling ExternalCardsApi.update_external_card"
      end
      # resource path
      local_var_path = '/external_cards/{external_card_id}'.sub('{' + 'external_card_id' + '}', CGI.escape(external_card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(external_card_update_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalCardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalCardsApi.update_external_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalCardsApi#update_external_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
