=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.136.0

Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module Synctera
  class DocumentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a document
    # Store a document in the Synctera platform. 
    # @param file [File] The file contents. The maximum file size is 32 MB.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description A description of the attached document
    # @option opts [DocumentEncryption] :encryption 
    # @option opts [String] :metadata Optional field to store additional information about the resource. Intended to be used by the integrator to store non-sensitive data. Since some API clients have trouble formatting multipart/form-data properties that are objects, this property is defined as a string formatted to contain the marshalled JSON object. 
    # @option opts [String] :name A user-friendly name for the document
    # @option opts [String] :related_resource_id The ID of the resource related to the document
    # @option opts [RelatedResourceType] :related_resource_type 
    # @option opts [DocumentType] :type 
    # @return [DocumentResponse]
    def create_document(file, opts = {})
      data, _status_code, _headers = create_document_with_http_info(file, opts)
      data
    end

    # Create a document
    # Store a document in the Synctera platform. 
    # @param file [File] The file contents. The maximum file size is 32 MB.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description A description of the attached document
    # @option opts [DocumentEncryption] :encryption 
    # @option opts [String] :metadata Optional field to store additional information about the resource. Intended to be used by the integrator to store non-sensitive data. Since some API clients have trouble formatting multipart/form-data properties that are objects, this property is defined as a string formatted to contain the marshalled JSON object. 
    # @option opts [String] :name A user-friendly name for the document
    # @option opts [String] :related_resource_id The ID of the resource related to the document
    # @option opts [RelatedResourceType] :related_resource_type 
    # @option opts [DocumentType] :type 
    # @return [Array<(DocumentResponse, Integer, Hash)>] DocumentResponse data, response status code and response headers
    def create_document_with_http_info(file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.create_document ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling DocumentsApi.create_document"
      end
      # resource path
      local_var_path = '/documents'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file
      form_params['description'] = opts[:'description'] if !opts[:'description'].nil?
      form_params['encryption'] = opts[:'encryption'] if !opts[:'encryption'].nil?
      form_params['metadata'] = opts[:'metadata'] if !opts[:'metadata'].nil?
      form_params['name'] = opts[:'name'] if !opts[:'name'].nil?
      form_params['related_resource_id'] = opts[:'related_resource_id'] if !opts[:'related_resource_id'].nil?
      form_params['related_resource_type'] = opts[:'related_resource_type'] if !opts[:'related_resource_type'].nil?
      form_params['type'] = opts[:'type'] if !opts[:'type'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DocumentsApi.create_document",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#create_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new document version
    # Docs 
    # @param document_id [String] The unique identifier of the document.
    # @param file [File] The file contents
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description A description of the attached document
    # @option opts [DocumentEncryptionVersionPost] :encryption 
    # @option opts [String] :name A user-friendly name for the document
    # @option opts [DocumentType] :type 
    # @return [DocumentResponse]
    def create_document_version(document_id, file, opts = {})
      data, _status_code, _headers = create_document_version_with_http_info(document_id, file, opts)
      data
    end

    # Create a new document version
    # Docs 
    # @param document_id [String] The unique identifier of the document.
    # @param file [File] The file contents
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description A description of the attached document
    # @option opts [DocumentEncryptionVersionPost] :encryption 
    # @option opts [String] :name A user-friendly name for the document
    # @option opts [DocumentType] :type 
    # @return [Array<(DocumentResponse, Integer, Hash)>] DocumentResponse data, response status code and response headers
    def create_document_version_with_http_info(document_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.create_document_version ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsApi.create_document_version"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling DocumentsApi.create_document_version"
      end
      # resource path
      local_var_path = '/documents/{document_id}/versions'.sub('{' + 'document_id' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file
      form_params['description'] = opts[:'description'] if !opts[:'description'].nil?
      form_params['encryption'] = opts[:'encryption'] if !opts[:'encryption'].nil?
      form_params['name'] = opts[:'name'] if !opts[:'name'].nil?
      form_params['type'] = opts[:'type'] if !opts[:'type'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DocumentsApi.create_document_version",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#create_document_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a document
    # Delete a document. Before a document can be deleted, it must have a deletion_reason explaining why the document was deleted. Use the [PATCH endpoint](ref:updatedocument) to set the `deletion_reason` property. 
    # @param document_id [String] The unique identifier of the document.
    # @param [Hash] opts the optional parameters
    # @return [DeleteResponse]
    def delete_document(document_id, opts = {})
      data, _status_code, _headers = delete_document_with_http_info(document_id, opts)
      data
    end

    # Delete a document
    # Delete a document. Before a document can be deleted, it must have a deletion_reason explaining why the document was deleted. Use the [PATCH endpoint](ref:updatedocument) to set the &#x60;deletion_reason&#x60; property. 
    # @param document_id [String] The unique identifier of the document.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteResponse, Integer, Hash)>] DeleteResponse data, response status code and response headers
    def delete_document_with_http_info(document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.delete_document ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsApi.delete_document"
      end
      # resource path
      local_var_path = '/documents/{document_id}'.sub('{' + 'document_id' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DocumentsApi.delete_document",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#delete_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a document
    # Returns the document attributes. Use /documents/{document_id}/contents to get the contents. 
    # @param document_id [String] The unique identifier of the document.
    # @param [Hash] opts the optional parameters
    # @return [DocumentResponse]
    def get_document(document_id, opts = {})
      data, _status_code, _headers = get_document_with_http_info(document_id, opts)
      data
    end

    # Get a document
    # Returns the document attributes. Use /documents/{document_id}/contents to get the contents. 
    # @param document_id [String] The unique identifier of the document.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocumentResponse, Integer, Hash)>] DocumentResponse data, response status code and response headers
    def get_document_with_http_info(document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.get_document ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsApi.get_document"
      end
      # resource path
      local_var_path = '/documents/{document_id}'.sub('{' + 'document_id' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DocumentsApi.get_document",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#get_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get contents of latest document version
    # Returns the bytes of the requested document.
    # @param document_id [String] The unique identifier of the document.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_document_contents(document_id, opts = {})
      data, _status_code, _headers = get_document_contents_with_http_info(document_id, opts)
      data
    end

    # Get contents of latest document version
    # Returns the bytes of the requested document.
    # @param document_id [String] The unique identifier of the document.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_document_contents_with_http_info(document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.get_document_contents ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsApi.get_document_contents"
      end
      # resource path
      local_var_path = '/documents/{document_id}/contents'.sub('{' + 'document_id' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DocumentsApi.get_document_contents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#get_document_contents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a document by version
    # Returns the document (attributes). Use /documents/{document_id}/versions/{version}/contents to get the contents. 
    # @param document_version [Integer] The document version.
    # @param document_id [String] The unique identifier of the document.
    # @param [Hash] opts the optional parameters
    # @return [DocumentResponse]
    def get_document_version(document_version, document_id, opts = {})
      data, _status_code, _headers = get_document_version_with_http_info(document_version, document_id, opts)
      data
    end

    # Get a document by version
    # Returns the document (attributes). Use /documents/{document_id}/versions/{version}/contents to get the contents. 
    # @param document_version [Integer] The document version.
    # @param document_id [String] The unique identifier of the document.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocumentResponse, Integer, Hash)>] DocumentResponse data, response status code and response headers
    def get_document_version_with_http_info(document_version, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.get_document_version ...'
      end
      # verify the required parameter 'document_version' is set
      if @api_client.config.client_side_validation && document_version.nil?
        fail ArgumentError, "Missing the required parameter 'document_version' when calling DocumentsApi.get_document_version"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsApi.get_document_version"
      end
      # resource path
      local_var_path = '/documents/{document_id}/versions/{document_version}'.sub('{' + 'document_version' + '}', CGI.escape(document_version.to_s)).sub('{' + 'document_id' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DocumentsApi.get_document_version",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#get_document_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get document contents by version
    # Returns the bytes of the requested document.
    # @param document_version [Integer] The document version.
    # @param document_id [String] The unique identifier of the document.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_document_version_contents(document_version, document_id, opts = {})
      data, _status_code, _headers = get_document_version_contents_with_http_info(document_version, document_id, opts)
      data
    end

    # Get document contents by version
    # Returns the bytes of the requested document.
    # @param document_version [Integer] The document version.
    # @param document_id [String] The unique identifier of the document.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_document_version_contents_with_http_info(document_version, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.get_document_version_contents ...'
      end
      # verify the required parameter 'document_version' is set
      if @api_client.config.client_side_validation && document_version.nil?
        fail ArgumentError, "Missing the required parameter 'document_version' when calling DocumentsApi.get_document_version_contents"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsApi.get_document_version_contents"
      end
      # resource path
      local_var_path = '/documents/{document_id}/versions/{document_version}/contents'.sub('{' + 'document_version' + '}', CGI.escape(document_version.to_s)).sub('{' + 'document_id' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DocumentsApi.get_document_version_contents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#get_document_version_contents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List documents
    # Returns a paginated list of documents (metadata only, not contents).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :related_resource_id Return documents that are related to resources with the specified ID
    # @option opts [Array<DocumentType>] :type The type of documents. Multiple types can be provided as a comma-separated list.
    # @option opts [String] :encryption Whether the file should be encrypted and access restricted, e.g. if the file contains PII
    # @option opts [String] :page_token 
    # @option opts [Array<String>] :id Unique resource identifier
    # @option opts [RelatedResourceType] :related_resource_type Return documents that are related to resources of the specified type
    # @option opts [Integer] :limit  (default to 100)
    # @return [DocumentList]
    def list_documents(opts = {})
      data, _status_code, _headers = list_documents_with_http_info(opts)
      data
    end

    # List documents
    # Returns a paginated list of documents (metadata only, not contents).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :related_resource_id Return documents that are related to resources with the specified ID
    # @option opts [Array<DocumentType>] :type The type of documents. Multiple types can be provided as a comma-separated list.
    # @option opts [String] :encryption Whether the file should be encrypted and access restricted, e.g. if the file contains PII
    # @option opts [String] :page_token 
    # @option opts [Array<String>] :id Unique resource identifier
    # @option opts [RelatedResourceType] :related_resource_type Return documents that are related to resources of the specified type
    # @option opts [Integer] :limit  (default to 100)
    # @return [Array<(DocumentList, Integer, Hash)>] DocumentList data, response status code and response headers
    def list_documents_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.list_documents ...'
      end
      allowable_values = ["NOT_REQUIRED", "REQUIRED"]
      if @api_client.config.client_side_validation && opts[:'encryption'] && !allowable_values.include?(opts[:'encryption'])
        fail ArgumentError, "invalid value for \"encryption\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DocumentsApi.list_documents, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/documents'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'related_resource_id'] = opts[:'related_resource_id'] if !opts[:'related_resource_id'].nil?
      query_params[:'type'] = @api_client.build_collection_param(opts[:'type'], :csv) if !opts[:'type'].nil?
      query_params[:'encryption'] = opts[:'encryption'] if !opts[:'encryption'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'id'] = @api_client.build_collection_param(opts[:'id'], :csv) if !opts[:'id'].nil?
      query_params[:'related_resource_type'] = opts[:'related_resource_type'] if !opts[:'related_resource_type'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DocumentsApi.list_documents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#list_documents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a document
    # Update attributes of the latest document version.
    # @param document_id [String] The unique identifier of the document.
    # @param document_patch [DocumentPatch] 
    # @param [Hash] opts the optional parameters
    # @return [DocumentResponse]
    def update_document(document_id, document_patch, opts = {})
      data, _status_code, _headers = update_document_with_http_info(document_id, document_patch, opts)
      data
    end

    # Update a document
    # Update attributes of the latest document version.
    # @param document_id [String] The unique identifier of the document.
    # @param document_patch [DocumentPatch] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocumentResponse, Integer, Hash)>] DocumentResponse data, response status code and response headers
    def update_document_with_http_info(document_id, document_patch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.update_document ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsApi.update_document"
      end
      # verify the required parameter 'document_patch' is set
      if @api_client.config.client_side_validation && document_patch.nil?
        fail ArgumentError, "Missing the required parameter 'document_patch' when calling DocumentsApi.update_document"
      end
      # resource path
      local_var_path = '/documents/{document_id}'.sub('{' + 'document_id' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(document_patch)

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DocumentsApi.update_document",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#update_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
