=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.139.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Synctera
  class AddressesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a address
    # Create a address.
    # @param address_post [AddressPost] Address to create
    # @param [Hash] opts the optional parameters
    # @return [AddressResponse]
    def create_address(address_post, opts = {})
      data, _status_code, _headers = create_address_with_http_info(address_post, opts)
      data
    end

    # Create a address
    # Create a address.
    # @param address_post [AddressPost] Address to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddressResponse, Integer, Hash)>] AddressResponse data, response status code and response headers
    def create_address_with_http_info(address_post, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressesApi.create_address ...'
      end
      # verify the required parameter 'address_post' is set
      if @api_client.config.client_side_validation && address_post.nil?
        fail ArgumentError, "Missing the required parameter 'address_post' when calling AddressesApi.create_address"
      end
      # resource path
      local_var_path = '/addresses'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(address_post)

      # return_type
      return_type = opts[:debug_return_type] || 'AddressResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AddressesApi.create_address",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressesApi#create_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get address information by id
    # Get address information by its unique identifier
    # @param address_id [String] ID of the address
    # @param [Hash] opts the optional parameters
    # @return [AddressResponse]
    def get_address(address_id, opts = {})
      data, _status_code, _headers = get_address_with_http_info(address_id, opts)
      data
    end

    # Get address information by id
    # Get address information by its unique identifier
    # @param address_id [String] ID of the address
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddressResponse, Integer, Hash)>] AddressResponse data, response status code and response headers
    def get_address_with_http_info(address_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressesApi.get_address ...'
      end
      # verify the required parameter 'address_id' is set
      if @api_client.config.client_side_validation && address_id.nil?
        fail ArgumentError, "Missing the required parameter 'address_id' when calling AddressesApi.get_address"
      end
      # resource path
      local_var_path = '/addresses/{address_id}'.sub('{' + 'address_id' + '}', CGI.escape(address_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AddressResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AddressesApi.get_address",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressesApi#get_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Addresses
    # @param [Hash] opts the optional parameters
    # @option opts [String] :country Country code. 
    # @option opts [String] :business_id The unique identifier for business
    # @option opts [String] :customer_id The unique identifier for customer
    # @option opts [String] :page_token 
    # @option opts [Boolean] :is_active 
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [String] :address_type Specifies the address type. 
    # @return [AddressesList]
    def list_addresses(opts = {})
      data, _status_code, _headers = list_addresses_with_http_info(opts)
      data
    end

    # List Addresses
    # @param [Hash] opts the optional parameters
    # @option opts [String] :country Country code. 
    # @option opts [String] :business_id The unique identifier for business
    # @option opts [String] :customer_id The unique identifier for customer
    # @option opts [String] :page_token 
    # @option opts [Boolean] :is_active 
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [String] :address_type Specifies the address type. 
    # @return [Array<(AddressesList, Integer, Hash)>] AddressesList data, response status code and response headers
    def list_addresses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressesApi.list_addresses ...'
      end
      pattern = Regexp.new(/^[A-Z]{2,3}$/)
      if @api_client.config.client_side_validation && !opts[:'country'].nil? && opts[:'country'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"country\"]' when calling AddressesApi.list_addresses, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AddressesApi.list_addresses, must be greater than or equal to 1.'
      end

      allowable_values = ["BILLING", "LEGAL", "OTHER", "SHIPPING"]
      if @api_client.config.client_side_validation && opts[:'address_type'] && !allowable_values.include?(opts[:'address_type'])
        fail ArgumentError, "invalid value for \"address_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/addresses'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'country'] = opts[:'country'] if !opts[:'country'].nil?
      query_params[:'business_id'] = opts[:'business_id'] if !opts[:'business_id'].nil?
      query_params[:'customer_id'] = opts[:'customer_id'] if !opts[:'customer_id'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'is_active'] = opts[:'is_active'] if !opts[:'is_active'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'Address type'] = opts[:'address_type'] if !opts[:'address_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AddressesList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AddressesApi.list_addresses",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressesApi#list_addresses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update address information by id
    # Update address 
    # @param address_id [String] ID of the address
    # @param body [AddressBase] Address patch details
    # @param [Hash] opts the optional parameters
    # @return [AddressResponse]
    def update_address(address_id, body, opts = {})
      data, _status_code, _headers = update_address_with_http_info(address_id, body, opts)
      data
    end

    # Update address information by id
    # Update address 
    # @param address_id [String] ID of the address
    # @param body [AddressBase] Address patch details
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddressResponse, Integer, Hash)>] AddressResponse data, response status code and response headers
    def update_address_with_http_info(address_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressesApi.update_address ...'
      end
      # verify the required parameter 'address_id' is set
      if @api_client.config.client_side_validation && address_id.nil?
        fail ArgumentError, "Missing the required parameter 'address_id' when calling AddressesApi.update_address"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AddressesApi.update_address"
      end
      # resource path
      local_var_path = '/addresses/{address_id}'.sub('{' + 'address_id' + '}', CGI.escape(address_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AddressResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AddressesApi.update_address",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressesApi#update_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
