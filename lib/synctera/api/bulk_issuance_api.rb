=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 1.82.0

Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'cgi'

module Synctera
  class BulkIssuanceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a bulk order configuration
    # Bulk card orders can be configured to ship cards in bulk.  In order to create a bulk order the associated card product needs to be configured for bulk issuance (Refer to Card Product `bulk_shipping_enabled`).  Once a Card Product is configured a bulk order can be created.   Cards are dynamically added to the bulk order using the `bulk_order_config_id` (Refer to Issue Card `bulk_order_config_id`)  and will be shipped based on the `bulk_issuance_policy`.   Bulk orders configured with `AUTO` will be fulfilled daily at 9:30PM PST, all cards that have been added to the bulk order prior to the cutoff  will be shipped in the next bulk order, any subsequent cards will be added to the next days order. Bulk orders configured with `MANUAL`  will be shipped when an integrator sends a fulfillment request (Refer to Bulk Issuance Fulfill). 
    # @param bulk_issuance_request [BulkIssuanceRequest] Bulk issuance configuration
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [BulkIssuanceResponse]
    def create_bulk_order_config(bulk_issuance_request, opts = {})
      data, _status_code, _headers = create_bulk_order_config_with_http_info(bulk_issuance_request, opts)
      data
    end

    # Create a bulk order configuration
    # Bulk card orders can be configured to ship cards in bulk.  In order to create a bulk order the associated card product needs to be configured for bulk issuance (Refer to Card Product &#x60;bulk_shipping_enabled&#x60;).  Once a Card Product is configured a bulk order can be created.   Cards are dynamically added to the bulk order using the &#x60;bulk_order_config_id&#x60; (Refer to Issue Card &#x60;bulk_order_config_id&#x60;)  and will be shipped based on the &#x60;bulk_issuance_policy&#x60;.   Bulk orders configured with &#x60;AUTO&#x60; will be fulfilled daily at 9:30PM PST, all cards that have been added to the bulk order prior to the cutoff  will be shipped in the next bulk order, any subsequent cards will be added to the next days order. Bulk orders configured with &#x60;MANUAL&#x60;  will be shipped when an integrator sends a fulfillment request (Refer to Bulk Issuance Fulfill). 
    # @param bulk_issuance_request [BulkIssuanceRequest] Bulk issuance configuration
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(BulkIssuanceResponse, Integer, Hash)>] BulkIssuanceResponse data, response status code and response headers
    def create_bulk_order_config_with_http_info(bulk_issuance_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BulkIssuanceApi.create_bulk_order_config ...'
      end
      # verify the required parameter 'bulk_issuance_request' is set
      if @api_client.config.client_side_validation && bulk_issuance_request.nil?
        fail ArgumentError, "Missing the required parameter 'bulk_issuance_request' when calling BulkIssuanceApi.create_bulk_order_config"
      end
      # resource path
      local_var_path = '/cards/bulk_issuance'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(bulk_issuance_request)

      # return_type
      return_type = opts[:debug_return_type] || 'BulkIssuanceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"BulkIssuanceApi.create_bulk_order_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkIssuanceApi#create_bulk_order_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fulfill a bulk order
    # Bulk orders configured with a `MANUAL` bulk issuance policy will be shipped when a fulfillment request is made (Refer to Bulk Orders `bulk_issuance_policy`).  All cards that have been created with the corresponding `bulk_order_config_id` since the previous fulfillment, will be included in the bulk order. 
    # @param bulk_order_config_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [nil]
    def fulfill_bulk_order(bulk_order_config_id, opts = {})
      fulfill_bulk_order_with_http_info(bulk_order_config_id, opts)
      nil
    end

    # Fulfill a bulk order
    # Bulk orders configured with a &#x60;MANUAL&#x60; bulk issuance policy will be shipped when a fulfillment request is made (Refer to Bulk Orders &#x60;bulk_issuance_policy&#x60;).  All cards that have been created with the corresponding &#x60;bulk_order_config_id&#x60; since the previous fulfillment, will be included in the bulk order. 
    # @param bulk_order_config_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def fulfill_bulk_order_with_http_info(bulk_order_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BulkIssuanceApi.fulfill_bulk_order ...'
      end
      # verify the required parameter 'bulk_order_config_id' is set
      if @api_client.config.client_side_validation && bulk_order_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'bulk_order_config_id' when calling BulkIssuanceApi.fulfill_bulk_order"
      end
      # resource path
      local_var_path = '/cards/bulk_issuance/{bulk_order_config_id}/fulfill'.sub('{' + 'bulk_order_config_id' + '}', CGI.escape(bulk_order_config_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"BulkIssuanceApi.fulfill_bulk_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkIssuanceApi#fulfill_bulk_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get bulk order configuration
    # Get the details about a bulk order configuration. 
    # @param bulk_order_config_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [BulkIssuanceResponse]
    def get_bulk_order_config(bulk_order_config_id, opts = {})
      data, _status_code, _headers = get_bulk_order_config_with_http_info(bulk_order_config_id, opts)
      data
    end

    # Get bulk order configuration
    # Get the details about a bulk order configuration. 
    # @param bulk_order_config_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BulkIssuanceResponse, Integer, Hash)>] BulkIssuanceResponse data, response status code and response headers
    def get_bulk_order_config_with_http_info(bulk_order_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BulkIssuanceApi.get_bulk_order_config ...'
      end
      # verify the required parameter 'bulk_order_config_id' is set
      if @api_client.config.client_side_validation && bulk_order_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'bulk_order_config_id' when calling BulkIssuanceApi.get_bulk_order_config"
      end
      # resource path
      local_var_path = '/cards/bulk_issuance/{bulk_order_config_id}'.sub('{' + 'bulk_order_config_id' + '}', CGI.escape(bulk_order_config_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BulkIssuanceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"BulkIssuanceApi.get_bulk_order_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkIssuanceApi#get_bulk_order_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Bulk Order Configurations
    # List bulk order configurations matching query parameters 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_token 
    # @option opts [String] :card_product_id 
    # @option opts [Array<String>] :sort_by Specifies the sort order for the returned bulk order configurations. 
    # @option opts [Integer] :limit  (default to 100)
    # @return [BulkIssuanceListResponse]
    def list_bulk_order_configs(opts = {})
      data, _status_code, _headers = list_bulk_order_configs_with_http_info(opts)
      data
    end

    # List Bulk Order Configurations
    # List bulk order configurations matching query parameters 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_token 
    # @option opts [String] :card_product_id 
    # @option opts [Array<String>] :sort_by Specifies the sort order for the returned bulk order configurations. 
    # @option opts [Integer] :limit  (default to 100)
    # @return [Array<(BulkIssuanceListResponse, Integer, Hash)>] BulkIssuanceListResponse data, response status code and response headers
    def list_bulk_order_configs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BulkIssuanceApi.list_bulk_order_configs ...'
      end
      allowable_values = ["creation_time:asc", "creation_time:desc"]
      if @api_client.config.client_side_validation && opts[:'sort_by'] && !opts[:'sort_by'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"sort_by\", must include one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling BulkIssuanceApi.list_bulk_order_configs, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/cards/bulk_issuance'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'card_product_id'] = opts[:'card_product_id'] if !opts[:'card_product_id'].nil?
      query_params[:'sort_by'] = @api_client.build_collection_param(opts[:'sort_by'], :csv) if !opts[:'sort_by'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BulkIssuanceListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"BulkIssuanceApi.list_bulk_order_configs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkIssuanceApi#list_bulk_order_configs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
