=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.136.0

Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module Synctera
  class DisclosuresDeprecatedApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a Disclosure
    # Disclosures to be made to customers 
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param disclosure1 [Disclosure1] Disclosure to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Disclosure1]
    def create_disclosure1(customer_id, disclosure1, opts = {})
      data, _status_code, _headers = create_disclosure1_with_http_info(customer_id, disclosure1, opts)
      data
    end

    # Create a Disclosure
    # Disclosures to be made to customers 
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param disclosure1 [Disclosure1] Disclosure to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(Disclosure1, Integer, Hash)>] Disclosure1 data, response status code and response headers
    def create_disclosure1_with_http_info(customer_id, disclosure1, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DisclosuresDeprecatedApi.create_disclosure1 ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling DisclosuresDeprecatedApi.create_disclosure1"
      end
      # verify the required parameter 'disclosure1' is set
      if @api_client.config.client_side_validation && disclosure1.nil?
        fail ArgumentError, "Missing the required parameter 'disclosure1' when calling DisclosuresDeprecatedApi.create_disclosure1"
      end
      # resource path
      local_var_path = '/customers/{customer_id}/disclosures'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(disclosure1)

      # return_type
      return_type = opts[:debug_return_type] || 'Disclosure1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DisclosuresDeprecatedApi.create_disclosure1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DisclosuresDeprecatedApi#create_disclosure1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Disclosures
    # Retrieves paginated list of disclosures associated with the authorized requester
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @return [DisclosureResponse]
    def list_disclosures1(customer_id, opts = {})
      data, _status_code, _headers = list_disclosures1_with_http_info(customer_id, opts)
      data
    end

    # List Disclosures
    # Retrieves paginated list of disclosures associated with the authorized requester
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @return [Array<(DisclosureResponse, Integer, Hash)>] DisclosureResponse data, response status code and response headers
    def list_disclosures1_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DisclosuresDeprecatedApi.list_disclosures1 ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling DisclosuresDeprecatedApi.list_disclosures1"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DisclosuresDeprecatedApi.list_disclosures1, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/customers/{customer_id}/disclosures'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DisclosureResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DisclosuresDeprecatedApi.list_disclosures1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DisclosuresDeprecatedApi#list_disclosures1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
