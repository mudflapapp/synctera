=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 1.82.0

Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'cgi'

module Synctera
  class RewardsBetaApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a reward
    # Create a reward  > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param reward_post [RewardPost] Reward to create
    # @param [Hash] opts the optional parameters
    # @return [RewardResponse]
    def create_reward(reward_post, opts = {})
      data, _status_code, _headers = create_reward_with_http_info(reward_post, opts)
      data
    end

    # Create a reward
    # Create a reward  &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param reward_post [RewardPost] Reward to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(RewardResponse, Integer, Hash)>] RewardResponse data, response status code and response headers
    def create_reward_with_http_info(reward_post, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RewardsBetaApi.create_reward ...'
      end
      # verify the required parameter 'reward_post' is set
      if @api_client.config.client_side_validation && reward_post.nil?
        fail ArgumentError, "Missing the required parameter 'reward_post' when calling RewardsBetaApi.create_reward"
      end
      # resource path
      local_var_path = '/rewards'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reward_post)

      # return_type
      return_type = opts[:debug_return_type] || 'RewardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RewardsBetaApi.create_reward",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RewardsBetaApi#create_reward\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a reward template
    # > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.  Create a reward template A reward template defines the properties of a reward that a fintech wishes to use to easily charge their customers. The fintech can then create reward templates for different amounts or categories of rewards that represent different instances of services or charges 
    # @param reward_template_post [RewardTemplatePost] Reward to create  &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param [Hash] opts the optional parameters
    # @return [RewardTemplateResponse]
    def create_reward_template(reward_template_post, opts = {})
      data, _status_code, _headers = create_reward_template_with_http_info(reward_template_post, opts)
      data
    end

    # Create a reward template
    # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.  Create a reward template A reward template defines the properties of a reward that a fintech wishes to use to easily charge their customers. The fintech can then create reward templates for different amounts or categories of rewards that represent different instances of services or charges 
    # @param reward_template_post [RewardTemplatePost] Reward to create  &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RewardTemplateResponse, Integer, Hash)>] RewardTemplateResponse data, response status code and response headers
    def create_reward_template_with_http_info(reward_template_post, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RewardsBetaApi.create_reward_template ...'
      end
      # verify the required parameter 'reward_template_post' is set
      if @api_client.config.client_side_validation && reward_template_post.nil?
        fail ArgumentError, "Missing the required parameter 'reward_template_post' when calling RewardsBetaApi.create_reward_template"
      end
      # resource path
      local_var_path = '/reward_templates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reward_template_post)

      # return_type
      return_type = opts[:debug_return_type] || 'RewardTemplateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RewardsBetaApi.create_reward_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RewardsBetaApi#create_reward_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Reward
    # Get a reward by ID.  > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param reward_id [String] The unique identifier of a reward
    # @param [Hash] opts the optional parameters
    # @return [RewardResponse]
    def get_reward(reward_id, opts = {})
      data, _status_code, _headers = get_reward_with_http_info(reward_id, opts)
      data
    end

    # Get Reward
    # Get a reward by ID.  &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param reward_id [String] The unique identifier of a reward
    # @param [Hash] opts the optional parameters
    # @return [Array<(RewardResponse, Integer, Hash)>] RewardResponse data, response status code and response headers
    def get_reward_with_http_info(reward_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RewardsBetaApi.get_reward ...'
      end
      # verify the required parameter 'reward_id' is set
      if @api_client.config.client_side_validation && reward_id.nil?
        fail ArgumentError, "Missing the required parameter 'reward_id' when calling RewardsBetaApi.get_reward"
      end
      # resource path
      local_var_path = '/rewards/{reward_id}'.sub('{' + 'reward_id' + '}', CGI.escape(reward_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RewardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RewardsBetaApi.get_reward",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RewardsBetaApi#get_reward\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Reward template
    # Get a reward template by ID.  > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param reward_template_id [String] The unique identifier of a reward template
    # @param [Hash] opts the optional parameters
    # @return [RewardTemplateResponse]
    def get_reward_template(reward_template_id, opts = {})
      data, _status_code, _headers = get_reward_template_with_http_info(reward_template_id, opts)
      data
    end

    # Get a Reward template
    # Get a reward template by ID.  &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param reward_template_id [String] The unique identifier of a reward template
    # @param [Hash] opts the optional parameters
    # @return [Array<(RewardTemplateResponse, Integer, Hash)>] RewardTemplateResponse data, response status code and response headers
    def get_reward_template_with_http_info(reward_template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RewardsBetaApi.get_reward_template ...'
      end
      # verify the required parameter 'reward_template_id' is set
      if @api_client.config.client_side_validation && reward_template_id.nil?
        fail ArgumentError, "Missing the required parameter 'reward_template_id' when calling RewardsBetaApi.get_reward_template"
      end
      # resource path
      local_var_path = '/reward_templates/{reward_template_id}'.sub('{' + 'reward_template_id' + '}', CGI.escape(reward_template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RewardTemplateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RewardsBetaApi.get_reward_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RewardsBetaApi#get_reward_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List rewards
    # Get paginated list of rewards  > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :start_time Return rewards created at or after this time.
    # @option opts [String] :description Return rewards with the specified description.
    # @option opts [Array<String>] :id Return the reward with the specified id. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [Time] :end_time Return rewards created before this time.
    # @option opts [String] :page_token 
    # @option opts [Array<String>] :reward_template_id Return rewards resources with a reward template of the specified id. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [RewardSubtype] :subtype 
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [Array<String>] :account_id Return rewards for the specified account.
    # @return [RewardList]
    def list_rewards(opts = {})
      data, _status_code, _headers = list_rewards_with_http_info(opts)
      data
    end

    # List rewards
    # Get paginated list of rewards  &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :start_time Return rewards created at or after this time.
    # @option opts [String] :description Return rewards with the specified description.
    # @option opts [Array<String>] :id Return the reward with the specified id. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [Time] :end_time Return rewards created before this time.
    # @option opts [String] :page_token 
    # @option opts [Array<String>] :reward_template_id Return rewards resources with a reward template of the specified id. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [RewardSubtype] :subtype 
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [Array<String>] :account_id Return rewards for the specified account.
    # @return [Array<(RewardList, Integer, Hash)>] RewardList data, response status code and response headers
    def list_rewards_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RewardsBetaApi.list_rewards ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling RewardsBetaApi.list_rewards, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/rewards'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_time'] = opts[:'start_time'] if !opts[:'start_time'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'id'] = @api_client.build_collection_param(opts[:'id'], :csv) if !opts[:'id'].nil?
      query_params[:'end_time'] = opts[:'end_time'] if !opts[:'end_time'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'reward_template_id'] = @api_client.build_collection_param(opts[:'reward_template_id'], :csv) if !opts[:'reward_template_id'].nil?
      query_params[:'subtype'] = opts[:'subtype'] if !opts[:'subtype'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'account_id'] = @api_client.build_collection_param(opts[:'account_id'], :multi) if !opts[:'account_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RewardList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RewardsBetaApi.list_rewards",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RewardsBetaApi#list_rewards\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List reward templates
    # > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.  Get paginated list of reward templates 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort_by Specifies the sort order for the returned reward templates. 
    # @option opts [String] :description Return reward templates with the specified description. A * character can be used as a wildcard to match any characters.
    # @option opts [String] :page_token 
    # @option opts [Array<String>] :id Return reward templates with the specified id. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [Boolean] :is_enabled Return reward templates with the specified is_enabled flag.
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [RewardSubtype] :subtype 
    # @return [RewardTemplateList]
    def list_rewardtemplates(opts = {})
      data, _status_code, _headers = list_rewardtemplates_with_http_info(opts)
      data
    end

    # List reward templates
    # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.  Get paginated list of reward templates 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort_by Specifies the sort order for the returned reward templates. 
    # @option opts [String] :description Return reward templates with the specified description. A * character can be used as a wildcard to match any characters.
    # @option opts [String] :page_token 
    # @option opts [Array<String>] :id Return reward templates with the specified id. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [Boolean] :is_enabled Return reward templates with the specified is_enabled flag.
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [RewardSubtype] :subtype 
    # @return [Array<(RewardTemplateList, Integer, Hash)>] RewardTemplateList data, response status code and response headers
    def list_rewardtemplates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RewardsBetaApi.list_rewardtemplates ...'
      end
      allowable_values = ["amount:asc", "amount:desc", "description:asc", "description:desc", "is_enabled:asc", "is_enabled:desc", "last_updated_time:asc", "last_updated_time:desc"]
      if @api_client.config.client_side_validation && opts[:'sort_by'] && !opts[:'sort_by'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"sort_by\", must include one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling RewardsBetaApi.list_rewardtemplates, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/reward_templates'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort_by'] = @api_client.build_collection_param(opts[:'sort_by'], :csv) if !opts[:'sort_by'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'id'] = @api_client.build_collection_param(opts[:'id'], :csv) if !opts[:'id'].nil?
      query_params[:'is_enabled'] = opts[:'is_enabled'] if !opts[:'is_enabled'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'subtype'] = opts[:'subtype'] if !opts[:'subtype'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RewardTemplateList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RewardsBetaApi.list_rewardtemplates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RewardsBetaApi#list_rewardtemplates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patch Reward Template
    # Update a reward template by ID.  > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param reward_template_id [String] The unique identifier of a reward template
    # @param reward_template_patch [RewardTemplatePatch] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [RewardTemplateResponse]
    def patch_reward_template(reward_template_id, reward_template_patch, opts = {})
      data, _status_code, _headers = patch_reward_template_with_http_info(reward_template_id, reward_template_patch, opts)
      data
    end

    # Patch Reward Template
    # Update a reward template by ID.  &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param reward_template_id [String] The unique identifier of a reward template
    # @param reward_template_patch [RewardTemplatePatch] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(RewardTemplateResponse, Integer, Hash)>] RewardTemplateResponse data, response status code and response headers
    def patch_reward_template_with_http_info(reward_template_id, reward_template_patch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RewardsBetaApi.patch_reward_template ...'
      end
      # verify the required parameter 'reward_template_id' is set
      if @api_client.config.client_side_validation && reward_template_id.nil?
        fail ArgumentError, "Missing the required parameter 'reward_template_id' when calling RewardsBetaApi.patch_reward_template"
      end
      # verify the required parameter 'reward_template_patch' is set
      if @api_client.config.client_side_validation && reward_template_patch.nil?
        fail ArgumentError, "Missing the required parameter 'reward_template_patch' when calling RewardsBetaApi.patch_reward_template"
      end
      # resource path
      local_var_path = '/reward_templates/{reward_template_id}'.sub('{' + 'reward_template_id' + '}', CGI.escape(reward_template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reward_template_patch)

      # return_type
      return_type = opts[:debug_return_type] || 'RewardTemplateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RewardsBetaApi.patch_reward_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RewardsBetaApi#patch_reward_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reverse a reward
    # Reverse the reward by creating a reversal transaction.  > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param reward_id [String] The unique identifier of a reward
    # @param reward_reverse_post [RewardReversePost] Reward reversal properties
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [RewardResponse]
    def reverse_reward(reward_id, reward_reverse_post, opts = {})
      data, _status_code, _headers = reverse_reward_with_http_info(reward_id, reward_reverse_post, opts)
      data
    end

    # Reverse a reward
    # Reverse the reward by creating a reversal transaction.  &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param reward_id [String] The unique identifier of a reward
    # @param reward_reverse_post [RewardReversePost] Reward reversal properties
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(RewardResponse, Integer, Hash)>] RewardResponse data, response status code and response headers
    def reverse_reward_with_http_info(reward_id, reward_reverse_post, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RewardsBetaApi.reverse_reward ...'
      end
      # verify the required parameter 'reward_id' is set
      if @api_client.config.client_side_validation && reward_id.nil?
        fail ArgumentError, "Missing the required parameter 'reward_id' when calling RewardsBetaApi.reverse_reward"
      end
      # verify the required parameter 'reward_reverse_post' is set
      if @api_client.config.client_side_validation && reward_reverse_post.nil?
        fail ArgumentError, "Missing the required parameter 'reward_reverse_post' when calling RewardsBetaApi.reverse_reward"
      end
      # resource path
      local_var_path = '/rewards/{reward_id}/reverse'.sub('{' + 'reward_id' + '}', CGI.escape(reward_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reward_reverse_post)

      # return_type
      return_type = opts[:debug_return_type] || 'RewardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RewardsBetaApi.reverse_reward",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RewardsBetaApi#reverse_reward\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
