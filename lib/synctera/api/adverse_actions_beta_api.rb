=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 1.82.0

Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'cgi'

module Synctera
  class AdverseActionsBetaApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an adverse action notice
    # An adverse action notice is required for Reg B and FCRA when an application to grant or increase credit is refused; a counteroffer is made; an credit account is terminated; the terms on the account has an unfavorable change.  
    # @param adverse_action [AdverseAction] Adverse action notice to be created.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [AdverseActionResponse]
    def create_adverse_action(adverse_action, opts = {})
      data, _status_code, _headers = create_adverse_action_with_http_info(adverse_action, opts)
      data
    end

    # Create an adverse action notice
    # An adverse action notice is required for Reg B and FCRA when an application to grant or increase credit is refused; a counteroffer is made; an credit account is terminated; the terms on the account has an unfavorable change.  
    # @param adverse_action [AdverseAction] Adverse action notice to be created.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(AdverseActionResponse, Integer, Hash)>] AdverseActionResponse data, response status code and response headers
    def create_adverse_action_with_http_info(adverse_action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdverseActionsBetaApi.create_adverse_action ...'
      end
      # verify the required parameter 'adverse_action' is set
      if @api_client.config.client_side_validation && adverse_action.nil?
        fail ArgumentError, "Missing the required parameter 'adverse_action' when calling AdverseActionsBetaApi.create_adverse_action"
      end
      # resource path
      local_var_path = '/adverse_actions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(adverse_action)

      # return_type
      return_type = opts[:debug_return_type] || 'AdverseActionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AdverseActionsBetaApi.create_adverse_action",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdverseActionsBetaApi#create_adverse_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an adverse action notice
    # @param adverse_action_id [String] Unique identifier for adverse action notice.
    # @param [Hash] opts the optional parameters
    # @return [AdverseActionResponse]
    def get_adverse_action(adverse_action_id, opts = {})
      data, _status_code, _headers = get_adverse_action_with_http_info(adverse_action_id, opts)
      data
    end

    # Retrieve an adverse action notice
    # @param adverse_action_id [String] Unique identifier for adverse action notice.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdverseActionResponse, Integer, Hash)>] AdverseActionResponse data, response status code and response headers
    def get_adverse_action_with_http_info(adverse_action_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdverseActionsBetaApi.get_adverse_action ...'
      end
      # verify the required parameter 'adverse_action_id' is set
      if @api_client.config.client_side_validation && adverse_action_id.nil?
        fail ArgumentError, "Missing the required parameter 'adverse_action_id' when calling AdverseActionsBetaApi.get_adverse_action"
      end
      # resource path
      local_var_path = '/adverse_actions/{adverse_action_id}'.sub('{' + 'adverse_action_id' + '}', CGI.escape(adverse_action_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdverseActionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AdverseActionsBetaApi.get_adverse_action",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdverseActionsBetaApi#get_adverse_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List adverse action notices
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :related_resource_id Unique identifier for the related resource. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [Array<String>] :id return results with these comma-separated IDs
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @return [AdverseActionList]
    def list_adverse_actions(opts = {})
      data, _status_code, _headers = list_adverse_actions_with_http_info(opts)
      data
    end

    # List adverse action notices
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :related_resource_id Unique identifier for the related resource. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [Array<String>] :id return results with these comma-separated IDs
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @return [Array<(AdverseActionList, Integer, Hash)>] AdverseActionList data, response status code and response headers
    def list_adverse_actions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdverseActionsBetaApi.list_adverse_actions ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AdverseActionsBetaApi.list_adverse_actions, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/adverse_actions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'related_resource_id'] = @api_client.build_collection_param(opts[:'related_resource_id'], :csv) if !opts[:'related_resource_id'].nil?
      query_params[:'id'] = @api_client.build_collection_param(opts[:'id'], :csv) if !opts[:'id'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdverseActionList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AdverseActionsBetaApi.list_adverse_actions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdverseActionsBetaApi#list_adverse_actions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
