=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.139.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Synctera
  class AccountsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an account
    # Creates an account copying values from account template into the account resource.  Any fields defined as part of account creation will overwrite the ones provided from the account template.  Required fields:   - relationships 
    # @param account_creation [AccountCreation] Account to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [AccountGenericResponse]
    def create_account(account_creation, opts = {})
      data, _status_code, _headers = create_account_with_http_info(account_creation, opts)
      data
    end

    # Create an account
    # Creates an account copying values from account template into the account resource.  Any fields defined as part of account creation will overwrite the ones provided from the account template.  Required fields:   - relationships 
    # @param account_creation [AccountCreation] Account to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(AccountGenericResponse, Integer, Hash)>] AccountGenericResponse data, response status code and response headers
    def create_account_with_http_info(account_creation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.create_account ...'
      end
      # verify the required parameter 'account_creation' is set
      if @api_client.config.client_side_validation && account_creation.nil?
        fail ArgumentError, "Missing the required parameter 'account_creation' when calling AccountsApi.create_account"
      end
      # resource path
      local_var_path = '/accounts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(account_creation)

      # return_type
      return_type = opts[:debug_return_type] || 'AccountGenericResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.create_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#create_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create account relationship
    # Add a customer to an account
    # @param account_id [String] Unique identifier for the account.
    # @param account_relationship [AccountRelationship] Account relationship object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [RelationshipResponse]
    def create_account_relationship(account_id, account_relationship, opts = {})
      data, _status_code, _headers = create_account_relationship_with_http_info(account_id, account_relationship, opts)
      data
    end

    # Create account relationship
    # Add a customer to an account
    # @param account_id [String] Unique identifier for the account.
    # @param account_relationship [AccountRelationship] Account relationship object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(RelationshipResponse, Integer, Hash)>] RelationshipResponse data, response status code and response headers
    def create_account_relationship_with_http_info(account_id, account_relationship, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.create_account_relationship ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.create_account_relationship"
      end
      # verify the required parameter 'account_relationship' is set
      if @api_client.config.client_side_validation && account_relationship.nil?
        fail ArgumentError, "Missing the required parameter 'account_relationship' when calling AccountsApi.create_account_relationship"
      end
      # resource path
      local_var_path = '/accounts/{account_id}/relationships'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(account_relationship)

      # return_type
      return_type = opts[:debug_return_type] || 'RelationshipResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.create_account_relationship",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#create_account_relationship\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an account product
    # Create an account product. Rates cannot be nil or empty.  The FEE account product has been deprecated. Instead, use the /v1/fee_templates and /v1/fees endpoints. 
    # @param account_product [AccountProduct] Account product to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [AccountProduct]
    def create_account_resource_product(account_product, opts = {})
      data, _status_code, _headers = create_account_resource_product_with_http_info(account_product, opts)
      data
    end

    # Create an account product
    # Create an account product. Rates cannot be nil or empty.  The FEE account product has been deprecated. Instead, use the /v1/fee_templates and /v1/fees endpoints. 
    # @param account_product [AccountProduct] Account product to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(AccountProduct, Integer, Hash)>] AccountProduct data, response status code and response headers
    def create_account_resource_product_with_http_info(account_product, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.create_account_resource_product ...'
      end
      # verify the required parameter 'account_product' is set
      if @api_client.config.client_side_validation && account_product.nil?
        fail ArgumentError, "Missing the required parameter 'account_product' when calling AccountsApi.create_account_resource_product"
      end
      # resource path
      local_var_path = '/accounts/products'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(account_product)

      # return_type
      return_type = opts[:debug_return_type] || 'AccountProduct'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.create_account_resource_product",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#create_account_resource_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an account template
    # Create an account template. An account template is needed to create an account in a lead mode. 
    # @param account_template [AccountTemplate] Account template to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [AccountTemplateResponse]
    def create_account_template(account_template, opts = {})
      data, _status_code, _headers = create_account_template_with_http_info(account_template, opts)
      data
    end

    # Create an account template
    # Create an account template. An account template is needed to create an account in a lead mode. 
    # @param account_template [AccountTemplate] Account template to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(AccountTemplateResponse, Integer, Hash)>] AccountTemplateResponse data, response status code and response headers
    def create_account_template_with_http_info(account_template, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.create_account_template ...'
      end
      # verify the required parameter 'account_template' is set
      if @api_client.config.client_side_validation && account_template.nil?
        fail ArgumentError, "Missing the required parameter 'account_template' when calling AccountsApi.create_account_template"
      end
      # resource path
      local_var_path = '/accounts/templates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(account_template)

      # return_type
      return_type = opts[:debug_return_type] || 'AccountTemplateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.create_account_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#create_account_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete account relationship
    # Delete account relationship
    # @param relationship_id [String] Relationship ID of the account associate with the account entity
    # @param account_id [String] Unique identifier for the account.
    # @param [Hash] opts the optional parameters
    # @return [DeleteResponse]
    def delete_account_relationship(relationship_id, account_id, opts = {})
      data, _status_code, _headers = delete_account_relationship_with_http_info(relationship_id, account_id, opts)
      data
    end

    # Delete account relationship
    # Delete account relationship
    # @param relationship_id [String] Relationship ID of the account associate with the account entity
    # @param account_id [String] Unique identifier for the account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteResponse, Integer, Hash)>] DeleteResponse data, response status code and response headers
    def delete_account_relationship_with_http_info(relationship_id, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.delete_account_relationship ...'
      end
      # verify the required parameter 'relationship_id' is set
      if @api_client.config.client_side_validation && relationship_id.nil?
        fail ArgumentError, "Missing the required parameter 'relationship_id' when calling AccountsApi.delete_account_relationship"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.delete_account_relationship"
      end
      # resource path
      local_var_path = '/accounts/{account_id}/relationships/{relationship_id}'.sub('{' + 'relationship_id' + '}', CGI.escape(relationship_id.to_s)).sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.delete_account_relationship",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#delete_account_relationship\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete account template
    # Delete account template
    # @param template_id [String] Account Template ID
    # @param [Hash] opts the optional parameters
    # @return [DeleteResponse]
    def delete_account_template(template_id, opts = {})
      data, _status_code, _headers = delete_account_template_with_http_info(template_id, opts)
      data
    end

    # Delete account template
    # Delete account template
    # @param template_id [String] Account Template ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteResponse, Integer, Hash)>] DeleteResponse data, response status code and response headers
    def delete_account_template_with_http_info(template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.delete_account_template ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling AccountsApi.delete_account_template"
      end
      # resource path
      local_var_path = '/accounts/templates/{template_id}'.sub('{' + 'template_id' + '}', CGI.escape(template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.delete_account_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#delete_account_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get account
    # Get an account by account_id.  Note: GENERAL_LEDGER accounts are in Alpha status, and cannot yet be created. We may make breaking changes. 
    # @param account_id [String] Unique identifier for the account.
    # @param [Hash] opts the optional parameters
    # @return [AccountGenericResponse]
    def get_account(account_id, opts = {})
      data, _status_code, _headers = get_account_with_http_info(account_id, opts)
      data
    end

    # Get account
    # Get an account by account_id.  Note: GENERAL_LEDGER accounts are in Alpha status, and cannot yet be created. We may make breaking changes. 
    # @param account_id [String] Unique identifier for the account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountGenericResponse, Integer, Hash)>] AccountGenericResponse data, response status code and response headers
    def get_account_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_account"
      end
      # resource path
      local_var_path = '/accounts/{account_id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountGenericResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.get_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get account relationship
    # Get account relationship by ID
    # @param relationship_id [String] Relationship ID of the account associate with the account entity
    # @param account_id [String] Unique identifier for the account.
    # @param [Hash] opts the optional parameters
    # @return [RelationshipResponse]
    def get_account_relationship(relationship_id, account_id, opts = {})
      data, _status_code, _headers = get_account_relationship_with_http_info(relationship_id, account_id, opts)
      data
    end

    # Get account relationship
    # Get account relationship by ID
    # @param relationship_id [String] Relationship ID of the account associate with the account entity
    # @param account_id [String] Unique identifier for the account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RelationshipResponse, Integer, Hash)>] RelationshipResponse data, response status code and response headers
    def get_account_relationship_with_http_info(relationship_id, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_account_relationship ...'
      end
      # verify the required parameter 'relationship_id' is set
      if @api_client.config.client_side_validation && relationship_id.nil?
        fail ArgumentError, "Missing the required parameter 'relationship_id' when calling AccountsApi.get_account_relationship"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_account_relationship"
      end
      # resource path
      local_var_path = '/accounts/{account_id}/relationships/{relationship_id}'.sub('{' + 'relationship_id' + '}', CGI.escape(relationship_id.to_s)).sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RelationshipResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.get_account_relationship",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_account_relationship\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get account template
    # Get an account template
    # @param template_id [String] Account Template ID
    # @param [Hash] opts the optional parameters
    # @return [AccountTemplateResponse]
    def get_account_template(template_id, opts = {})
      data, _status_code, _headers = get_account_template_with_http_info(template_id, opts)
      data
    end

    # Get account template
    # Get an account template
    # @param template_id [String] Account Template ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountTemplateResponse, Integer, Hash)>] AccountTemplateResponse data, response status code and response headers
    def get_account_template_with_http_info(template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_account_template ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling AccountsApi.get_account_template"
      end
      # resource path
      local_var_path = '/accounts/templates/{template_id}'.sub('{' + 'template_id' + '}', CGI.escape(template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountTemplateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.get_account_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_account_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate account closure
    # Initiates an account closure. It immediately changes the account status to `IN_CLOSING`. Once the account status is `IN_CLOSING`, the account can no longer be used to create new transactions.  > 🚧 Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes. 
    # @param account_id [String] Unique identifier for the account.
    # @param account_closure [AccountClosure] Account to close
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [AccountGenericResponse]
    def initiate_account_closure(account_id, account_closure, opts = {})
      data, _status_code, _headers = initiate_account_closure_with_http_info(account_id, account_closure, opts)
      data
    end

    # Initiate account closure
    # Initiates an account closure. It immediately changes the account status to &#x60;IN_CLOSING&#x60;. Once the account status is &#x60;IN_CLOSING&#x60;, the account can no longer be used to create new transactions.  &gt; 🚧 Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes. 
    # @param account_id [String] Unique identifier for the account.
    # @param account_closure [AccountClosure] Account to close
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(AccountGenericResponse, Integer, Hash)>] AccountGenericResponse data, response status code and response headers
    def initiate_account_closure_with_http_info(account_id, account_closure, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.initiate_account_closure ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.initiate_account_closure"
      end
      # verify the required parameter 'account_closure' is set
      if @api_client.config.client_side_validation && account_closure.nil?
        fail ArgumentError, "Missing the required parameter 'account_closure' when calling AccountsApi.initiate_account_closure"
      end
      # resource path
      local_var_path = '/accounts/{account_id}/initiate_closure'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(account_closure)

      # return_type
      return_type = opts[:debug_return_type] || 'AccountGenericResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.initiate_account_closure",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#initiate_account_closure\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List account relationships
    # List all customers of an account
    # @param account_id [String] Unique identifier for the account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @return [RelationshipList]
    def list_account_relationship(account_id, opts = {})
      data, _status_code, _headers = list_account_relationship_with_http_info(account_id, opts)
      data
    end

    # List account relationships
    # List all customers of an account
    # @param account_id [String] Unique identifier for the account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @return [Array<(RelationshipList, Integer, Hash)>] RelationshipList data, response status code and response headers
    def list_account_relationship_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.list_account_relationship ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.list_account_relationship"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AccountsApi.list_account_relationship, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/accounts/{account_id}/relationships'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RelationshipList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.list_account_relationship",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#list_account_relationship\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List account products
    # List account products  The FEE account product has been deprecated. Instead, use the /v1/fee_templates and /v1/fees endpoints. 
    # @param product_type [String] Type of account product
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :end_date Date range filtering for type INTEREST. All rates in interest resource have to have valid_to earlier or equal to end_date.
    # @option opts [String] :page_token 
    # @option opts [String] :id ID of account product. Multiple IDs can be provided as a comma-separated list.
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [Date] :start_date Date range filtering for type INTEREST. All rates in interest resource have to have valid_from later or equal to start_date.
    # @return [AccountProductList]
    def list_account_resource_products(product_type, opts = {})
      data, _status_code, _headers = list_account_resource_products_with_http_info(product_type, opts)
      data
    end

    # List account products
    # List account products  The FEE account product has been deprecated. Instead, use the /v1/fee_templates and /v1/fees endpoints. 
    # @param product_type [String] Type of account product
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :end_date Date range filtering for type INTEREST. All rates in interest resource have to have valid_to earlier or equal to end_date.
    # @option opts [String] :page_token 
    # @option opts [String] :id ID of account product. Multiple IDs can be provided as a comma-separated list.
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [Date] :start_date Date range filtering for type INTEREST. All rates in interest resource have to have valid_from later or equal to start_date.
    # @return [Array<(AccountProductList, Integer, Hash)>] AccountProductList data, response status code and response headers
    def list_account_resource_products_with_http_info(product_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.list_account_resource_products ...'
      end
      # verify the required parameter 'product_type' is set
      if @api_client.config.client_side_validation && product_type.nil?
        fail ArgumentError, "Missing the required parameter 'product_type' when calling AccountsApi.list_account_resource_products"
      end
      # verify enum value
      allowable_values = ["FEE", "INTEREST"]
      if @api_client.config.client_side_validation && !allowable_values.include?(product_type)
        fail ArgumentError, "invalid value for \"product_type\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AccountsApi.list_account_resource_products, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/accounts/products'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'product_type'] = product_type
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountProductList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.list_account_resource_products",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#list_account_resource_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List account templates
    # List account templates 
    # @param [Hash] opts the optional parameters
    # @option opts [AccountType] :account_type The type of the account 
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @return [TemplateList]
    def list_account_templates(opts = {})
      data, _status_code, _headers = list_account_templates_with_http_info(opts)
      data
    end

    # List account templates
    # List account templates 
    # @param [Hash] opts the optional parameters
    # @option opts [AccountType] :account_type The type of the account 
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @return [Array<(TemplateList, Integer, Hash)>] TemplateList data, response status code and response headers
    def list_account_templates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.list_account_templates ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AccountsApi.list_account_templates, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/accounts/templates'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'account_type'] = opts[:'account_type'] if !opts[:'account_type'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TemplateList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.list_account_templates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#list_account_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List accounts
    # Get a paginated list of accounts.  GENERAL_LEDGER accounts are not included by default. To include them, set include_general_ledger=true, or account_type=GENERAL_LEDGER.  Note: GENERAL_LEDGER accounts are in Alpha status, and cannot yet be created. We may make breaking changes. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :nickname Nickname of the account 
    # @option opts [Array<String>] :account_number Account number(s). Multiple account numbers can be provided as a comma-separated list. When only a single account number is provided, any * characters in the string are wildcards, and match any characters. 
    # @option opts [String] :last_name 
    # @option opts [GeneralLedgerType] :general_ledger_type The type of the general ledger account 
    # @option opts [AccountStatus] :status 
    # @option opts [String] :first_name 
    # @option opts [Array<String>] :overflow_account_id Overflow account ID(s). Multiple IDs can be provided as a comma-separated list. This parameter is deprecated and will be removed in a future API version. Use linked_account_id instead. 
    # @option opts [AccountType] :account_type The type of the account 
    # @option opts [Array<String>] :business_id Unique identifier for the business. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [Array<String>] :overdraft_account_id Overdraft account ID(s). Multiple IDs can be provided as a comma-separated list. This parameter is deprecated and will be removed in a future API version. Use linked_account_id instead. 
    # @option opts [Array<String>] :spend_control_ids Spend Control ID(s). Multiple IDs can be provided as a comma-separated list. Return only resources that use the specified Spend Controls. 
    # @option opts [String] :page_token 
    # @option opts [Array<String>] :person_id Unique identifier for the person. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [CustomerType] :customer_type Customer type of the account, BUSINESS or PERSONAL 
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [String] :customer_id The customer&#39;s unique identifier
    # @option opts [String] :interest_product_id Interest product ID that accounts associate with. Multiple IDs can be provided as a comma-separated list.
    # @option opts [Array<String>] :linked_account_id Return only resources that are linked to the specified backing account in balance_floor or balance_ceiling. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [Array<String>] :id Account ID(s). Multiple IDs can be provided as a comma-separated list. 
    # @option opts [Array<String>] :sort_by Specifies the sort order for the returned accounts. 
    # @return [AccountList]
    def list_accounts(opts = {})
      data, _status_code, _headers = list_accounts_with_http_info(opts)
      data
    end

    # List accounts
    # Get a paginated list of accounts.  GENERAL_LEDGER accounts are not included by default. To include them, set include_general_ledger&#x3D;true, or account_type&#x3D;GENERAL_LEDGER.  Note: GENERAL_LEDGER accounts are in Alpha status, and cannot yet be created. We may make breaking changes. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :nickname Nickname of the account 
    # @option opts [Array<String>] :account_number Account number(s). Multiple account numbers can be provided as a comma-separated list. When only a single account number is provided, any * characters in the string are wildcards, and match any characters. 
    # @option opts [String] :last_name 
    # @option opts [GeneralLedgerType] :general_ledger_type The type of the general ledger account 
    # @option opts [AccountStatus] :status 
    # @option opts [String] :first_name 
    # @option opts [Array<String>] :overflow_account_id Overflow account ID(s). Multiple IDs can be provided as a comma-separated list. This parameter is deprecated and will be removed in a future API version. Use linked_account_id instead. 
    # @option opts [AccountType] :account_type The type of the account 
    # @option opts [Array<String>] :business_id Unique identifier for the business. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [Array<String>] :overdraft_account_id Overdraft account ID(s). Multiple IDs can be provided as a comma-separated list. This parameter is deprecated and will be removed in a future API version. Use linked_account_id instead. 
    # @option opts [Array<String>] :spend_control_ids Spend Control ID(s). Multiple IDs can be provided as a comma-separated list. Return only resources that use the specified Spend Controls. 
    # @option opts [String] :page_token 
    # @option opts [Array<String>] :person_id Unique identifier for the person. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [CustomerType] :customer_type Customer type of the account, BUSINESS or PERSONAL 
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [String] :customer_id The customer&#39;s unique identifier
    # @option opts [String] :interest_product_id Interest product ID that accounts associate with. Multiple IDs can be provided as a comma-separated list.
    # @option opts [Array<String>] :linked_account_id Return only resources that are linked to the specified backing account in balance_floor or balance_ceiling. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [Array<String>] :id Account ID(s). Multiple IDs can be provided as a comma-separated list. 
    # @option opts [Array<String>] :sort_by Specifies the sort order for the returned accounts. 
    # @return [Array<(AccountList, Integer, Hash)>] AccountList data, response status code and response headers
    def list_accounts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.list_accounts ...'
      end
      if @api_client.config.client_side_validation && !opts[:'spend_control_ids'].nil? && opts[:'spend_control_ids'].length > 10
        fail ArgumentError, 'invalid value for "opts[:"spend_control_ids"]" when calling AccountsApi.list_accounts, number of items must be less than or equal to 10.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AccountsApi.list_accounts, must be greater than or equal to 1.'
      end

      allowable_values = ["account_number:asc", "account_number:desc", "account_type:asc", "account_type:desc", "first_name:asc", "first_name:desc", "last_name:asc", "last_name:desc"]
      if @api_client.config.client_side_validation && opts[:'sort_by'] && !opts[:'sort_by'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"sort_by\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/accounts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'nickname'] = opts[:'nickname'] if !opts[:'nickname'].nil?
      query_params[:'account_number'] = @api_client.build_collection_param(opts[:'account_number'], :csv) if !opts[:'account_number'].nil?
      query_params[:'last_name'] = opts[:'last_name'] if !opts[:'last_name'].nil?
      query_params[:'general_ledger_type'] = opts[:'general_ledger_type'] if !opts[:'general_ledger_type'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'first_name'] = opts[:'first_name'] if !opts[:'first_name'].nil?
      query_params[:'overflow_account_id'] = @api_client.build_collection_param(opts[:'overflow_account_id'], :csv) if !opts[:'overflow_account_id'].nil?
      query_params[:'account_type'] = opts[:'account_type'] if !opts[:'account_type'].nil?
      query_params[:'business_id'] = @api_client.build_collection_param(opts[:'business_id'], :csv) if !opts[:'business_id'].nil?
      query_params[:'overdraft_account_id'] = @api_client.build_collection_param(opts[:'overdraft_account_id'], :csv) if !opts[:'overdraft_account_id'].nil?
      query_params[:'spend_control_ids'] = @api_client.build_collection_param(opts[:'spend_control_ids'], :csv) if !opts[:'spend_control_ids'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'person_id'] = @api_client.build_collection_param(opts[:'person_id'], :csv) if !opts[:'person_id'].nil?
      query_params[:'customer_type'] = opts[:'customer_type'] if !opts[:'customer_type'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'customer_id'] = opts[:'customer_id'] if !opts[:'customer_id'].nil?
      query_params[:'interest_product_id'] = opts[:'interest_product_id'] if !opts[:'interest_product_id'].nil?
      query_params[:'linked_account_id'] = @api_client.build_collection_param(opts[:'linked_account_id'], :csv) if !opts[:'linked_account_id'].nil?
      query_params[:'id'] = @api_client.build_collection_param(opts[:'id'], :csv) if !opts[:'id'].nil?
      query_params[:'sort_by'] = @api_client.build_collection_param(opts[:'sort_by'], :csv) if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.list_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#list_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List stop payments
    # List stop payments associated with account
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :transaction_id A list of centinel transaction ids to filter on.
    # @option opts [Array<String>] :originator_name A list of originator names to filter on when listing stop payments.
    # @option opts [Array<String>] :account_id A list of account ids to filter on.
    # @option opts [Array<String>] :stop_payment_id A list of stop payments to filter on.
    # @return [StopPaymentList]
    def list_stop_payment(opts = {})
      data, _status_code, _headers = list_stop_payment_with_http_info(opts)
      data
    end

    # List stop payments
    # List stop payments associated with account
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :transaction_id A list of centinel transaction ids to filter on.
    # @option opts [Array<String>] :originator_name A list of originator names to filter on when listing stop payments.
    # @option opts [Array<String>] :account_id A list of account ids to filter on.
    # @option opts [Array<String>] :stop_payment_id A list of stop payments to filter on.
    # @return [Array<(StopPaymentList, Integer, Hash)>] StopPaymentList data, response status code and response headers
    def list_stop_payment_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.list_stop_payment ...'
      end
      # resource path
      local_var_path = '/accounts/stop_payments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'transaction_id'] = @api_client.build_collection_param(opts[:'transaction_id'], :csv) if !opts[:'transaction_id'].nil?
      query_params[:'originator_name'] = @api_client.build_collection_param(opts[:'originator_name'], :csv) if !opts[:'originator_name'].nil?
      query_params[:'account_id'] = @api_client.build_collection_param(opts[:'account_id'], :csv) if !opts[:'account_id'].nil?
      query_params[:'stop_payment_id'] = @api_client.build_collection_param(opts[:'stop_payment_id'], :csv) if !opts[:'stop_payment_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StopPaymentList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.list_stop_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#list_stop_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patch account
    # Patch account.  Immutable fields:   - account_number   - account_type   - account_template_id   - customer_type  Please note:   - Other fields cannot be modified when access_status is FROZEN.   - access_status has to be patched individually without other fields. 
    # @param account_id [String] Unique identifier for the account.
    # @param patch_account [PatchAccount] Account fields to be patched
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [AccountGenericResponse]
    def patch_account(account_id, patch_account, opts = {})
      data, _status_code, _headers = patch_account_with_http_info(account_id, patch_account, opts)
      data
    end

    # Patch account
    # Patch account.  Immutable fields:   - account_number   - account_type   - account_template_id   - customer_type  Please note:   - Other fields cannot be modified when access_status is FROZEN.   - access_status has to be patched individually without other fields. 
    # @param account_id [String] Unique identifier for the account.
    # @param patch_account [PatchAccount] Account fields to be patched
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(AccountGenericResponse, Integer, Hash)>] AccountGenericResponse data, response status code and response headers
    def patch_account_with_http_info(account_id, patch_account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.patch_account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.patch_account"
      end
      # verify the required parameter 'patch_account' is set
      if @api_client.config.client_side_validation && patch_account.nil?
        fail ArgumentError, "Missing the required parameter 'patch_account' when calling AccountsApi.patch_account"
      end
      # resource path
      local_var_path = '/accounts/{account_id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(patch_account)

      # return_type
      return_type = opts[:debug_return_type] || 'AccountGenericResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.patch_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#patch_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patch account product
    # Patch account product. Rates requires at minimum 1 entry if specified.  The FEE account product has been deprecated. Instead, use the /v1/fee_templates and /v1/fees endpoints. 
    # @param product_id [String] Account Product ID
    # @param patch_account_product [PatchAccountProduct] Account product fields to be patched
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [AccountProduct]
    def patch_account_product(product_id, patch_account_product, opts = {})
      data, _status_code, _headers = patch_account_product_with_http_info(product_id, patch_account_product, opts)
      data
    end

    # Patch account product
    # Patch account product. Rates requires at minimum 1 entry if specified.  The FEE account product has been deprecated. Instead, use the /v1/fee_templates and /v1/fees endpoints. 
    # @param product_id [String] Account Product ID
    # @param patch_account_product [PatchAccountProduct] Account product fields to be patched
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(AccountProduct, Integer, Hash)>] AccountProduct data, response status code and response headers
    def patch_account_product_with_http_info(product_id, patch_account_product, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.patch_account_product ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling AccountsApi.patch_account_product"
      end
      # verify the required parameter 'patch_account_product' is set
      if @api_client.config.client_side_validation && patch_account_product.nil?
        fail ArgumentError, "Missing the required parameter 'patch_account_product' when calling AccountsApi.patch_account_product"
      end
      # resource path
      local_var_path = '/accounts/products/{product_id}'.sub('{' + 'product_id' + '}', CGI.escape(product_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(patch_account_product)

      # return_type
      return_type = opts[:debug_return_type] || 'AccountProduct'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.patch_account_product",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#patch_account_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update account
    # > Deprecated. Please use PATCH /v0/accounts. This route only supports types CHECKING and SAVING.  Update account  Shadow mode required fields:   - account_number   - status  Lead mode required fields:   - All fields are required.  Please note:   - access_status needs to be in ACTIVE.   - PUT request cannot change access_status. 
    # @param account_id [String] Unique identifier for the account.
    # @param update_account [UpdateAccount] Account to update
    # @param [Hash] opts the optional parameters
    # @return [AccountGenericResponse]
    def update_account(account_id, update_account, opts = {})
      data, _status_code, _headers = update_account_with_http_info(account_id, update_account, opts)
      data
    end

    # Update account
    # &gt; Deprecated. Please use PATCH /v0/accounts. This route only supports types CHECKING and SAVING.  Update account  Shadow mode required fields:   - account_number   - status  Lead mode required fields:   - All fields are required.  Please note:   - access_status needs to be in ACTIVE.   - PUT request cannot change access_status. 
    # @param account_id [String] Unique identifier for the account.
    # @param update_account [UpdateAccount] Account to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountGenericResponse, Integer, Hash)>] AccountGenericResponse data, response status code and response headers
    def update_account_with_http_info(account_id, update_account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.update_account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.update_account"
      end
      # verify the required parameter 'update_account' is set
      if @api_client.config.client_side_validation && update_account.nil?
        fail ArgumentError, "Missing the required parameter 'update_account' when calling AccountsApi.update_account"
      end
      # resource path
      local_var_path = '/accounts/{account_id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_account)

      # return_type
      return_type = opts[:debug_return_type] || 'AccountGenericResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.update_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#update_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update account relationship
    # Update account relationship. Only relationship_type can be updated. customer_id should not be modified.
    # @param relationship_id [String] Relationship ID of the account associate with the account entity
    # @param account_id [String] Unique identifier for the account.
    # @param account_relationship [AccountRelationship] Account relationship to be updated
    # @param [Hash] opts the optional parameters
    # @return [RelationshipResponse]
    def update_account_relationship(relationship_id, account_id, account_relationship, opts = {})
      data, _status_code, _headers = update_account_relationship_with_http_info(relationship_id, account_id, account_relationship, opts)
      data
    end

    # Update account relationship
    # Update account relationship. Only relationship_type can be updated. customer_id should not be modified.
    # @param relationship_id [String] Relationship ID of the account associate with the account entity
    # @param account_id [String] Unique identifier for the account.
    # @param account_relationship [AccountRelationship] Account relationship to be updated
    # @param [Hash] opts the optional parameters
    # @return [Array<(RelationshipResponse, Integer, Hash)>] RelationshipResponse data, response status code and response headers
    def update_account_relationship_with_http_info(relationship_id, account_id, account_relationship, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.update_account_relationship ...'
      end
      # verify the required parameter 'relationship_id' is set
      if @api_client.config.client_side_validation && relationship_id.nil?
        fail ArgumentError, "Missing the required parameter 'relationship_id' when calling AccountsApi.update_account_relationship"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.update_account_relationship"
      end
      # verify the required parameter 'account_relationship' is set
      if @api_client.config.client_side_validation && account_relationship.nil?
        fail ArgumentError, "Missing the required parameter 'account_relationship' when calling AccountsApi.update_account_relationship"
      end
      # resource path
      local_var_path = '/accounts/{account_id}/relationships/{relationship_id}'.sub('{' + 'relationship_id' + '}', CGI.escape(relationship_id.to_s)).sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(account_relationship)

      # return_type
      return_type = opts[:debug_return_type] || 'RelationshipResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.update_account_relationship",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#update_account_relationship\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update account template
    # Update account template 
    # @param template_id [String] Account Template ID
    # @param account_template [AccountTemplate] Account template to update
    # @param [Hash] opts the optional parameters
    # @return [AccountTemplateResponse]
    def update_account_template(template_id, account_template, opts = {})
      data, _status_code, _headers = update_account_template_with_http_info(template_id, account_template, opts)
      data
    end

    # Update account template
    # Update account template 
    # @param template_id [String] Account Template ID
    # @param account_template [AccountTemplate] Account template to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountTemplateResponse, Integer, Hash)>] AccountTemplateResponse data, response status code and response headers
    def update_account_template_with_http_info(template_id, account_template, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.update_account_template ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling AccountsApi.update_account_template"
      end
      # verify the required parameter 'account_template' is set
      if @api_client.config.client_side_validation && account_template.nil?
        fail ArgumentError, "Missing the required parameter 'account_template' when calling AccountsApi.update_account_template"
      end
      # resource path
      local_var_path = '/accounts/templates/{template_id}'.sub('{' + 'template_id' + '}', CGI.escape(template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(account_template)

      # return_type
      return_type = opts[:debug_return_type] || 'AccountTemplateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.update_account_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#update_account_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
