=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.145.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module Synctera
  class RelationshipsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a relationship
    # Create a party relationship.
    # @param relationship_in [RelationshipIn] Party relationship to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [RelationshipIn]
    def create_relationship(relationship_in, opts = {})
      data, _status_code, _headers = create_relationship_with_http_info(relationship_in, opts)
      data
    end

    # Create a relationship
    # Create a party relationship.
    # @param relationship_in [RelationshipIn] Party relationship to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(RelationshipIn, Integer, Hash)>] RelationshipIn data, response status code and response headers
    def create_relationship_with_http_info(relationship_in, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RelationshipsApi.create_relationship ...'
      end
      # verify the required parameter 'relationship_in' is set
      if @api_client.config.client_side_validation && relationship_in.nil?
        fail ArgumentError, "Missing the required parameter 'relationship_in' when calling RelationshipsApi.create_relationship"
      end
      # resource path
      local_var_path = '/relationships'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(relationship_in)

      # return_type
      return_type = opts[:debug_return_type] || 'RelationshipIn'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RelationshipsApi.create_relationship",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RelationshipsApi#create_relationship\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete relationship
    # Delete party relationship by ID.
    # @param relationship_id [String] Relationship ID of the account associate with the account entity
    # @param [Hash] opts the optional parameters
    # @return [DeleteResponse]
    def delete_relationship(relationship_id, opts = {})
      data, _status_code, _headers = delete_relationship_with_http_info(relationship_id, opts)
      data
    end

    # Delete relationship
    # Delete party relationship by ID.
    # @param relationship_id [String] Relationship ID of the account associate with the account entity
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteResponse, Integer, Hash)>] DeleteResponse data, response status code and response headers
    def delete_relationship_with_http_info(relationship_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RelationshipsApi.delete_relationship ...'
      end
      # verify the required parameter 'relationship_id' is set
      if @api_client.config.client_side_validation && relationship_id.nil?
        fail ArgumentError, "Missing the required parameter 'relationship_id' when calling RelationshipsApi.delete_relationship"
      end
      # resource path
      local_var_path = '/relationships/{relationship_id}'.sub('{' + 'relationship_id' + '}', CGI.escape(relationship_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RelationshipsApi.delete_relationship",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RelationshipsApi#delete_relationship\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get relationship
    # Get relationship by ID.
    # @param relationship_id [String] Relationship ID of the account associate with the account entity
    # @param [Hash] opts the optional parameters
    # @return [RelationshipIn]
    def get_relationship(relationship_id, opts = {})
      data, _status_code, _headers = get_relationship_with_http_info(relationship_id, opts)
      data
    end

    # Get relationship
    # Get relationship by ID.
    # @param relationship_id [String] Relationship ID of the account associate with the account entity
    # @param [Hash] opts the optional parameters
    # @return [Array<(RelationshipIn, Integer, Hash)>] RelationshipIn data, response status code and response headers
    def get_relationship_with_http_info(relationship_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RelationshipsApi.get_relationship ...'
      end
      # verify the required parameter 'relationship_id' is set
      if @api_client.config.client_side_validation && relationship_id.nil?
        fail ArgumentError, "Missing the required parameter 'relationship_id' when calling RelationshipsApi.get_relationship"
      end
      # resource path
      local_var_path = '/relationships/{relationship_id}'.sub('{' + 'relationship_id' + '}', CGI.escape(relationship_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RelationshipIn'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RelationshipsApi.get_relationship",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RelationshipsApi#get_relationship\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List relationships
    # Retrieves paginated list of relationships viewable by the authorized requester.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :to_business_id Unique identifier for the business. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [Array<String>] :from_person_id Unique identifier for the person. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [Array<String>] :relationship_type The relationship type, any of the following.  All direct businesses customers need at least one beneficial owner or controlling person. * &#x60;BENEFICIAL_OWNER_OF&#x60; – a person who directly or indirectly owns a portion of the business. * &#x60;MANAGING_PERSON_OF&#x60; – a person who is an officer, director, or controlling person of an organization. * &#x60;OWNER_OF&#x60; – a business with ownership of another business. 
    # @option opts [Array<String>] :from_business_id Unique identifier for the business. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [String] :page_token 
    # @option opts [Array<String>] :id Unique resource identifier
    # @option opts [Integer] :limit  (default to 100)
    # @return [RelationshipsList]
    def list_relationships(opts = {})
      data, _status_code, _headers = list_relationships_with_http_info(opts)
      data
    end

    # List relationships
    # Retrieves paginated list of relationships viewable by the authorized requester.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :to_business_id Unique identifier for the business. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [Array<String>] :from_person_id Unique identifier for the person. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [Array<String>] :relationship_type The relationship type, any of the following.  All direct businesses customers need at least one beneficial owner or controlling person. * &#x60;BENEFICIAL_OWNER_OF&#x60; – a person who directly or indirectly owns a portion of the business. * &#x60;MANAGING_PERSON_OF&#x60; – a person who is an officer, director, or controlling person of an organization. * &#x60;OWNER_OF&#x60; – a business with ownership of another business. 
    # @option opts [Array<String>] :from_business_id Unique identifier for the business. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [String] :page_token 
    # @option opts [Array<String>] :id Unique resource identifier
    # @option opts [Integer] :limit  (default to 100)
    # @return [Array<(RelationshipsList, Integer, Hash)>] RelationshipsList data, response status code and response headers
    def list_relationships_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RelationshipsApi.list_relationships ...'
      end
      allowable_values = ["BENEFICIAL_OWNER_OF", "MANAGING_PERSON_OF", "OWNER_OF", "PAYER_PAYEE"]
      if @api_client.config.client_side_validation && opts[:'relationship_type'] && !opts[:'relationship_type'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"relationship_type\", must include one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling RelationshipsApi.list_relationships, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/relationships'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'to_business_id'] = @api_client.build_collection_param(opts[:'to_business_id'], :csv) if !opts[:'to_business_id'].nil?
      query_params[:'from_person_id'] = @api_client.build_collection_param(opts[:'from_person_id'], :csv) if !opts[:'from_person_id'].nil?
      query_params[:'relationship_type'] = @api_client.build_collection_param(opts[:'relationship_type'], :csv) if !opts[:'relationship_type'].nil?
      query_params[:'from_business_id'] = @api_client.build_collection_param(opts[:'from_business_id'], :csv) if !opts[:'from_business_id'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'id'] = @api_client.build_collection_param(opts[:'id'], :csv) if !opts[:'id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RelationshipsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RelationshipsApi.list_relationships",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RelationshipsApi#list_relationships\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update relationship
    # Update relationship by ID.
    # @param relationship_id [String] Relationship ID of the account associate with the account entity
    # @param patch_relationship_in [PatchRelationshipIn] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [PatchRelationshipIn]
    def update_relationship(relationship_id, patch_relationship_in, opts = {})
      data, _status_code, _headers = update_relationship_with_http_info(relationship_id, patch_relationship_in, opts)
      data
    end

    # Update relationship
    # Update relationship by ID.
    # @param relationship_id [String] Relationship ID of the account associate with the account entity
    # @param patch_relationship_in [PatchRelationshipIn] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(PatchRelationshipIn, Integer, Hash)>] PatchRelationshipIn data, response status code and response headers
    def update_relationship_with_http_info(relationship_id, patch_relationship_in, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RelationshipsApi.update_relationship ...'
      end
      # verify the required parameter 'relationship_id' is set
      if @api_client.config.client_side_validation && relationship_id.nil?
        fail ArgumentError, "Missing the required parameter 'relationship_id' when calling RelationshipsApi.update_relationship"
      end
      # verify the required parameter 'patch_relationship_in' is set
      if @api_client.config.client_side_validation && patch_relationship_in.nil?
        fail ArgumentError, "Missing the required parameter 'patch_relationship_in' when calling RelationshipsApi.update_relationship"
      end
      # resource path
      local_var_path = '/relationships/{relationship_id}'.sub('{' + 'relationship_id' + '}', CGI.escape(relationship_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(patch_relationship_in)

      # return_type
      return_type = opts[:debug_return_type] || 'PatchRelationshipIn'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RelationshipsApi.update_relationship",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RelationshipsApi#update_relationship\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
