=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.136.0

Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module Synctera
  class WireTransactionSimulationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Simulate receiving Wire transfer return
    # Use to simulate receiving a Wire transfer return in test environments. Creates an incoming Wire file with a single return entry based on a previously created outgoing transaction. The file gets automatically processed.
    # @param wire_return_simulation_request [WireReturnSimulationRequest] Incoming Wire return simulation request
    # @param [Hash] opts the optional parameters
    # @return [WireSimulationResponse]
    def wire_return_simulation(wire_return_simulation_request, opts = {})
      data, _status_code, _headers = wire_return_simulation_with_http_info(wire_return_simulation_request, opts)
      data
    end

    # Simulate receiving Wire transfer return
    # Use to simulate receiving a Wire transfer return in test environments. Creates an incoming Wire file with a single return entry based on a previously created outgoing transaction. The file gets automatically processed.
    # @param wire_return_simulation_request [WireReturnSimulationRequest] Incoming Wire return simulation request
    # @param [Hash] opts the optional parameters
    # @return [Array<(WireSimulationResponse, Integer, Hash)>] WireSimulationResponse data, response status code and response headers
    def wire_return_simulation_with_http_info(wire_return_simulation_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WireTransactionSimulationsApi.wire_return_simulation ...'
      end
      # verify the required parameter 'wire_return_simulation_request' is set
      if @api_client.config.client_side_validation && wire_return_simulation_request.nil?
        fail ArgumentError, "Missing the required parameter 'wire_return_simulation_request' when calling WireTransactionSimulationsApi.wire_return_simulation"
      end
      # resource path
      local_var_path = '/wires/transaction_simulations/receiving_return'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(wire_return_simulation_request)

      # return_type
      return_type = opts[:debug_return_type] || 'WireSimulationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"WireTransactionSimulationsApi.wire_return_simulation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WireTransactionSimulationsApi#wire_return_simulation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Simulate receiving Wire transaction
    # Use to simulate receiving Wire transaction in test environments. Creates an incoming Wire file, which gets automatically processed.
    # @param wire_transaction_simulation_request [WireTransactionSimulationRequest] Incoming Wire simulation request
    # @param [Hash] opts the optional parameters
    # @return [WireSimulationResponse]
    def wire_transaction_simulation(wire_transaction_simulation_request, opts = {})
      data, _status_code, _headers = wire_transaction_simulation_with_http_info(wire_transaction_simulation_request, opts)
      data
    end

    # Simulate receiving Wire transaction
    # Use to simulate receiving Wire transaction in test environments. Creates an incoming Wire file, which gets automatically processed.
    # @param wire_transaction_simulation_request [WireTransactionSimulationRequest] Incoming Wire simulation request
    # @param [Hash] opts the optional parameters
    # @return [Array<(WireSimulationResponse, Integer, Hash)>] WireSimulationResponse data, response status code and response headers
    def wire_transaction_simulation_with_http_info(wire_transaction_simulation_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WireTransactionSimulationsApi.wire_transaction_simulation ...'
      end
      # verify the required parameter 'wire_transaction_simulation_request' is set
      if @api_client.config.client_side_validation && wire_transaction_simulation_request.nil?
        fail ArgumentError, "Missing the required parameter 'wire_transaction_simulation_request' when calling WireTransactionSimulationsApi.wire_transaction_simulation"
      end
      # resource path
      local_var_path = '/wires/transaction_simulations/receiving_transaction'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(wire_transaction_simulation_request)

      # return_type
      return_type = opts[:debug_return_type] || 'WireSimulationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"WireTransactionSimulationsApi.wire_transaction_simulation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WireTransactionSimulationsApi#wire_transaction_simulation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
