=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 1.82.0

Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'cgi'

module Synctera
  class CardTransactionSimulationsBetaApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Simulate authorization
    # > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Simulate an `authorization` type transaction by including the `card_token` and other authorization details in your request. 
    # @param [Hash] opts the optional parameters
    # @option opts [AuthRequestModel] :auth_request_model Authorization details
    # @return [Object]
    def simulate_authorization(opts = {})
      data, _status_code, _headers = simulate_authorization_with_http_info(opts)
      data
    end

    # Simulate authorization
    # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Simulate an &#x60;authorization&#x60; type transaction by including the &#x60;card_token&#x60; and other authorization details in your request. 
    # @param [Hash] opts the optional parameters
    # @option opts [AuthRequestModel] :auth_request_model Authorization details
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def simulate_authorization_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardTransactionSimulationsBetaApi.simulate_authorization ...'
      end
      # resource path
      local_var_path = '/cards/transaction_simulations/authorization'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'auth_request_model'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardTransactionSimulationsBetaApi.simulate_authorization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardTransactionSimulationsBetaApi#simulate_authorization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Simulate authorization advice
    # > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  An authorization advice allows an amount to be decreased after the authorization. This endpoint allows you to simulate post-swipe adjustments.  Simulate an `authorization.advice` type transaction by including the `original_transaction_token` and other authorization details in your request. 
    # @param [Hash] opts the optional parameters
    # @option opts [AuthorizationAdviceModel] :authorization_advice_model Authorization advice details
    # @return [Object]
    def simulate_authorization_advice(opts = {})
      data, _status_code, _headers = simulate_authorization_advice_with_http_info(opts)
      data
    end

    # Simulate authorization advice
    # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  An authorization advice allows an amount to be decreased after the authorization. This endpoint allows you to simulate post-swipe adjustments.  Simulate an &#x60;authorization.advice&#x60; type transaction by including the &#x60;original_transaction_token&#x60; and other authorization details in your request. 
    # @param [Hash] opts the optional parameters
    # @option opts [AuthorizationAdviceModel] :authorization_advice_model Authorization advice details
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def simulate_authorization_advice_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardTransactionSimulationsBetaApi.simulate_authorization_advice ...'
      end
      # resource path
      local_var_path = '/cards/transaction_simulations/authorization/advice'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'authorization_advice_model'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardTransactionSimulationsBetaApi.simulate_authorization_advice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardTransactionSimulationsBetaApi#simulate_authorization_advice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Simulate balance inquiry
    # > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Simulate a `pindebit.balanceinquiry` type transaction by sending a POST request to the `/simulate/financial/balanceinquiry` endpoint. 
    # @param balance_inquiry_request_model [BalanceInquiryRequestModel] Balance inquiry details
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def simulate_balance_inquiry(balance_inquiry_request_model, opts = {})
      data, _status_code, _headers = simulate_balance_inquiry_with_http_info(balance_inquiry_request_model, opts)
      data
    end

    # Simulate balance inquiry
    # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Simulate a &#x60;pindebit.balanceinquiry&#x60; type transaction by sending a POST request to the &#x60;/simulate/financial/balanceinquiry&#x60; endpoint. 
    # @param balance_inquiry_request_model [BalanceInquiryRequestModel] Balance inquiry details
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def simulate_balance_inquiry_with_http_info(balance_inquiry_request_model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardTransactionSimulationsBetaApi.simulate_balance_inquiry ...'
      end
      # verify the required parameter 'balance_inquiry_request_model' is set
      if @api_client.config.client_side_validation && balance_inquiry_request_model.nil?
        fail ArgumentError, "Missing the required parameter 'balance_inquiry_request_model' when calling CardTransactionSimulationsBetaApi.simulate_balance_inquiry"
      end
      # resource path
      local_var_path = '/cards/transaction_simulations/financial/balance_inquiry'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(balance_inquiry_request_model)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardTransactionSimulationsBetaApi.simulate_balance_inquiry",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardTransactionSimulationsBetaApi#simulate_balance_inquiry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Simulate clearing or refund
    # > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Simulate an `authorization.clearing` type transaction by including the `original_transaction_token` and `amount` in your request. To simulate a refund type transaction, set the `is_refund` field to true. 
    # @param [Hash] opts the optional parameters
    # @option opts [ClearingModel] :clearing_model Transaction clearing or refund details
    # @return [Object]
    def simulate_clearing(opts = {})
      data, _status_code, _headers = simulate_clearing_with_http_info(opts)
      data
    end

    # Simulate clearing or refund
    # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Simulate an &#x60;authorization.clearing&#x60; type transaction by including the &#x60;original_transaction_token&#x60; and &#x60;amount&#x60; in your request. To simulate a refund type transaction, set the &#x60;is_refund&#x60; field to true. 
    # @param [Hash] opts the optional parameters
    # @option opts [ClearingModel] :clearing_model Transaction clearing or refund details
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def simulate_clearing_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardTransactionSimulationsBetaApi.simulate_clearing ...'
      end
      # resource path
      local_var_path = '/cards/transaction_simulations/clearing'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'clearing_model'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardTransactionSimulationsBetaApi.simulate_clearing",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardTransactionSimulationsBetaApi#simulate_clearing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Simulate financial
    # > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  A \"financial\" is a transaction message class that includes ATM transactions, PIN-debit transactions, and balance inquiries.  Simulate a `pindebit` type transaction by including the `card_token` and `amount` in your request. 
    # @param financial_request_model [FinancialRequestModel] Financial details
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def simulate_financial(financial_request_model, opts = {})
      data, _status_code, _headers = simulate_financial_with_http_info(financial_request_model, opts)
      data
    end

    # Simulate financial
    # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  A \&quot;financial\&quot; is a transaction message class that includes ATM transactions, PIN-debit transactions, and balance inquiries.  Simulate a &#x60;pindebit&#x60; type transaction by including the &#x60;card_token&#x60; and &#x60;amount&#x60; in your request. 
    # @param financial_request_model [FinancialRequestModel] Financial details
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def simulate_financial_with_http_info(financial_request_model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardTransactionSimulationsBetaApi.simulate_financial ...'
      end
      # verify the required parameter 'financial_request_model' is set
      if @api_client.config.client_side_validation && financial_request_model.nil?
        fail ArgumentError, "Missing the required parameter 'financial_request_model' when calling CardTransactionSimulationsBetaApi.simulate_financial"
      end
      # resource path
      local_var_path = '/cards/transaction_simulations/financial'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(financial_request_model)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardTransactionSimulationsBetaApi.simulate_financial",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardTransactionSimulationsBetaApi#simulate_financial\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Simulate financial advice
    # > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Simulate a financial advice by including the `original_transaction_token` and other authorization details in JSON format in the body of the request. 
    # @param authorization_advice_model [AuthorizationAdviceModel] Financial advice details
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def simulate_financial_advice(authorization_advice_model, opts = {})
      data, _status_code, _headers = simulate_financial_advice_with_http_info(authorization_advice_model, opts)
      data
    end

    # Simulate financial advice
    # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Simulate a financial advice by including the &#x60;original_transaction_token&#x60; and other authorization details in JSON format in the body of the request. 
    # @param authorization_advice_model [AuthorizationAdviceModel] Financial advice details
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def simulate_financial_advice_with_http_info(authorization_advice_model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardTransactionSimulationsBetaApi.simulate_financial_advice ...'
      end
      # verify the required parameter 'authorization_advice_model' is set
      if @api_client.config.client_side_validation && authorization_advice_model.nil?
        fail ArgumentError, "Missing the required parameter 'authorization_advice_model' when calling CardTransactionSimulationsBetaApi.simulate_financial_advice"
      end
      # resource path
      local_var_path = '/cards/transaction_simulations/financial/advice'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(authorization_advice_model)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardTransactionSimulationsBetaApi.simulate_financial_advice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardTransactionSimulationsBetaApi#simulate_financial_advice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Simulate OCT
    # > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  This Original Credit Transaction (OCT) enables the cardholder to receive funds on the specified card from an external source via the card network. Use this endpoint to simulate a transaction that is similar to a wire transfer and not linked to any purchase.  Simulate an OCT by including the `card_token`, `amount`, `mid`, and `type` in your request. 
    # @param original_credit_request_model [OriginalCreditRequestModel] OCT details
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def simulate_original_credit(original_credit_request_model, opts = {})
      data, _status_code, _headers = simulate_original_credit_with_http_info(original_credit_request_model, opts)
      data
    end

    # Simulate OCT
    # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  This Original Credit Transaction (OCT) enables the cardholder to receive funds on the specified card from an external source via the card network. Use this endpoint to simulate a transaction that is similar to a wire transfer and not linked to any purchase.  Simulate an OCT by including the &#x60;card_token&#x60;, &#x60;amount&#x60;, &#x60;mid&#x60;, and &#x60;type&#x60; in your request. 
    # @param original_credit_request_model [OriginalCreditRequestModel] OCT details
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def simulate_original_credit_with_http_info(original_credit_request_model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardTransactionSimulationsBetaApi.simulate_original_credit ...'
      end
      # verify the required parameter 'original_credit_request_model' is set
      if @api_client.config.client_side_validation && original_credit_request_model.nil?
        fail ArgumentError, "Missing the required parameter 'original_credit_request_model' when calling CardTransactionSimulationsBetaApi.simulate_original_credit"
      end
      # resource path
      local_var_path = '/cards/transaction_simulations/financial/original_credit'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(original_credit_request_model)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardTransactionSimulationsBetaApi.simulate_original_credit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardTransactionSimulationsBetaApi#simulate_original_credit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Simulate reversal
    # > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  A reversal releases the hold that was placed on account funds by an authorization, thus returning the funds to the account.  Simulate an `authorization.reversal` type transaction by including the `original_transaction_token` and `amount` in your request. 
    # @param reversal_model [ReversalModel] Reversal details
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def simulate_reversal(reversal_model, opts = {})
      data, _status_code, _headers = simulate_reversal_with_http_info(reversal_model, opts)
      data
    end

    # Simulate reversal
    # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  A reversal releases the hold that was placed on account funds by an authorization, thus returning the funds to the account.  Simulate an &#x60;authorization.reversal&#x60; type transaction by including the &#x60;original_transaction_token&#x60; and &#x60;amount&#x60; in your request. 
    # @param reversal_model [ReversalModel] Reversal details
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def simulate_reversal_with_http_info(reversal_model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardTransactionSimulationsBetaApi.simulate_reversal ...'
      end
      # verify the required parameter 'reversal_model' is set
      if @api_client.config.client_side_validation && reversal_model.nil?
        fail ArgumentError, "Missing the required parameter 'reversal_model' when calling CardTransactionSimulationsBetaApi.simulate_reversal"
      end
      # resource path
      local_var_path = '/cards/transaction_simulations/reversal'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reversal_model)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardTransactionSimulationsBetaApi.simulate_reversal",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardTransactionSimulationsBetaApi#simulate_reversal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Simulate ATM withdrawal
    # > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Simulate a `pindebit.atm.withdrawal` type transaction by including the `card_token` and `amount` in your request. 
    # @param withdrawal_request_model [WithdrawalRequestModel] ATM withdrawal details
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def simulate_withdrawal(withdrawal_request_model, opts = {})
      data, _status_code, _headers = simulate_withdrawal_with_http_info(withdrawal_request_model, opts)
      data
    end

    # Simulate ATM withdrawal
    # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Simulate a &#x60;pindebit.atm.withdrawal&#x60; type transaction by including the &#x60;card_token&#x60; and &#x60;amount&#x60; in your request. 
    # @param withdrawal_request_model [WithdrawalRequestModel] ATM withdrawal details
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def simulate_withdrawal_with_http_info(withdrawal_request_model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardTransactionSimulationsBetaApi.simulate_withdrawal ...'
      end
      # verify the required parameter 'withdrawal_request_model' is set
      if @api_client.config.client_side_validation && withdrawal_request_model.nil?
        fail ArgumentError, "Missing the required parameter 'withdrawal_request_model' when calling CardTransactionSimulationsBetaApi.simulate_withdrawal"
      end
      # resource path
      local_var_path = '/cards/transaction_simulations/financial/withdrawal'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(withdrawal_request_model)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardTransactionSimulationsBetaApi.simulate_withdrawal",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardTransactionSimulationsBetaApi#simulate_withdrawal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
