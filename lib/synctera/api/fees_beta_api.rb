=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 1.82.0

Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'cgi'

module Synctera
  class FeesBetaApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a fee
    # Create a fee  > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param fee_post [FeePost] Fee to create
    # @param [Hash] opts the optional parameters
    # @return [FeeResponse]
    def create_fee(fee_post, opts = {})
      data, _status_code, _headers = create_fee_with_http_info(fee_post, opts)
      data
    end

    # Create a fee
    # Create a fee  &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param fee_post [FeePost] Fee to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeeResponse, Integer, Hash)>] FeeResponse data, response status code and response headers
    def create_fee_with_http_info(fee_post, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeesBetaApi.create_fee ...'
      end
      # verify the required parameter 'fee_post' is set
      if @api_client.config.client_side_validation && fee_post.nil?
        fail ArgumentError, "Missing the required parameter 'fee_post' when calling FeesBetaApi.create_fee"
      end
      # resource path
      local_var_path = '/fees'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(fee_post)

      # return_type
      return_type = opts[:debug_return_type] || 'FeeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"FeesBetaApi.create_fee",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeesBetaApi#create_fee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a fee template
    # > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.  Create a fee template A fee template defines the properties of a fee that a fintech wishes to use to easily charge their customers. The fintech can then create fee templates for different amounts or categories of fees that represent different instances of services or charges 
    # @param fee_template_post [FeeTemplatePost] Fee to create  &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param [Hash] opts the optional parameters
    # @return [FeeTemplateResponse]
    def create_fee_template(fee_template_post, opts = {})
      data, _status_code, _headers = create_fee_template_with_http_info(fee_template_post, opts)
      data
    end

    # Create a fee template
    # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.  Create a fee template A fee template defines the properties of a fee that a fintech wishes to use to easily charge their customers. The fintech can then create fee templates for different amounts or categories of fees that represent different instances of services or charges 
    # @param fee_template_post [FeeTemplatePost] Fee to create  &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeeTemplateResponse, Integer, Hash)>] FeeTemplateResponse data, response status code and response headers
    def create_fee_template_with_http_info(fee_template_post, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeesBetaApi.create_fee_template ...'
      end
      # verify the required parameter 'fee_template_post' is set
      if @api_client.config.client_side_validation && fee_template_post.nil?
        fail ArgumentError, "Missing the required parameter 'fee_template_post' when calling FeesBetaApi.create_fee_template"
      end
      # resource path
      local_var_path = '/fee_templates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(fee_template_post)

      # return_type
      return_type = opts[:debug_return_type] || 'FeeTemplateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"FeesBetaApi.create_fee_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeesBetaApi#create_fee_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Fee
    # Get a fee by ID.  > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param fee_id [String] The unique identifier of a fee
    # @param [Hash] opts the optional parameters
    # @return [FeeResponse]
    def get_fee(fee_id, opts = {})
      data, _status_code, _headers = get_fee_with_http_info(fee_id, opts)
      data
    end

    # Get Fee
    # Get a fee by ID.  &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param fee_id [String] The unique identifier of a fee
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeeResponse, Integer, Hash)>] FeeResponse data, response status code and response headers
    def get_fee_with_http_info(fee_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeesBetaApi.get_fee ...'
      end
      # verify the required parameter 'fee_id' is set
      if @api_client.config.client_side_validation && fee_id.nil?
        fail ArgumentError, "Missing the required parameter 'fee_id' when calling FeesBetaApi.get_fee"
      end
      # resource path
      local_var_path = '/fees/{fee_id}'.sub('{' + 'fee_id' + '}', CGI.escape(fee_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FeeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"FeesBetaApi.get_fee",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeesBetaApi#get_fee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Fee template
    # Get a fee template by ID.  > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param fee_template_id [String] The unique identifier of a fee template
    # @param [Hash] opts the optional parameters
    # @return [FeeTemplateResponse]
    def get_fee_template(fee_template_id, opts = {})
      data, _status_code, _headers = get_fee_template_with_http_info(fee_template_id, opts)
      data
    end

    # Get a Fee template
    # Get a fee template by ID.  &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param fee_template_id [String] The unique identifier of a fee template
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeeTemplateResponse, Integer, Hash)>] FeeTemplateResponse data, response status code and response headers
    def get_fee_template_with_http_info(fee_template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeesBetaApi.get_fee_template ...'
      end
      # verify the required parameter 'fee_template_id' is set
      if @api_client.config.client_side_validation && fee_template_id.nil?
        fail ArgumentError, "Missing the required parameter 'fee_template_id' when calling FeesBetaApi.get_fee_template"
      end
      # resource path
      local_var_path = '/fee_templates/{fee_template_id}'.sub('{' + 'fee_template_id' + '}', CGI.escape(fee_template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FeeTemplateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"FeesBetaApi.get_fee_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeesBetaApi#get_fee_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List fees
    # Get paginated list of fees  > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :end_time Return fees created before this time.
    # @option opts [Array<String>] :account_id Return fees for the specified account.
    # @option opts [FeeSubtype] :subtype 
    # @option opts [Array<String>] :id Return the fee with the specified id. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [String] :page_token 
    # @option opts [Time] :start_time Return fees created at or after this time.
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [String] :description Return fees with the specified description. A * character can be used as a wildcard to match any characters.
    # @option opts [Array<String>] :fee_template_id Return fees resources with a fee template of the specified id. Multiple IDs can be provided as a comma-separated list. 
    # @return [FeeList]
    def list_fees(opts = {})
      data, _status_code, _headers = list_fees_with_http_info(opts)
      data
    end

    # List fees
    # Get paginated list of fees  &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :end_time Return fees created before this time.
    # @option opts [Array<String>] :account_id Return fees for the specified account.
    # @option opts [FeeSubtype] :subtype 
    # @option opts [Array<String>] :id Return the fee with the specified id. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [String] :page_token 
    # @option opts [Time] :start_time Return fees created at or after this time.
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [String] :description Return fees with the specified description. A * character can be used as a wildcard to match any characters.
    # @option opts [Array<String>] :fee_template_id Return fees resources with a fee template of the specified id. Multiple IDs can be provided as a comma-separated list. 
    # @return [Array<(FeeList, Integer, Hash)>] FeeList data, response status code and response headers
    def list_fees_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeesBetaApi.list_fees ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling FeesBetaApi.list_fees, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/fees'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'end_time'] = opts[:'end_time'] if !opts[:'end_time'].nil?
      query_params[:'account_id'] = @api_client.build_collection_param(opts[:'account_id'], :multi) if !opts[:'account_id'].nil?
      query_params[:'subtype'] = opts[:'subtype'] if !opts[:'subtype'].nil?
      query_params[:'id'] = @api_client.build_collection_param(opts[:'id'], :csv) if !opts[:'id'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'start_time'] = opts[:'start_time'] if !opts[:'start_time'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'fee_template_id'] = @api_client.build_collection_param(opts[:'fee_template_id'], :csv) if !opts[:'fee_template_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FeeList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"FeesBetaApi.list_fees",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeesBetaApi#list_fees\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List fee templates
    # > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.  Get paginated list of fee templates 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :id Return fee templates with the specified id. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [FeeSubtype] :subtype 
    # @option opts [Array<String>] :sort_by Specifies the sort order for the returned fee templates. 
    # @option opts [Boolean] :is_enabled Return fee templates with the specified is_enabled flag.
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [String] :description Return fee templates with the specified description. A * character can be used as a wildcard to match any characters.
    # @return [FeeTemplateList]
    def list_feetemplates(opts = {})
      data, _status_code, _headers = list_feetemplates_with_http_info(opts)
      data
    end

    # List fee templates
    # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.  Get paginated list of fee templates 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :id Return fee templates with the specified id. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [FeeSubtype] :subtype 
    # @option opts [Array<String>] :sort_by Specifies the sort order for the returned fee templates. 
    # @option opts [Boolean] :is_enabled Return fee templates with the specified is_enabled flag.
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [String] :description Return fee templates with the specified description. A * character can be used as a wildcard to match any characters.
    # @return [Array<(FeeTemplateList, Integer, Hash)>] FeeTemplateList data, response status code and response headers
    def list_feetemplates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeesBetaApi.list_feetemplates ...'
      end
      allowable_values = ["amount:asc", "amount:desc", "description:asc", "description:desc", "is_enabled:asc", "is_enabled:desc", "last_updated_time:asc", "last_updated_time:desc"]
      if @api_client.config.client_side_validation && opts[:'sort_by'] && !opts[:'sort_by'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"sort_by\", must include one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling FeesBetaApi.list_feetemplates, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/fee_templates'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = @api_client.build_collection_param(opts[:'id'], :csv) if !opts[:'id'].nil?
      query_params[:'subtype'] = opts[:'subtype'] if !opts[:'subtype'].nil?
      query_params[:'sort_by'] = @api_client.build_collection_param(opts[:'sort_by'], :csv) if !opts[:'sort_by'].nil?
      query_params[:'is_enabled'] = opts[:'is_enabled'] if !opts[:'is_enabled'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FeeTemplateList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"FeesBetaApi.list_feetemplates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeesBetaApi#list_feetemplates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patch Fee Template
    # Update a fee template by ID.  > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param fee_template_id [String] The unique identifier of a fee template
    # @param fee_template_patch [FeeTemplatePatch] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [FeeTemplateResponse]
    def patch_fee_template(fee_template_id, fee_template_patch, opts = {})
      data, _status_code, _headers = patch_fee_template_with_http_info(fee_template_id, fee_template_patch, opts)
      data
    end

    # Patch Fee Template
    # Update a fee template by ID.  &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param fee_template_id [String] The unique identifier of a fee template
    # @param fee_template_patch [FeeTemplatePatch] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(FeeTemplateResponse, Integer, Hash)>] FeeTemplateResponse data, response status code and response headers
    def patch_fee_template_with_http_info(fee_template_id, fee_template_patch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeesBetaApi.patch_fee_template ...'
      end
      # verify the required parameter 'fee_template_id' is set
      if @api_client.config.client_side_validation && fee_template_id.nil?
        fail ArgumentError, "Missing the required parameter 'fee_template_id' when calling FeesBetaApi.patch_fee_template"
      end
      # verify the required parameter 'fee_template_patch' is set
      if @api_client.config.client_side_validation && fee_template_patch.nil?
        fail ArgumentError, "Missing the required parameter 'fee_template_patch' when calling FeesBetaApi.patch_fee_template"
      end
      # resource path
      local_var_path = '/fee_templates/{fee_template_id}'.sub('{' + 'fee_template_id' + '}', CGI.escape(fee_template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(fee_template_patch)

      # return_type
      return_type = opts[:debug_return_type] || 'FeeTemplateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"FeesBetaApi.patch_fee_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeesBetaApi#patch_fee_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reverse a fee
    # Reverse the fee by creating a reversal transaction.  > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param fee_id [String] The unique identifier of a fee
    # @param fee_reverse_post [FeeReversePost] Fee reversal properties
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [FeeResponse]
    def reverse_fee(fee_id, fee_reverse_post, opts = {})
      data, _status_code, _headers = reverse_fee_with_http_info(fee_id, fee_reverse_post, opts)
      data
    end

    # Reverse a fee
    # Reverse the fee by creating a reversal transaction.  &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
    # @param fee_id [String] The unique identifier of a fee
    # @param fee_reverse_post [FeeReversePost] Fee reversal properties
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(FeeResponse, Integer, Hash)>] FeeResponse data, response status code and response headers
    def reverse_fee_with_http_info(fee_id, fee_reverse_post, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeesBetaApi.reverse_fee ...'
      end
      # verify the required parameter 'fee_id' is set
      if @api_client.config.client_side_validation && fee_id.nil?
        fail ArgumentError, "Missing the required parameter 'fee_id' when calling FeesBetaApi.reverse_fee"
      end
      # verify the required parameter 'fee_reverse_post' is set
      if @api_client.config.client_side_validation && fee_reverse_post.nil?
        fail ArgumentError, "Missing the required parameter 'fee_reverse_post' when calling FeesBetaApi.reverse_fee"
      end
      # resource path
      local_var_path = '/fees/{fee_id}/reverse'.sub('{' + 'fee_id' + '}', CGI.escape(fee_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(fee_reverse_post)

      # return_type
      return_type = opts[:debug_return_type] || 'FeeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"FeesBetaApi.reverse_fee",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeesBetaApi#reverse_fee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
