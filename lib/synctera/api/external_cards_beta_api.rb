=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 1.82.0

Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'cgi'

module Synctera
  class ExternalCardsBetaApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create External Card from token
    # > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Create an External Card from token. The token and cardholder name are obtained through the iFrame. The token must be used within 5 minutes or else it will expire. If a Business ID is provided, address verification will be performed against the legal address of the business. Otherwise, the legal address of the Customer will be used. In either case, the name of the Customer will be used to match against the cardholder name.  Each unique External Card is limited to a single Customer, so once an External Card is created for a Customer, it cannot be used for any other Customers, even if the card is deleted. Given there is a limited number of test cards, to allow easier testing, this restriction is relaxed in the sandbox environment. 
    # @param external_card_request [ExternalCardRequest] Details of the External Card to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [ExternalCardResponse]
    def create_external_card_from_token(external_card_request, opts = {})
      data, _status_code, _headers = create_external_card_from_token_with_http_info(external_card_request, opts)
      data
    end

    # Create External Card from token
    # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Create an External Card from token. The token and cardholder name are obtained through the iFrame. The token must be used within 5 minutes or else it will expire. If a Business ID is provided, address verification will be performed against the legal address of the business. Otherwise, the legal address of the Customer will be used. In either case, the name of the Customer will be used to match against the cardholder name.  Each unique External Card is limited to a single Customer, so once an External Card is created for a Customer, it cannot be used for any other Customers, even if the card is deleted. Given there is a limited number of test cards, to allow easier testing, this restriction is relaxed in the sandbox environment. 
    # @param external_card_request [ExternalCardRequest] Details of the External Card to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(ExternalCardResponse, Integer, Hash)>] ExternalCardResponse data, response status code and response headers
    def create_external_card_from_token_with_http_info(external_card_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalCardsBetaApi.create_external_card_from_token ...'
      end
      # verify the required parameter 'external_card_request' is set
      if @api_client.config.client_side_validation && external_card_request.nil?
        fail ArgumentError, "Missing the required parameter 'external_card_request' when calling ExternalCardsBetaApi.create_external_card_from_token"
      end
      # resource path
      local_var_path = '/external_cards/tokens'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(external_card_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalCardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalCardsBetaApi.create_external_card_from_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalCardsBetaApi#create_external_card_from_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create External Card Transfer
    # > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Create External Card Transfer 
    # @param transfer_request [TransferRequest] Details of the External Card Transfer to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [CreateTransferResponse]
    def create_external_card_transfer(transfer_request, opts = {})
      data, _status_code, _headers = create_external_card_transfer_with_http_info(transfer_request, opts)
      data
    end

    # Create External Card Transfer
    # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Create External Card Transfer 
    # @param transfer_request [TransferRequest] Details of the External Card Transfer to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(CreateTransferResponse, Integer, Hash)>] CreateTransferResponse data, response status code and response headers
    def create_external_card_transfer_with_http_info(transfer_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalCardsBetaApi.create_external_card_transfer ...'
      end
      # verify the required parameter 'transfer_request' is set
      if @api_client.config.client_side_validation && transfer_request.nil?
        fail ArgumentError, "Missing the required parameter 'transfer_request' when calling ExternalCardsBetaApi.create_external_card_transfer"
      end
      # resource path
      local_var_path = '/external_cards/transfers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(transfer_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateTransferResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalCardsBetaApi.create_external_card_transfer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalCardsBetaApi#create_external_card_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create External Card Transfer Reversal
    # > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Create External Card Transfer Reversal 
    # @param transfer_id [String] The unique identifier of a transfer
    # @param transfer_reversal_request [TransferReversalRequest] Details of the External Card Transfer Reversal to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [TransferResponse]
    def create_external_card_transfer_reversal(transfer_id, transfer_reversal_request, opts = {})
      data, _status_code, _headers = create_external_card_transfer_reversal_with_http_info(transfer_id, transfer_reversal_request, opts)
      data
    end

    # Create External Card Transfer Reversal
    # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Create External Card Transfer Reversal 
    # @param transfer_id [String] The unique identifier of a transfer
    # @param transfer_reversal_request [TransferReversalRequest] Details of the External Card Transfer Reversal to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(TransferResponse, Integer, Hash)>] TransferResponse data, response status code and response headers
    def create_external_card_transfer_reversal_with_http_info(transfer_id, transfer_reversal_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalCardsBetaApi.create_external_card_transfer_reversal ...'
      end
      # verify the required parameter 'transfer_id' is set
      if @api_client.config.client_side_validation && transfer_id.nil?
        fail ArgumentError, "Missing the required parameter 'transfer_id' when calling ExternalCardsBetaApi.create_external_card_transfer_reversal"
      end
      # verify the required parameter 'transfer_reversal_request' is set
      if @api_client.config.client_side_validation && transfer_reversal_request.nil?
        fail ArgumentError, "Missing the required parameter 'transfer_reversal_request' when calling ExternalCardsBetaApi.create_external_card_transfer_reversal"
      end
      # resource path
      local_var_path = '/external_cards/transfers/{transfer_id}/reversals'.sub('{' + 'transfer_id' + '}', CGI.escape(transfer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(transfer_reversal_request)

      # return_type
      return_type = opts[:debug_return_type] || 'TransferResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalCardsBetaApi.create_external_card_transfer_reversal",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalCardsBetaApi#create_external_card_transfer_reversal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete External Card
    # > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Delete an External Card  
    # @param external_card_id [String] The unique identifier of an external card
    # @param [Hash] opts the optional parameters
    # @return [DeleteResponse]
    def delete_external_card(external_card_id, opts = {})
      data, _status_code, _headers = delete_external_card_with_http_info(external_card_id, opts)
      data
    end

    # Delete External Card
    # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Delete an External Card  
    # @param external_card_id [String] The unique identifier of an external card
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteResponse, Integer, Hash)>] DeleteResponse data, response status code and response headers
    def delete_external_card_with_http_info(external_card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalCardsBetaApi.delete_external_card ...'
      end
      # verify the required parameter 'external_card_id' is set
      if @api_client.config.client_side_validation && external_card_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_card_id' when calling ExternalCardsBetaApi.delete_external_card"
      end
      # resource path
      local_var_path = '/external_cards/{external_card_id}'.sub('{' + 'external_card_id' + '}', CGI.escape(external_card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalCardsBetaApi.delete_external_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalCardsBetaApi#delete_external_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get External Card
    # > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Get External Card 
    # @param external_card_id [String] The unique identifier of an external card
    # @param [Hash] opts the optional parameters
    # @return [ExternalCardResponse]
    def get_external_card(external_card_id, opts = {})
      data, _status_code, _headers = get_external_card_with_http_info(external_card_id, opts)
      data
    end

    # Get External Card
    # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Get External Card 
    # @param external_card_id [String] The unique identifier of an external card
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExternalCardResponse, Integer, Hash)>] ExternalCardResponse data, response status code and response headers
    def get_external_card_with_http_info(external_card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalCardsBetaApi.get_external_card ...'
      end
      # verify the required parameter 'external_card_id' is set
      if @api_client.config.client_side_validation && external_card_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_card_id' when calling ExternalCardsBetaApi.get_external_card"
      end
      # resource path
      local_var_path = '/external_cards/{external_card_id}'.sub('{' + 'external_card_id' + '}', CGI.escape(external_card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalCardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalCardsBetaApi.get_external_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalCardsBetaApi#get_external_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get External Card Transfer
    # > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Get External Card Transfer 
    # @param transfer_id [String] The unique identifier of a transfer
    # @param [Hash] opts the optional parameters
    # @return [TransferResponse]
    def get_external_card_transfer(transfer_id, opts = {})
      data, _status_code, _headers = get_external_card_transfer_with_http_info(transfer_id, opts)
      data
    end

    # Get External Card Transfer
    # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Get External Card Transfer 
    # @param transfer_id [String] The unique identifier of a transfer
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransferResponse, Integer, Hash)>] TransferResponse data, response status code and response headers
    def get_external_card_transfer_with_http_info(transfer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalCardsBetaApi.get_external_card_transfer ...'
      end
      # verify the required parameter 'transfer_id' is set
      if @api_client.config.client_side_validation && transfer_id.nil?
        fail ArgumentError, "Missing the required parameter 'transfer_id' when calling ExternalCardsBetaApi.get_external_card_transfer"
      end
      # resource path
      local_var_path = '/external_cards/transfers/{transfer_id}'.sub('{' + 'transfer_id' + '}', CGI.escape(transfer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransferResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalCardsBetaApi.get_external_card_transfer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalCardsBetaApi#get_external_card_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List External Transfers
    # > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  List External Card Transfers 
    # @param [Hash] opts the optional parameters
    # @option opts [TransferType] :type The type of an external transfer
    # @option opts [Array<String>] :originating_account_id 
    # @option opts [Array<String>] :customer_id 
    # @option opts [String] :external_card_id 
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @return [TransferListResponse]
    def list_external_card_transfers(opts = {})
      data, _status_code, _headers = list_external_card_transfers_with_http_info(opts)
      data
    end

    # List External Transfers
    # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  List External Card Transfers 
    # @param [Hash] opts the optional parameters
    # @option opts [TransferType] :type The type of an external transfer
    # @option opts [Array<String>] :originating_account_id 
    # @option opts [Array<String>] :customer_id 
    # @option opts [String] :external_card_id 
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @return [Array<(TransferListResponse, Integer, Hash)>] TransferListResponse data, response status code and response headers
    def list_external_card_transfers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalCardsBetaApi.list_external_card_transfers ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ExternalCardsBetaApi.list_external_card_transfers, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/external_cards/transfers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'originating_account_id'] = @api_client.build_collection_param(opts[:'originating_account_id'], :csv) if !opts[:'originating_account_id'].nil?
      query_params[:'customer_id'] = @api_client.build_collection_param(opts[:'customer_id'], :csv) if !opts[:'customer_id'].nil?
      query_params[:'external_card_id'] = opts[:'external_card_id'] if !opts[:'external_card_id'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransferListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalCardsBetaApi.list_external_card_transfers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalCardsBetaApi#list_external_card_transfers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List External Cards
    # > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  List External Cards 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_id 
    # @option opts [String] :business_id 
    # @option opts [String] :page_token 
    # @option opts [ExternalCardStatus] :status 
    # @option opts [Integer] :limit  (default to 100)
    # @return [ExternalCardListResponse]
    def list_external_cards(opts = {})
      data, _status_code, _headers = list_external_cards_with_http_info(opts)
      data
    end

    # List External Cards
    # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  List External Cards 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_id 
    # @option opts [String] :business_id 
    # @option opts [String] :page_token 
    # @option opts [ExternalCardStatus] :status 
    # @option opts [Integer] :limit  (default to 100)
    # @return [Array<(ExternalCardListResponse, Integer, Hash)>] ExternalCardListResponse data, response status code and response headers
    def list_external_cards_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalCardsBetaApi.list_external_cards ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ExternalCardsBetaApi.list_external_cards, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/external_cards'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'customer_id'] = opts[:'customer_id'] if !opts[:'customer_id'].nil?
      query_params[:'business_id'] = opts[:'business_id'] if !opts[:'business_id'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalCardListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalCardsBetaApi.list_external_cards",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalCardsBetaApi#list_external_cards\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update External Card
    # > ðŸš§ Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Update External Card data 
    # @param external_card_id [String] The unique identifier of an external card
    # @param external_card_update_request [ExternalCardUpdateRequest] Fields to update
    # @param [Hash] opts the optional parameters
    # @return [ExternalCardResponse]
    def update_external_card(external_card_id, external_card_update_request, opts = {})
      data, _status_code, _headers = update_external_card_with_http_info(external_card_id, external_card_update_request, opts)
      data
    end

    # Update External Card
    # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Update External Card data 
    # @param external_card_id [String] The unique identifier of an external card
    # @param external_card_update_request [ExternalCardUpdateRequest] Fields to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExternalCardResponse, Integer, Hash)>] ExternalCardResponse data, response status code and response headers
    def update_external_card_with_http_info(external_card_id, external_card_update_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalCardsBetaApi.update_external_card ...'
      end
      # verify the required parameter 'external_card_id' is set
      if @api_client.config.client_side_validation && external_card_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_card_id' when calling ExternalCardsBetaApi.update_external_card"
      end
      # verify the required parameter 'external_card_update_request' is set
      if @api_client.config.client_side_validation && external_card_update_request.nil?
        fail ArgumentError, "Missing the required parameter 'external_card_update_request' when calling ExternalCardsBetaApi.update_external_card"
      end
      # resource path
      local_var_path = '/external_cards/{external_card_id}'.sub('{' + 'external_card_id' + '}', CGI.escape(external_card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(external_card_update_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalCardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalCardsBetaApi.update_external_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalCardsBetaApi#update_external_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
