=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 1.82.0

Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'cgi'

module Synctera
  class BatchPaymentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Batch Payment Template
    # Create a Batch Payment template 
    # @param batch_payment_template [BatchPaymentTemplate] Attributes of the Batch Payment template
    # @param [Hash] opts the optional parameters
    # @return [BatchPaymentTemplate]
    def create_batch_payment_template(batch_payment_template, opts = {})
      data, _status_code, _headers = create_batch_payment_template_with_http_info(batch_payment_template, opts)
      data
    end

    # Create Batch Payment Template
    # Create a Batch Payment template 
    # @param batch_payment_template [BatchPaymentTemplate] Attributes of the Batch Payment template
    # @param [Hash] opts the optional parameters
    # @return [Array<(BatchPaymentTemplate, Integer, Hash)>] BatchPaymentTemplate data, response status code and response headers
    def create_batch_payment_template_with_http_info(batch_payment_template, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchPaymentsApi.create_batch_payment_template ...'
      end
      # verify the required parameter 'batch_payment_template' is set
      if @api_client.config.client_side_validation && batch_payment_template.nil?
        fail ArgumentError, "Missing the required parameter 'batch_payment_template' when calling BatchPaymentsApi.create_batch_payment_template"
      end
      # resource path
      local_var_path = '/batch_templates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(batch_payment_template)

      # return_type
      return_type = opts[:debug_return_type] || 'BatchPaymentTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"BatchPaymentsApi.create_batch_payment_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchPaymentsApi#create_batch_payment_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Batch Payments
    # Create multiple batch payments 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateBatchPaymentsRequest] :create_batch_payments_request Attributes of the Batch Payment
    # @return [CreateBatchPaymentsResponse]
    def create_batch_payments(opts = {})
      data, _status_code, _headers = create_batch_payments_with_http_info(opts)
      data
    end

    # Create Batch Payments
    # Create multiple batch payments 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateBatchPaymentsRequest] :create_batch_payments_request Attributes of the Batch Payment
    # @return [Array<(CreateBatchPaymentsResponse, Integer, Hash)>] CreateBatchPaymentsResponse data, response status code and response headers
    def create_batch_payments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchPaymentsApi.create_batch_payments ...'
      end
      # resource path
      local_var_path = '/batches'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_batch_payments_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateBatchPaymentsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"BatchPaymentsApi.create_batch_payments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchPaymentsApi#create_batch_payments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get BatchPayment
    # Get a Batch Payment 
    # @param id [String] ID
    # @param [Hash] opts the optional parameters
    # @return [BatchPayment]
    def get_batch_payment(id, opts = {})
      data, _status_code, _headers = get_batch_payment_with_http_info(id, opts)
      data
    end

    # Get BatchPayment
    # Get a Batch Payment 
    # @param id [String] ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(BatchPayment, Integer, Hash)>] BatchPayment data, response status code and response headers
    def get_batch_payment_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchPaymentsApi.get_batch_payment ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BatchPaymentsApi.get_batch_payment"
      end
      # resource path
      local_var_path = '/batches/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BatchPayment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"BatchPaymentsApi.get_batch_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchPaymentsApi#get_batch_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Batch Payment Template
    # Get a Batch Payment template 
    # @param id [String] ID
    # @param [Hash] opts the optional parameters
    # @return [BatchPaymentTemplate]
    def get_batch_payment_template(id, opts = {})
      data, _status_code, _headers = get_batch_payment_template_with_http_info(id, opts)
      data
    end

    # Get Batch Payment Template
    # Get a Batch Payment template 
    # @param id [String] ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(BatchPaymentTemplate, Integer, Hash)>] BatchPaymentTemplate data, response status code and response headers
    def get_batch_payment_template_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchPaymentsApi.get_batch_payment_template ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BatchPaymentsApi.get_batch_payment_template"
      end
      # resource path
      local_var_path = '/batch_templates/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BatchPaymentTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"BatchPaymentsApi.get_batch_payment_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchPaymentsApi#get_batch_payment_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Batch Payment Templates
    # Get all Batch Payment templates 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name of the Batch Template
    # @option opts [Boolean] :enabled Whether or not the template is enabled. If the template is not enabled, it will not be used when creating a batch transfer.
    # @option opts [String] :description Description of the Batch Template
    # @option opts [String] :page_token 
    # @option opts [Array<String>] :id Unique resource identifier
    # @option opts [Integer] :limit  (default to 100)
    # @return [Array<BatchPaymentTemplate>]
    def get_batch_payment_templates(opts = {})
      data, _status_code, _headers = get_batch_payment_templates_with_http_info(opts)
      data
    end

    # Get Batch Payment Templates
    # Get all Batch Payment templates 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name of the Batch Template
    # @option opts [Boolean] :enabled Whether or not the template is enabled. If the template is not enabled, it will not be used when creating a batch transfer.
    # @option opts [String] :description Description of the Batch Template
    # @option opts [String] :page_token 
    # @option opts [Array<String>] :id Unique resource identifier
    # @option opts [Integer] :limit  (default to 100)
    # @return [Array<(Array<BatchPaymentTemplate>, Integer, Hash)>] Array<BatchPaymentTemplate> data, response status code and response headers
    def get_batch_payment_templates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchPaymentsApi.get_batch_payment_templates ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling BatchPaymentsApi.get_batch_payment_templates, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/batch_templates'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'id'] = @api_client.build_collection_param(opts[:'id'], :csv) if !opts[:'id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BatchPaymentTemplate>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"BatchPaymentsApi.get_batch_payment_templates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchPaymentsApi#get_batch_payment_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Batch Payments
    # Get all Batch Payments 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id ID of the Batch Payment
    # @option opts [String] :status Status of the Batch Payment
    # @option opts [String] :template_id ID of the Batch Payment Template
    # @option opts [String] :transaction_id ID of the Batch Payment Transaction
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @return [Array<BatchPayment>]
    def get_batch_payments(opts = {})
      data, _status_code, _headers = get_batch_payments_with_http_info(opts)
      data
    end

    # Get Batch Payments
    # Get all Batch Payments 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id ID of the Batch Payment
    # @option opts [String] :status Status of the Batch Payment
    # @option opts [String] :template_id ID of the Batch Payment Template
    # @option opts [String] :transaction_id ID of the Batch Payment Transaction
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @return [Array<(Array<BatchPayment>, Integer, Hash)>] Array<BatchPayment> data, response status code and response headers
    def get_batch_payments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchPaymentsApi.get_batch_payments ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling BatchPaymentsApi.get_batch_payments, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/batches'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'template_id'] = opts[:'template_id'] if !opts[:'template_id'].nil?
      query_params[:'transaction_id'] = opts[:'transaction_id'] if !opts[:'transaction_id'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BatchPayment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"BatchPaymentsApi.get_batch_payments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchPaymentsApi#get_batch_payments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Batch Payment
    # Update a Batch Payment 
    # @param id [String] ID
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPaymentPatchRequest] :batch_payment_patch_request Attributes of the Batch Payment for udpate
    # @return [BatchPayment]
    def update_batch_payment(id, opts = {})
      data, _status_code, _headers = update_batch_payment_with_http_info(id, opts)
      data
    end

    # Update Batch Payment
    # Update a Batch Payment 
    # @param id [String] ID
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPaymentPatchRequest] :batch_payment_patch_request Attributes of the Batch Payment for udpate
    # @return [Array<(BatchPayment, Integer, Hash)>] BatchPayment data, response status code and response headers
    def update_batch_payment_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchPaymentsApi.update_batch_payment ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BatchPaymentsApi.update_batch_payment"
      end
      # resource path
      local_var_path = '/batches/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_payment_patch_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchPayment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"BatchPaymentsApi.update_batch_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchPaymentsApi#update_batch_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Batch Payment Template
    # Update a Batch Payment template 
    # @param id [String] ID
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPaymentTemplatePatch] :batch_payment_template_patch Attributes of the Batch Payment template
    # @return [BatchPaymentTemplate]
    def update_batch_payment_template(id, opts = {})
      data, _status_code, _headers = update_batch_payment_template_with_http_info(id, opts)
      data
    end

    # Update Batch Payment Template
    # Update a Batch Payment template 
    # @param id [String] ID
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPaymentTemplatePatch] :batch_payment_template_patch Attributes of the Batch Payment template
    # @return [Array<(BatchPaymentTemplate, Integer, Hash)>] BatchPaymentTemplate data, response status code and response headers
    def update_batch_payment_template_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchPaymentsApi.update_batch_payment_template ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BatchPaymentsApi.update_batch_payment_template"
      end
      # resource path
      local_var_path = '/batch_templates/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_payment_template_patch'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchPaymentTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"BatchPaymentsApi.update_batch_payment_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchPaymentsApi#update_batch_payment_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
