=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.139.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Synctera
  class CardsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Activate a card
    # Activate a card 
    # @param card_activation_request [CardActivationRequest] Card activation code
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [CardResponse]
    def activate_card(card_activation_request, opts = {})
      data, _status_code, _headers = activate_card_with_http_info(card_activation_request, opts)
      data
    end

    # Activate a card
    # Activate a card 
    # @param card_activation_request [CardActivationRequest] Card activation code
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(CardResponse, Integer, Hash)>] CardResponse data, response status code and response headers
    def activate_card_with_http_info(card_activation_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.activate_card ...'
      end
      # verify the required parameter 'card_activation_request' is set
      if @api_client.config.client_side_validation && card_activation_request.nil?
        fail ArgumentError, "Missing the required parameter 'card_activation_request' when calling CardsApi.activate_card"
      end
      # resource path
      local_var_path = '/cards/activate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(card_activation_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardsApi.activate_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#activate_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Card Image
    # Create a card image entity. Note that this does not include the image data itself. You can upload the image data via a subsequent uploadCardImageData request using the ID created here. 
    # @param create_card_image_request [CreateCardImageRequest] Details of the image to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [CardImageDetails]
    def create_card_image(create_card_image_request, opts = {})
      data, _status_code, _headers = create_card_image_with_http_info(create_card_image_request, opts)
      data
    end

    # Create Card Image
    # Create a card image entity. Note that this does not include the image data itself. You can upload the image data via a subsequent uploadCardImageData request using the ID created here. 
    # @param create_card_image_request [CreateCardImageRequest] Details of the image to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(CardImageDetails, Integer, Hash)>] CardImageDetails data, response status code and response headers
    def create_card_image_with_http_info(create_card_image_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.create_card_image ...'
      end
      # verify the required parameter 'create_card_image_request' is set
      if @api_client.config.client_side_validation && create_card_image_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_card_image_request' when calling CardsApi.create_card_image"
      end
      # resource path
      local_var_path = '/cards/images'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_card_image_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CardImageDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardsApi.create_card_image",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#create_card_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Gateway
    # Create a new Authorization Gateway Configuration 
    # @param create_gateway_request [CreateGatewayRequest] Create a new Authorization Gateway Configuration
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [GatewayResponse]
    def create_gateway(create_gateway_request, opts = {})
      data, _status_code, _headers = create_gateway_with_http_info(create_gateway_request, opts)
      data
    end

    # Create Gateway
    # Create a new Authorization Gateway Configuration 
    # @param create_gateway_request [CreateGatewayRequest] Create a new Authorization Gateway Configuration
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(GatewayResponse, Integer, Hash)>] GatewayResponse data, response status code and response headers
    def create_gateway_with_http_info(create_gateway_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.create_gateway ...'
      end
      # verify the required parameter 'create_gateway_request' is set
      if @api_client.config.client_side_validation && create_gateway_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_gateway_request' when calling CardsApi.create_gateway"
      end
      # resource path
      local_var_path = '/cards/gateways'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_gateway_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardsApi.create_gateway",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#create_gateway\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Card
    # Get the details about a card that has been issued 
    # @param card_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [CardResponse]
    def get_card(card_id, opts = {})
      data, _status_code, _headers = get_card_with_http_info(card_id, opts)
      data
    end

    # Get Card
    # Get the details about a card that has been issued 
    # @param card_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardResponse, Integer, Hash)>] CardResponse data, response status code and response headers
    def get_card_with_http_info(card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.get_card ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling CardsApi.get_card"
      end
      # resource path
      local_var_path = '/cards/{card_id}'.sub('{' + 'card_id' + '}', CGI.escape(card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardsApi.get_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#get_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Card Barcode
    # This endpoint is for testing environment only to provide access to barcode of a test card 
    # @param card_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [GetCardBarcode200Response]
    def get_card_barcode(card_id, opts = {})
      data, _status_code, _headers = get_card_barcode_with_http_info(card_id, opts)
      data
    end

    # Get Card Barcode
    # This endpoint is for testing environment only to provide access to barcode of a test card 
    # @param card_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetCardBarcode200Response, Integer, Hash)>] GetCardBarcode200Response data, response status code and response headers
    def get_card_barcode_with_http_info(card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.get_card_barcode ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling CardsApi.get_card_barcode"
      end
      # resource path
      local_var_path = '/cards/{card_id}/barcodes'.sub('{' + 'card_id' + '}', CGI.escape(card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetCardBarcode200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardsApi.get_card_barcode",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#get_card_barcode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Card Image Data
    # Get card image data
    # @param card_image_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_card_image_data(card_image_id, opts = {})
      data, _status_code, _headers = get_card_image_data_with_http_info(card_image_id, opts)
      data
    end

    # Get Card Image Data
    # Get card image data
    # @param card_image_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_card_image_data_with_http_info(card_image_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.get_card_image_data ...'
      end
      # verify the required parameter 'card_image_id' is set
      if @api_client.config.client_side_validation && card_image_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_image_id' when calling CardsApi.get_card_image_data"
      end
      # resource path
      local_var_path = '/cards/images/{card_image_id}/data'.sub('{' + 'card_image_id' + '}', CGI.escape(card_image_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/jpeg', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardsApi.get_card_image_data",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#get_card_image_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Card Image Details
    # Get card image details
    # @param card_image_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [CardImageDetails]
    def get_card_image_details(card_image_id, opts = {})
      data, _status_code, _headers = get_card_image_details_with_http_info(card_image_id, opts)
      data
    end

    # Get Card Image Details
    # Get card image details
    # @param card_image_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardImageDetails, Integer, Hash)>] CardImageDetails data, response status code and response headers
    def get_card_image_details_with_http_info(card_image_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.get_card_image_details ...'
      end
      # verify the required parameter 'card_image_id' is set
      if @api_client.config.client_side_validation && card_image_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_image_id' when calling CardsApi.get_card_image_details"
      end
      # resource path
      local_var_path = '/cards/images/{card_image_id}'.sub('{' + 'card_image_id' + '}', CGI.escape(card_image_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CardImageDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardsApi.get_card_image_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#get_card_image_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get card widget URL
    # This endpoint returns a URL address of the specified widget for a given card 
    # @param account_id [String] 
    # @param customer_id [String] 
    # @param widget_type [WidgetType] The type of widget for which to construct the URL
    # @param [Hash] opts the optional parameters
    # @option opts [String] :card_id The ID of the card (required for set PIN widget)
    # @return [CardWidgetUrlResponse]
    def get_card_widget_url(account_id, customer_id, widget_type, opts = {})
      data, _status_code, _headers = get_card_widget_url_with_http_info(account_id, customer_id, widget_type, opts)
      data
    end

    # Get card widget URL
    # This endpoint returns a URL address of the specified widget for a given card 
    # @param account_id [String] 
    # @param customer_id [String] 
    # @param widget_type [WidgetType] The type of widget for which to construct the URL
    # @param [Hash] opts the optional parameters
    # @option opts [String] :card_id The ID of the card (required for set PIN widget)
    # @return [Array<(CardWidgetUrlResponse, Integer, Hash)>] CardWidgetUrlResponse data, response status code and response headers
    def get_card_widget_url_with_http_info(account_id, customer_id, widget_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.get_card_widget_url ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling CardsApi.get_card_widget_url"
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CardsApi.get_card_widget_url"
      end
      # verify the required parameter 'widget_type' is set
      if @api_client.config.client_side_validation && widget_type.nil?
        fail ArgumentError, "Missing the required parameter 'widget_type' when calling CardsApi.get_card_widget_url"
      end
      # resource path
      local_var_path = '/cards/card_widget_url'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'account_id'] = account_id
      query_params[:'customer_id'] = customer_id
      query_params[:'widget_type'] = widget_type
      query_params[:'card_id'] = opts[:'card_id'] if !opts[:'card_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CardWidgetUrlResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardsApi.get_card_widget_url",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#get_card_widget_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a client token
    # Create a client access token for interacting with a card.  This token will be used on the client to identify the card for flows like viewing Full PAN or setting the PIN in a PCI compliant manner. 
    # @param card_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [ClientToken]
    def get_client_access_token(card_id, opts = {})
      data, _status_code, _headers = get_client_access_token_with_http_info(card_id, opts)
      data
    end

    # Get a client token
    # Create a client access token for interacting with a card.  This token will be used on the client to identify the card for flows like viewing Full PAN or setting the PIN in a PCI compliant manner. 
    # @param card_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(ClientToken, Integer, Hash)>] ClientToken data, response status code and response headers
    def get_client_access_token_with_http_info(card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.get_client_access_token ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling CardsApi.get_client_access_token"
      end
      # resource path
      local_var_path = '/cards/{card_id}/client_token'.sub('{' + 'card_id' + '}', CGI.escape(card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ClientToken'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardsApi.get_client_access_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#get_client_access_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get single-use token
    # This endpoint returns a single-use access token. This type of token authorizes a single request to access API endpoints and data associated with a particular user 
    # @param single_use_token_request [SingleUseTokenRequest] User token details
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [SingleUseTokenResponse]
    def get_client_single_use_token(single_use_token_request, opts = {})
      data, _status_code, _headers = get_client_single_use_token_with_http_info(single_use_token_request, opts)
      data
    end

    # Get single-use token
    # This endpoint returns a single-use access token. This type of token authorizes a single request to access API endpoints and data associated with a particular user 
    # @param single_use_token_request [SingleUseTokenRequest] User token details
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(SingleUseTokenResponse, Integer, Hash)>] SingleUseTokenResponse data, response status code and response headers
    def get_client_single_use_token_with_http_info(single_use_token_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.get_client_single_use_token ...'
      end
      # verify the required parameter 'single_use_token_request' is set
      if @api_client.config.client_side_validation && single_use_token_request.nil?
        fail ArgumentError, "Missing the required parameter 'single_use_token_request' when calling CardsApi.get_client_single_use_token"
      end
      # resource path
      local_var_path = '/cards/single_use_token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(single_use_token_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SingleUseTokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardsApi.get_client_single_use_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#get_client_single_use_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Gateway
    # Get the details of an Authorization Gateway that has been configured 
    # @param gateway_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayResponse]
    def get_gateway(gateway_id, opts = {})
      data, _status_code, _headers = get_gateway_with_http_info(gateway_id, opts)
      data
    end

    # Get Gateway
    # Get the details of an Authorization Gateway that has been configured 
    # @param gateway_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayResponse, Integer, Hash)>] GatewayResponse data, response status code and response headers
    def get_gateway_with_http_info(gateway_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.get_gateway ...'
      end
      # verify the required parameter 'gateway_id' is set
      if @api_client.config.client_side_validation && gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_id' when calling CardsApi.get_gateway"
      end
      # resource path
      local_var_path = '/cards/gateways/{gateway_id}'.sub('{' + 'gateway_id' + '}', CGI.escape(gateway_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardsApi.get_gateway",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#get_gateway\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Issue a Card
    # Issue or reissue a new card for a customer 
    # @param card_issuance_request [CardIssuanceRequest] Card to issue
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [CardResponse]
    def issue_card(card_issuance_request, opts = {})
      data, _status_code, _headers = issue_card_with_http_info(card_issuance_request, opts)
      data
    end

    # Issue a Card
    # Issue or reissue a new card for a customer 
    # @param card_issuance_request [CardIssuanceRequest] Card to issue
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(CardResponse, Integer, Hash)>] CardResponse data, response status code and response headers
    def issue_card_with_http_info(card_issuance_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.issue_card ...'
      end
      # verify the required parameter 'card_issuance_request' is set
      if @api_client.config.client_side_validation && card_issuance_request.nil?
        fail ArgumentError, "Missing the required parameter 'card_issuance_request' when calling CardsApi.issue_card"
      end
      # resource path
      local_var_path = '/cards'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(card_issuance_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardsApi.issue_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#issue_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Card Image Details
    # List all card image details 
    # @param customer_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [CardImageDetailsList]
    def list_card_image_details(customer_id, opts = {})
      data, _status_code, _headers = list_card_image_details_with_http_info(customer_id, opts)
      data
    end

    # List Card Image Details
    # List all card image details 
    # @param customer_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardImageDetailsList, Integer, Hash)>] CardImageDetailsList data, response status code and response headers
    def list_card_image_details_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.list_card_image_details ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CardsApi.list_card_image_details"
      end
      # resource path
      local_var_path = '/cards/images'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'customer_id'] = customer_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CardImageDetailsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardsApi.list_card_image_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#list_card_image_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Card Products
    # @param [Hash] opts the optional parameters
    # @option opts [Form] :form The format of the card
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @return [CardProductListResponse]
    def list_card_products(opts = {})
      data, _status_code, _headers = list_card_products_with_http_info(opts)
      data
    end

    # List Card Products
    # @param [Hash] opts the optional parameters
    # @option opts [Form] :form The format of the card
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @return [Array<(CardProductListResponse, Integer, Hash)>] CardProductListResponse data, response status code and response headers
    def list_card_products_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.list_card_products ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling CardsApi.list_card_products, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/cards/products'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'form'] = opts[:'form'] if !opts[:'form'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CardProductListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardsApi.list_card_products",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#list_card_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Cards
    # List of cards matching query parameters 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :last_four The last 4 digits of the card PAN
    # @option opts [String] :postal_code The postal code of a card user
    # @option opts [String] :customer_id 
    # @option opts [CardBrand] :card_brand The brand of a card product
    # @option opts [String] :bin_prefix 
    # @option opts [String] :emboss_name emboss name
    # @option opts [CardType] :card_type Indicates the type of card
    # @option opts [Form] :form The format of the card
    # @option opts [String] :page_token 
    # @option opts [CardStatus] :card_status The status of a card
    # @option opts [String] :card_product_id 
    # @option opts [Array<String>] :account_id Account ID(s). Multiple IDs can be provided as a comma-separated list.
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [String] :barcode 
    # @option opts [Date] :expiration_date The date representing when the card would expire at
    # @option opts [Array<String>] :sort_by Specifies the sort order for the returned cards. 
    # @return [CardListResponse]
    def list_cards(opts = {})
      data, _status_code, _headers = list_cards_with_http_info(opts)
      data
    end

    # List Cards
    # List of cards matching query parameters 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :last_four The last 4 digits of the card PAN
    # @option opts [String] :postal_code The postal code of a card user
    # @option opts [String] :customer_id 
    # @option opts [CardBrand] :card_brand The brand of a card product
    # @option opts [String] :bin_prefix 
    # @option opts [String] :emboss_name emboss name
    # @option opts [CardType] :card_type Indicates the type of card
    # @option opts [Form] :form The format of the card
    # @option opts [String] :page_token 
    # @option opts [CardStatus] :card_status The status of a card
    # @option opts [String] :card_product_id 
    # @option opts [Array<String>] :account_id Account ID(s). Multiple IDs can be provided as a comma-separated list.
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [String] :barcode 
    # @option opts [Date] :expiration_date The date representing when the card would expire at
    # @option opts [Array<String>] :sort_by Specifies the sort order for the returned cards. 
    # @return [Array<(CardListResponse, Integer, Hash)>] CardListResponse data, response status code and response headers
    def list_cards_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.list_cards ...'
      end
      pattern = Regexp.new(/^\d{4}$/)
      if @api_client.config.client_side_validation && !opts[:'last_four'].nil? && opts[:'last_four'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"last_four\"]' when calling CardsApi.list_cards, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^(\d{6}|\d{8})$/)
      if @api_client.config.client_side_validation && !opts[:'bin_prefix'].nil? && opts[:'bin_prefix'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"bin_prefix\"]' when calling CardsApi.list_cards, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling CardsApi.list_cards, must be greater than or equal to 1.'
      end

      pattern = Regexp.new(/\d{20}/)
      if @api_client.config.client_side_validation && !opts[:'barcode'].nil? && opts[:'barcode'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"barcode\"]' when calling CardsApi.list_cards, must conform to the pattern #{pattern}."
      end

      allowable_values = ["account_id:asc", "account_id:desc", "card_brand:asc", "card_brand:desc", "card_product_id:asc", "card_product_id:desc", "card_status:asc", "card_status:desc", "card_type:asc", "card_type:desc", "customer_id:asc", "customer_id:desc", "expiration_date:asc", "expiration_date:desc", "form:asc", "form:desc", "last_four:asc", "last_four:desc"]
      if @api_client.config.client_side_validation && opts[:'sort_by'] && !opts[:'sort_by'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"sort_by\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/cards'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'last_four'] = opts[:'last_four'] if !opts[:'last_four'].nil?
      query_params[:'postal_code'] = opts[:'postal_code'] if !opts[:'postal_code'].nil?
      query_params[:'customer_id'] = opts[:'customer_id'] if !opts[:'customer_id'].nil?
      query_params[:'card_brand'] = opts[:'card_brand'] if !opts[:'card_brand'].nil?
      query_params[:'bin_prefix'] = opts[:'bin_prefix'] if !opts[:'bin_prefix'].nil?
      query_params[:'emboss_name'] = opts[:'emboss_name'] if !opts[:'emboss_name'].nil?
      query_params[:'card_type'] = opts[:'card_type'] if !opts[:'card_type'].nil?
      query_params[:'form'] = opts[:'form'] if !opts[:'form'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'card_status'] = opts[:'card_status'] if !opts[:'card_status'].nil?
      query_params[:'card_product_id'] = opts[:'card_product_id'] if !opts[:'card_product_id'].nil?
      query_params[:'account_id'] = @api_client.build_collection_param(opts[:'account_id'], :csv) if !opts[:'account_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'barcode'] = opts[:'barcode'] if !opts[:'barcode'].nil?
      query_params[:'expiration_date'] = opts[:'expiration_date'] if !opts[:'expiration_date'].nil?
      query_params[:'sort_by'] = @api_client.build_collection_param(opts[:'sort_by'], :csv) if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CardListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardsApi.list_cards",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#list_cards\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Card Changes
    # List card change history 
    # @param card_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [CardChangesList]
    def list_changes(card_id, opts = {})
      data, _status_code, _headers = list_changes_with_http_info(card_id, opts)
      data
    end

    # List Card Changes
    # List card change history 
    # @param card_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardChangesList, Integer, Hash)>] CardChangesList data, response status code and response headers
    def list_changes_with_http_info(card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.list_changes ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling CardsApi.list_changes"
      end
      # resource path
      local_var_path = '/cards/{card_id}/changes'.sub('{' + 'card_id' + '}', CGI.escape(card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CardChangesList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardsApi.list_changes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#list_changes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Gateways
    # List of gateways matching query parameters 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @return [GatewayListResponse]
    def list_gateways(opts = {})
      data, _status_code, _headers = list_gateways_with_http_info(opts)
      data
    end

    # List Gateways
    # List of gateways matching query parameters 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @return [Array<(GatewayListResponse, Integer, Hash)>] GatewayListResponse data, response status code and response headers
    def list_gateways_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.list_gateways ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling CardsApi.list_gateways, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/cards/gateways'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardsApi.list_gateways",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#list_gateways\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Card
    # Integrators can update the card resource to change status, update shipping (if the card hasn't been shipped) or edit metadata. 
    # @param card_id [String] 
    # @param card_edit_request [CardEditRequest] Card edits
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [CardResponse]
    def update_card(card_id, card_edit_request, opts = {})
      data, _status_code, _headers = update_card_with_http_info(card_id, card_edit_request, opts)
      data
    end

    # Update Card
    # Integrators can update the card resource to change status, update shipping (if the card hasn&#39;t been shipped) or edit metadata. 
    # @param card_id [String] 
    # @param card_edit_request [CardEditRequest] Card edits
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(CardResponse, Integer, Hash)>] CardResponse data, response status code and response headers
    def update_card_with_http_info(card_id, card_edit_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.update_card ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling CardsApi.update_card"
      end
      # verify the required parameter 'card_edit_request' is set
      if @api_client.config.client_side_validation && card_edit_request.nil?
        fail ArgumentError, "Missing the required parameter 'card_edit_request' when calling CardsApi.update_card"
      end
      # resource path
      local_var_path = '/cards/{card_id}'.sub('{' + 'card_id' + '}', CGI.escape(card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(card_edit_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardsApi.update_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#update_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Card Image Details
    # Update card image details. The only detail that can be updated is the card status as APPROVED or REJECTED.
    # @param card_image_id [String] 
    # @param update_card_image_request [UpdateCardImageRequest] Details of the image to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [CardImageDetails]
    def update_card_image_details(card_image_id, update_card_image_request, opts = {})
      data, _status_code, _headers = update_card_image_details_with_http_info(card_image_id, update_card_image_request, opts)
      data
    end

    # Update Card Image Details
    # Update card image details. The only detail that can be updated is the card status as APPROVED or REJECTED.
    # @param card_image_id [String] 
    # @param update_card_image_request [UpdateCardImageRequest] Details of the image to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(CardImageDetails, Integer, Hash)>] CardImageDetails data, response status code and response headers
    def update_card_image_details_with_http_info(card_image_id, update_card_image_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.update_card_image_details ...'
      end
      # verify the required parameter 'card_image_id' is set
      if @api_client.config.client_side_validation && card_image_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_image_id' when calling CardsApi.update_card_image_details"
      end
      # verify the required parameter 'update_card_image_request' is set
      if @api_client.config.client_side_validation && update_card_image_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_card_image_request' when calling CardsApi.update_card_image_details"
      end
      # resource path
      local_var_path = '/cards/images/{card_image_id}'.sub('{' + 'card_image_id' + '}', CGI.escape(card_image_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_card_image_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CardImageDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardsApi.update_card_image_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#update_card_image_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Gateway
    # Update Authorization Gateway configuration 
    # @param gateway_id [String] 
    # @param update_gateway_request [UpdateGatewayRequest] Gateway edits
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [GatewayResponse]
    def update_gateway(gateway_id, update_gateway_request, opts = {})
      data, _status_code, _headers = update_gateway_with_http_info(gateway_id, update_gateway_request, opts)
      data
    end

    # Update Gateway
    # Update Authorization Gateway configuration 
    # @param gateway_id [String] 
    # @param update_gateway_request [UpdateGatewayRequest] Gateway edits
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(GatewayResponse, Integer, Hash)>] GatewayResponse data, response status code and response headers
    def update_gateway_with_http_info(gateway_id, update_gateway_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.update_gateway ...'
      end
      # verify the required parameter 'gateway_id' is set
      if @api_client.config.client_side_validation && gateway_id.nil?
        fail ArgumentError, "Missing the required parameter 'gateway_id' when calling CardsApi.update_gateway"
      end
      # verify the required parameter 'update_gateway_request' is set
      if @api_client.config.client_side_validation && update_gateway_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_gateway_request' when calling CardsApi.update_gateway"
      end
      # resource path
      local_var_path = '/cards/gateways/{gateway_id}'.sub('{' + 'gateway_id' + '}', CGI.escape(gateway_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_gateway_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardsApi.update_gateway",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#update_gateway\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload Card Image
    # Upload card image data
    # @param card_image_id [String] 
    # @param body [File] Binary image data
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [CardImageDetails]
    def upload_card_image_data(card_image_id, body, opts = {})
      data, _status_code, _headers = upload_card_image_data_with_http_info(card_image_id, body, opts)
      data
    end

    # Upload Card Image
    # Upload card image data
    # @param card_image_id [String] 
    # @param body [File] Binary image data
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(CardImageDetails, Integer, Hash)>] CardImageDetails data, response status code and response headers
    def upload_card_image_data_with_http_info(card_image_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.upload_card_image_data ...'
      end
      # verify the required parameter 'card_image_id' is set
      if @api_client.config.client_side_validation && card_image_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_image_id' when calling CardsApi.upload_card_image_data"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CardsApi.upload_card_image_data"
      end
      # resource path
      local_var_path = '/cards/images/{card_image_id}/data'.sub('{' + 'card_image_id' + '}', CGI.escape(card_image_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['image/jpeg'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CardImageDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CardsApi.upload_card_image_data",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#upload_card_image_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
