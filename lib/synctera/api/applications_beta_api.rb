=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 1.82.0

Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'cgi'

module Synctera
  class ApplicationsBetaApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an application
    # > ðŸš§ Beta > This is an Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Submit a record of application details for an account. 
    # @param application [Application] Application model.
    # @param [Hash] opts the optional parameters
    # @return [ApplicationResponse]
    def create_application(application, opts = {})
      data, _status_code, _headers = create_application_with_http_info(application, opts)
      data
    end

    # Create an application
    # &gt; ðŸš§ Beta &gt; This is an Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Submit a record of application details for an account. 
    # @param application [Application] Application model.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplicationResponse, Integer, Hash)>] ApplicationResponse data, response status code and response headers
    def create_application_with_http_info(application, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationsBetaApi.create_application ...'
      end
      # verify the required parameter 'application' is set
      if @api_client.config.client_side_validation && application.nil?
        fail ArgumentError, "Missing the required parameter 'application' when calling ApplicationsBetaApi.create_application"
      end
      # resource path
      local_var_path = '/applications'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(application)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplicationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ApplicationsBetaApi.create_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationsBetaApi#create_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an application
    # > ðŸš§ Beta > This is an Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Get an application's details. 
    # @param application_id [String] Unique identifier for the application.
    # @param [Hash] opts the optional parameters
    # @return [ApplicationResponse]
    def get_application(application_id, opts = {})
      data, _status_code, _headers = get_application_with_http_info(application_id, opts)
      data
    end

    # Get an application
    # &gt; ðŸš§ Beta &gt; This is an Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Get an application&#39;s details. 
    # @param application_id [String] Unique identifier for the application.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplicationResponse, Integer, Hash)>] ApplicationResponse data, response status code and response headers
    def get_application_with_http_info(application_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationsBetaApi.get_application ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling ApplicationsBetaApi.get_application"
      end
      # resource path
      local_var_path = '/applications/{application_id}'.sub('{' + 'application_id' + '}', CGI.escape(application_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplicationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ApplicationsBetaApi.get_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationsBetaApi#get_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List applications
    # > ðŸš§ Beta > This is an Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  List records of applications made for accounts. 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :customer_id A list of customer unique identifiers, with a comma separating any values.
    # @option opts [ApplicationType] :type Type of application 
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [Array<String>] :sort_by Specifies the sort order for the returned applications. 
    # @option opts [AllApplicationStatus] :status Application status values for all types of applications 
    # @option opts [Array<String>] :business_id A list of business unique identifiers, with a comma separating any values. Returns applications that are linked to the specified Business IDs.
    # @return [ApplicationList]
    def list_applications(opts = {})
      data, _status_code, _headers = list_applications_with_http_info(opts)
      data
    end

    # List applications
    # &gt; ðŸš§ Beta &gt; This is an Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  List records of applications made for accounts. 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :customer_id A list of customer unique identifiers, with a comma separating any values.
    # @option opts [ApplicationType] :type Type of application 
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [Array<String>] :sort_by Specifies the sort order for the returned applications. 
    # @option opts [AllApplicationStatus] :status Application status values for all types of applications 
    # @option opts [Array<String>] :business_id A list of business unique identifiers, with a comma separating any values. Returns applications that are linked to the specified Business IDs.
    # @return [Array<(ApplicationList, Integer, Hash)>] ApplicationList data, response status code and response headers
    def list_applications_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationsBetaApi.list_applications ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ApplicationsBetaApi.list_applications, must be greater than or equal to 1.'
      end

      allowable_values = ["creation_time:asc", "creation_time:desc", "last_updated_time:asc", "last_updated_time:desc", "status:asc", "status:desc", "type:asc", "type:desc"]
      if @api_client.config.client_side_validation && opts[:'sort_by'] && !opts[:'sort_by'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"sort_by\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/applications'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'customer_id'] = @api_client.build_collection_param(opts[:'customer_id'], :csv) if !opts[:'customer_id'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort_by'] = @api_client.build_collection_param(opts[:'sort_by'], :csv) if !opts[:'sort_by'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'business_id'] = @api_client.build_collection_param(opts[:'business_id'], :csv) if !opts[:'business_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplicationList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ApplicationsBetaApi.list_applications",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationsBetaApi#list_applications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Modify an application
    # > ðŸš§ Beta > This is an Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Modify an existing application for an account. 
    # @param application_id [String] Unique identifier for the application.
    # @param application_patch [ApplicationPatch] Application fields to be patched.
    # @param [Hash] opts the optional parameters
    # @return [ApplicationResponse]
    def patch_application(application_id, application_patch, opts = {})
      data, _status_code, _headers = patch_application_with_http_info(application_id, application_patch, opts)
      data
    end

    # Modify an application
    # &gt; ðŸš§ Beta &gt; This is an Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Modify an existing application for an account. 
    # @param application_id [String] Unique identifier for the application.
    # @param application_patch [ApplicationPatch] Application fields to be patched.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplicationResponse, Integer, Hash)>] ApplicationResponse data, response status code and response headers
    def patch_application_with_http_info(application_id, application_patch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationsBetaApi.patch_application ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling ApplicationsBetaApi.patch_application"
      end
      # verify the required parameter 'application_patch' is set
      if @api_client.config.client_side_validation && application_patch.nil?
        fail ArgumentError, "Missing the required parameter 'application_patch' when calling ApplicationsBetaApi.patch_application"
      end
      # resource path
      local_var_path = '/applications/{application_id}'.sub('{' + 'application_id' + '}', CGI.escape(application_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(application_patch)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplicationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ApplicationsBetaApi.patch_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationsBetaApi#patch_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
