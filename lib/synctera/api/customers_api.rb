=begin
#Synctera API

#<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.74.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'cgi'

module Synctera
  class CustomersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a Customer
    # The customer object represents your customer's identity. You can then verify the identity of this customer and associate them with other people and accounts. Note that if no shipping_address attribute is provided in the request, the shipping_address will be set to a copy of the legal_address. 
    # @param customer_in_body [CustomerInBody] Customer to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [CustomerInBody]
    def create_customer(customer_in_body, opts = {})
      data, _status_code, _headers = create_customer_with_http_info(customer_in_body, opts)
      data
    end

    # Create a Customer
    # The customer object represents your customer&#39;s identity. You can then verify the identity of this customer and associate them with other people and accounts. Note that if no shipping_address attribute is provided in the request, the shipping_address will be set to a copy of the legal_address. 
    # @param customer_in_body [CustomerInBody] Customer to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(CustomerInBody, Integer, Hash)>] CustomerInBody data, response status code and response headers
    def create_customer_with_http_info(customer_in_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.create_customer ...'
      end
      # verify the required parameter 'customer_in_body' is set
      if @api_client.config.client_side_validation && customer_in_body.nil?
        fail ArgumentError, "Missing the required parameter 'customer_in_body' when calling CustomersApi.create_customer"
      end
      # resource path
      local_var_path = '/customers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(customer_in_body)

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerInBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CustomersApi.create_customer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#create_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create employment record
    # Create a customer employment record.
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param employment [Employment] Customer employment record to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Employment]
    def create_customer_employment(customer_id, employment, opts = {})
      data, _status_code, _headers = create_customer_employment_with_http_info(customer_id, employment, opts)
      data
    end

    # Create employment record
    # Create a customer employment record.
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param employment [Employment] Customer employment record to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(Employment, Integer, Hash)>] Employment data, response status code and response headers
    def create_customer_employment_with_http_info(customer_id, employment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.create_customer_employment ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomersApi.create_customer_employment"
      end
      # verify the required parameter 'employment' is set
      if @api_client.config.client_side_validation && employment.nil?
        fail ArgumentError, "Missing the required parameter 'employment' when calling CustomersApi.create_customer_employment"
      end
      # resource path
      local_var_path = '/customers/{customer_id}/employment'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(employment)

      # return_type
      return_type = opts[:debug_return_type] || 'Employment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CustomersApi.create_customer_employment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#create_customer_employment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create customer risk rating
    # Create customer risk rating
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @option opts [RiskRating] :risk_rating Create a customer risk rating. With a risk rating in request body, Synctera validates the data and saves it. With no request body, Synctera runs an automated risk analysis and saves the result. 
    # @return [RiskRating]
    def create_customer_risk_rating(customer_id, opts = {})
      data, _status_code, _headers = create_customer_risk_rating_with_http_info(customer_id, opts)
      data
    end

    # Create customer risk rating
    # Create customer risk rating
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @option opts [RiskRating] :risk_rating Create a customer risk rating. With a risk rating in request body, Synctera validates the data and saves it. With no request body, Synctera runs an automated risk analysis and saves the result. 
    # @return [Array<(RiskRating, Integer, Hash)>] RiskRating data, response status code and response headers
    def create_customer_risk_rating_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.create_customer_risk_rating ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomersApi.create_customer_risk_rating"
      end
      # resource path
      local_var_path = '/customers/{customer_id}/risk_ratings'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'risk_rating'])

      # return_type
      return_type = opts[:debug_return_type] || 'RiskRating'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CustomersApi.create_customer_risk_rating",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#create_customer_risk_rating\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List customer employment records
    # Get a list of customer's current employment records. To see historic employment pass the `include_history` flag. 
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_history If true, include old (inactive) records as well. (default to false)
    # @return [EmploymentList]
    def get_all_customer_employment(customer_id, opts = {})
      data, _status_code, _headers = get_all_customer_employment_with_http_info(customer_id, opts)
      data
    end

    # List customer employment records
    # Get a list of customer&#39;s current employment records. To see historic employment pass the &#x60;include_history&#x60; flag. 
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_history If true, include old (inactive) records as well. (default to false)
    # @return [Array<(EmploymentList, Integer, Hash)>] EmploymentList data, response status code and response headers
    def get_all_customer_employment_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.get_all_customer_employment ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomersApi.get_all_customer_employment"
      end
      # resource path
      local_var_path = '/customers/{customer_id}/employment'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include_history'] = opts[:'include_history'] if !opts[:'include_history'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmploymentList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CustomersApi.get_all_customer_employment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#get_all_customer_employment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List customer risk ratings
    # Get list of customer risk ratings
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_history If true, include old (inactive) records as well. (default to false)
    # @return [RiskRatingList]
    def get_all_customer_risk_ratings(customer_id, opts = {})
      data, _status_code, _headers = get_all_customer_risk_ratings_with_http_info(customer_id, opts)
      data
    end

    # List customer risk ratings
    # Get list of customer risk ratings
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_history If true, include old (inactive) records as well. (default to false)
    # @return [Array<(RiskRatingList, Integer, Hash)>] RiskRatingList data, response status code and response headers
    def get_all_customer_risk_ratings_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.get_all_customer_risk_ratings ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomersApi.get_all_customer_risk_ratings"
      end
      # resource path
      local_var_path = '/customers/{customer_id}/risk_ratings'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include_history'] = opts[:'include_history'] if !opts[:'include_history'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RiskRatingList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CustomersApi.get_all_customer_risk_ratings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#get_all_customer_risk_ratings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Customer
    # Get Customer based on ID
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param [Hash] opts the optional parameters
    # @return [CustomerInBody]
    def get_customer(customer_id, opts = {})
      data, _status_code, _headers = get_customer_with_http_info(customer_id, opts)
      data
    end

    # Get Customer
    # Get Customer based on ID
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomerInBody, Integer, Hash)>] CustomerInBody data, response status code and response headers
    def get_customer_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.get_customer ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomersApi.get_customer"
      end
      # resource path
      local_var_path = '/customers/{customer_id}'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerInBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CustomersApi.get_customer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#get_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get customer risk rating
    # Get a customer risk rating
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param risk_rating_id [String] Risk Rating ID
    # @param [Hash] opts the optional parameters
    # @return [RiskRating]
    def get_customer_risk_rating(customer_id, risk_rating_id, opts = {})
      data, _status_code, _headers = get_customer_risk_rating_with_http_info(customer_id, risk_rating_id, opts)
      data
    end

    # Get customer risk rating
    # Get a customer risk rating
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param risk_rating_id [String] Risk Rating ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(RiskRating, Integer, Hash)>] RiskRating data, response status code and response headers
    def get_customer_risk_rating_with_http_info(customer_id, risk_rating_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.get_customer_risk_rating ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomersApi.get_customer_risk_rating"
      end
      # verify the required parameter 'risk_rating_id' is set
      if @api_client.config.client_side_validation && risk_rating_id.nil?
        fail ArgumentError, "Missing the required parameter 'risk_rating_id' when calling CustomersApi.get_customer_risk_rating"
      end
      # resource path
      local_var_path = '/customers/{customer_id}/risk_ratings/{risk_rating_id}'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'risk_rating_id' + '}', CGI.escape(risk_rating_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RiskRating'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CustomersApi.get_customer_risk_rating",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#get_customer_risk_rating\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get customer employment record
    # Get a single record of customer employment
    # @param employment_id [String] Unique ID for the employment record.
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Employment]
    def get_party_employment(employment_id, customer_id, opts = {})
      data, _status_code, _headers = get_party_employment_with_http_info(employment_id, customer_id, opts)
      data
    end

    # Get customer employment record
    # Get a single record of customer employment
    # @param employment_id [String] Unique ID for the employment record.
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Employment, Integer, Hash)>] Employment data, response status code and response headers
    def get_party_employment_with_http_info(employment_id, customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.get_party_employment ...'
      end
      # verify the required parameter 'employment_id' is set
      if @api_client.config.client_side_validation && employment_id.nil?
        fail ArgumentError, "Missing the required parameter 'employment_id' when calling CustomersApi.get_party_employment"
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomersApi.get_party_employment"
      end
      # resource path
      local_var_path = '/customers/{customer_id}/employment/{employment_id}'.sub('{' + 'employment_id' + '}', CGI.escape(employment_id.to_s)).sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Employment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CustomersApi.get_party_employment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#get_party_employment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Customers
    # Retrieves paginated list of Customers associated with the authorized requester
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :has_accounts Filter on resources that have an account(s) 
    # @option opts [String] :ssn_last_4 
    # @option opts [String] :last_name 
    # @option opts [String] :email 
    # @option opts [String] :first_name 
    # @option opts [String] :status 
    # @option opts [String] :phone_number 
    # @option opts [String] :page_token 
    # @option opts [Array<String>] :id Unique resource identifier
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [Array<String>] :sort_by Specifies the sort order for the returned customers. 
    # @return [CustomerList]
    def list_customers(opts = {})
      data, _status_code, _headers = list_customers_with_http_info(opts)
      data
    end

    # List Customers
    # Retrieves paginated list of Customers associated with the authorized requester
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :has_accounts Filter on resources that have an account(s) 
    # @option opts [String] :ssn_last_4 
    # @option opts [String] :last_name 
    # @option opts [String] :email 
    # @option opts [String] :first_name 
    # @option opts [String] :status 
    # @option opts [String] :phone_number 
    # @option opts [String] :page_token 
    # @option opts [Array<String>] :id Unique resource identifier
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [Array<String>] :sort_by Specifies the sort order for the returned customers. 
    # @return [Array<(CustomerList, Integer, Hash)>] CustomerList data, response status code and response headers
    def list_customers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.list_customers ...'
      end
      if @api_client.config.client_side_validation && !opts[:'ssn_last_4'].nil? && opts[:'ssn_last_4'].to_s.length > 4
        fail ArgumentError, 'invalid value for "opts[:"ssn_last_4"]" when calling CustomersApi.list_customers, the character length must be smaller than or equal to 4.'
      end

      if @api_client.config.client_side_validation && !opts[:'ssn_last_4'].nil? && opts[:'ssn_last_4'].to_s.length < 4
        fail ArgumentError, 'invalid value for "opts[:"ssn_last_4"]" when calling CustomersApi.list_customers, the character length must be great than or equal to 4.'
      end

      allowable_values = ["ACTIVE", "DECEASED", "DENIED", "DORMANT", "ESCHEAT", "FROZEN", "INACTIVE", "PROSPECT", "SANCTION"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling CustomersApi.list_customers, must be greater than or equal to 1.'
      end

      allowable_values = ["creation_time:asc", "creation_time:desc", "first_name:asc", "first_name:desc", "last_name:asc", "last_name:desc", "last_updated_time:asc", "last_updated_time:desc"]
      if @api_client.config.client_side_validation && opts[:'sort_by'] && !opts[:'sort_by'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"sort_by\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/customers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'has_accounts'] = opts[:'has_accounts'] if !opts[:'has_accounts'].nil?
      query_params[:'ssn_last_4'] = opts[:'ssn_last_4'] if !opts[:'ssn_last_4'].nil?
      query_params[:'last_name'] = opts[:'last_name'] if !opts[:'last_name'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'first_name'] = opts[:'first_name'] if !opts[:'first_name'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'phone_number'] = opts[:'phone_number'] if !opts[:'phone_number'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'id'] = @api_client.build_collection_param(opts[:'id'], :csv) if !opts[:'id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort_by'] = @api_client.build_collection_param(opts[:'sort_by'], :csv) if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CustomersApi.list_customers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#list_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patch Customer
    # Patch fields of customer based on ID Note that if:   * legal address is provided in the request, AND   * shipping_address is not provided in the request, AND   * the customer resource does not have shipping_address   then shipping_address will be set to a copy of the legal_address. 
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param patch_customer [PatchCustomer] Customer to be patched
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [CustomerInBody]
    def patch_customer(customer_id, patch_customer, opts = {})
      data, _status_code, _headers = patch_customer_with_http_info(customer_id, patch_customer, opts)
      data
    end

    # Patch Customer
    # Patch fields of customer based on ID Note that if:   * legal address is provided in the request, AND   * shipping_address is not provided in the request, AND   * the customer resource does not have shipping_address   then shipping_address will be set to a copy of the legal_address. 
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param patch_customer [PatchCustomer] Customer to be patched
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(CustomerInBody, Integer, Hash)>] CustomerInBody data, response status code and response headers
    def patch_customer_with_http_info(customer_id, patch_customer, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.patch_customer ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomersApi.patch_customer"
      end
      # verify the required parameter 'patch_customer' is set
      if @api_client.config.client_side_validation && patch_customer.nil?
        fail ArgumentError, "Missing the required parameter 'patch_customer' when calling CustomersApi.patch_customer"
      end
      # resource path
      local_var_path = '/customers/{customer_id}'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(patch_customer)

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerInBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CustomersApi.patch_customer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#patch_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Customer
    # Update customer based on ID Note that if no shipping_address attribute is provided in the request, the shipping_address will be set to a copy of the legal_address. 
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param customer_in_body [CustomerInBody] Customer to be updated
    # @param [Hash] opts the optional parameters
    # @return [CustomerInBody]
    def update_customer(customer_id, customer_in_body, opts = {})
      data, _status_code, _headers = update_customer_with_http_info(customer_id, customer_in_body, opts)
      data
    end

    # Update Customer
    # Update customer based on ID Note that if no shipping_address attribute is provided in the request, the shipping_address will be set to a copy of the legal_address. 
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param customer_in_body [CustomerInBody] Customer to be updated
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomerInBody, Integer, Hash)>] CustomerInBody data, response status code and response headers
    def update_customer_with_http_info(customer_id, customer_in_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.update_customer ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomersApi.update_customer"
      end
      # verify the required parameter 'customer_in_body' is set
      if @api_client.config.client_side_validation && customer_in_body.nil?
        fail ArgumentError, "Missing the required parameter 'customer_in_body' when calling CustomersApi.update_customer"
      end
      # resource path
      local_var_path = '/customers/{customer_id}'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(customer_in_body)

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerInBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CustomersApi.update_customer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#update_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update customer employment record
    # Update a single record of customer employment.
    # @param employment_id [String] Unique ID for the employment record.
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param employment [Employment] Customer employment to update.
    # @param [Hash] opts the optional parameters
    # @return [Employment]
    def update_party_employment(employment_id, customer_id, employment, opts = {})
      data, _status_code, _headers = update_party_employment_with_http_info(employment_id, customer_id, employment, opts)
      data
    end

    # Update customer employment record
    # Update a single record of customer employment.
    # @param employment_id [String] Unique ID for the employment record.
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param employment [Employment] Customer employment to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Employment, Integer, Hash)>] Employment data, response status code and response headers
    def update_party_employment_with_http_info(employment_id, customer_id, employment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.update_party_employment ...'
      end
      # verify the required parameter 'employment_id' is set
      if @api_client.config.client_side_validation && employment_id.nil?
        fail ArgumentError, "Missing the required parameter 'employment_id' when calling CustomersApi.update_party_employment"
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomersApi.update_party_employment"
      end
      # verify the required parameter 'employment' is set
      if @api_client.config.client_side_validation && employment.nil?
        fail ArgumentError, "Missing the required parameter 'employment' when calling CustomersApi.update_party_employment"
      end
      # resource path
      local_var_path = '/customers/{customer_id}/employment/{employment_id}'.sub('{' + 'employment_id' + '}', CGI.escape(employment_id.to_s)).sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(employment)

      # return_type
      return_type = opts[:debug_return_type] || 'Employment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CustomersApi.update_party_employment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#update_party_employment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
