=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.147.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module Synctera
  class KYCKYBVerificationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a verification
    # Upload evidence of an externally performed KYC/KYB.   You may use your own KYC/KYB provider and upload evidence of those results instead of using one of Synctera's providers.  Verifying a personal customer requires that the following fields already be set: * `first_name` * `last_name` * `dob` * `email` or `phone_number` * `legal_address` * `shippings_address` * `ssn` or at least one other identifier in `personal_ids`  Verifying a business customer requires that the following fields already be set: * `entity_name` * `legal_address` * `email` or `phone_number` * `ein` not required for sole proprietorships  Please refer to https://learn.synctera.com/docs/using-your-own-kyc-vendor for more details using external KYC/KYB. 
    # @param verification [Verification] Verification result to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Verification]
    def create_verification(verification, opts = {})
      data, _status_code, _headers = create_verification_with_http_info(verification, opts)
      data
    end

    # Create a verification
    # Upload evidence of an externally performed KYC/KYB.   You may use your own KYC/KYB provider and upload evidence of those results instead of using one of Synctera&#39;s providers.  Verifying a personal customer requires that the following fields already be set: * &#x60;first_name&#x60; * &#x60;last_name&#x60; * &#x60;dob&#x60; * &#x60;email&#x60; or &#x60;phone_number&#x60; * &#x60;legal_address&#x60; * &#x60;shippings_address&#x60; * &#x60;ssn&#x60; or at least one other identifier in &#x60;personal_ids&#x60;  Verifying a business customer requires that the following fields already be set: * &#x60;entity_name&#x60; * &#x60;legal_address&#x60; * &#x60;email&#x60; or &#x60;phone_number&#x60; * &#x60;ein&#x60; not required for sole proprietorships  Please refer to https://learn.synctera.com/docs/using-your-own-kyc-vendor for more details using external KYC/KYB. 
    # @param verification [Verification] Verification result to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(Verification, Integer, Hash)>] Verification data, response status code and response headers
    def create_verification_with_http_info(verification, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KYCKYBVerificationsApi.create_verification ...'
      end
      # verify the required parameter 'verification' is set
      if @api_client.config.client_side_validation && verification.nil?
        fail ArgumentError, "Missing the required parameter 'verification' when calling KYCKYBVerificationsApi.create_verification"
      end
      # resource path
      local_var_path = '/verifications'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(verification)

      # return_type
      return_type = opts[:debug_return_type] || 'Verification'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"KYCKYBVerificationsApi.create_verification",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KYCKYBVerificationsApi#create_verification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get verification
    # Get customer verification result.
    # @param verification_id [String] Verification&#39;s unique identifier.
    # @param [Hash] opts the optional parameters
    # @return [Verification]
    def get_verification1(verification_id, opts = {})
      data, _status_code, _headers = get_verification1_with_http_info(verification_id, opts)
      data
    end

    # Get verification
    # Get customer verification result.
    # @param verification_id [String] Verification&#39;s unique identifier.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Verification, Integer, Hash)>] Verification data, response status code and response headers
    def get_verification1_with_http_info(verification_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KYCKYBVerificationsApi.get_verification1 ...'
      end
      # verify the required parameter 'verification_id' is set
      if @api_client.config.client_side_validation && verification_id.nil?
        fail ArgumentError, "Missing the required parameter 'verification_id' when calling KYCKYBVerificationsApi.get_verification1"
      end
      # resource path
      local_var_path = '/verifications/{verification_id}'.sub('{' + 'verification_id' + '}', CGI.escape(verification_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Verification'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"KYCKYBVerificationsApi.get_verification1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KYCKYBVerificationsApi#get_verification1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List verifications
    # List customer verification results.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :id Unique identifier for the resource. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [Array<VerificationType>] :verification_type The type of verification run. Multiple values can be provided as a comma-separated list. 
    # @option opts [Array<String>] :business_id Unique identifier for the business. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [Boolean] :include_history If true, include old (inactive) records as well. (default to false)
    # @option opts [String] :page_token 
    # @option opts [Array<VerificationResult>] :result The result of the verification that was run on the party. Multiple values can be provided as a comma-separated list. 
    # @option opts [Array<String>] :person_id Unique identifier for the person. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [Integer] :limit  (default to 100)
    # @return [VerificationList]
    def list_verifications1(opts = {})
      data, _status_code, _headers = list_verifications1_with_http_info(opts)
      data
    end

    # List verifications
    # List customer verification results.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :id Unique identifier for the resource. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [Array<VerificationType>] :verification_type The type of verification run. Multiple values can be provided as a comma-separated list. 
    # @option opts [Array<String>] :business_id Unique identifier for the business. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [Boolean] :include_history If true, include old (inactive) records as well. (default to false)
    # @option opts [String] :page_token 
    # @option opts [Array<VerificationResult>] :result The result of the verification that was run on the party. Multiple values can be provided as a comma-separated list. 
    # @option opts [Array<String>] :person_id Unique identifier for the person. Multiple IDs can be provided as a comma-separated list. 
    # @option opts [Integer] :limit  (default to 100)
    # @return [Array<(VerificationList, Integer, Hash)>] VerificationList data, response status code and response headers
    def list_verifications1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KYCKYBVerificationsApi.list_verifications1 ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling KYCKYBVerificationsApi.list_verifications1, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/verifications'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = @api_client.build_collection_param(opts[:'id'], :csv) if !opts[:'id'].nil?
      query_params[:'verification_type'] = @api_client.build_collection_param(opts[:'verification_type'], :csv) if !opts[:'verification_type'].nil?
      query_params[:'business_id'] = @api_client.build_collection_param(opts[:'business_id'], :csv) if !opts[:'business_id'].nil?
      query_params[:'include_history'] = opts[:'include_history'] if !opts[:'include_history'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'result'] = @api_client.build_collection_param(opts[:'result'], :csv) if !opts[:'result'].nil?
      query_params[:'person_id'] = @api_client.build_collection_param(opts[:'person_id'], :csv) if !opts[:'person_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VerificationList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"KYCKYBVerificationsApi.list_verifications1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KYCKYBVerificationsApi#list_verifications1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verify a customer's identity
    # Initiate identity verification and run the specified identity checks.  Verifying a personal customer requires that the following fields already be set: * `first_name` * `last_name` * `dob` * `email` * `phone_number` * `legal_address` * `ssn`  Verifying a business customer requires that the following fields already be set: * `entity_name` * `legal_address` 
    # @param verification_request [VerificationRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [VerifyResponse]
    def verify(verification_request, opts = {})
      data, _status_code, _headers = verify_with_http_info(verification_request, opts)
      data
    end

    # Verify a customer&#39;s identity
    # Initiate identity verification and run the specified identity checks.  Verifying a personal customer requires that the following fields already be set: * &#x60;first_name&#x60; * &#x60;last_name&#x60; * &#x60;dob&#x60; * &#x60;email&#x60; * &#x60;phone_number&#x60; * &#x60;legal_address&#x60; * &#x60;ssn&#x60;  Verifying a business customer requires that the following fields already be set: * &#x60;entity_name&#x60; * &#x60;legal_address&#x60; 
    # @param verification_request [VerificationRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(VerifyResponse, Integer, Hash)>] VerifyResponse data, response status code and response headers
    def verify_with_http_info(verification_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KYCKYBVerificationsApi.verify ...'
      end
      # verify the required parameter 'verification_request' is set
      if @api_client.config.client_side_validation && verification_request.nil?
        fail ArgumentError, "Missing the required parameter 'verification_request' when calling KYCKYBVerificationsApi.verify"
      end
      # resource path
      local_var_path = '/verifications/verify'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(verification_request)

      # return_type
      return_type = opts[:debug_return_type] || 'VerifyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"KYCKYBVerificationsApi.verify",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KYCKYBVerificationsApi#verify\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if an individual is on any watchlists
    # @param adhoc_verification_request [AdhocVerificationRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [AdhocVerificationResponse]
    def verify_ad_hoc(adhoc_verification_request, opts = {})
      data, _status_code, _headers = verify_ad_hoc_with_http_info(adhoc_verification_request, opts)
      data
    end

    # Check if an individual is on any watchlists
    # @param adhoc_verification_request [AdhocVerificationRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(AdhocVerificationResponse, Integer, Hash)>] AdhocVerificationResponse data, response status code and response headers
    def verify_ad_hoc_with_http_info(adhoc_verification_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KYCKYBVerificationsApi.verify_ad_hoc ...'
      end
      # verify the required parameter 'adhoc_verification_request' is set
      if @api_client.config.client_side_validation && adhoc_verification_request.nil?
        fail ArgumentError, "Missing the required parameter 'adhoc_verification_request' when calling KYCKYBVerificationsApi.verify_ad_hoc"
      end
      # resource path
      local_var_path = '/verifications/adhoc'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(adhoc_verification_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AdhocVerificationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"KYCKYBVerificationsApi.verify_ad_hoc",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KYCKYBVerificationsApi#verify_ad_hoc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
