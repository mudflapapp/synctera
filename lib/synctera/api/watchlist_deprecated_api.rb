=begin
#Synctera API

#<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.74.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'cgi'

module Synctera
  class WatchlistDeprecatedApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve watchlist monitoring alert
    # @param alert_id [String] Unique identifier for this watchlist alert.
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param [Hash] opts the optional parameters
    # @return [WatchlistAlert]
    def get_watchlist_alert(alert_id, customer_id, opts = {})
      data, _status_code, _headers = get_watchlist_alert_with_http_info(alert_id, customer_id, opts)
      data
    end

    # Retrieve watchlist monitoring alert
    # @param alert_id [String] Unique identifier for this watchlist alert.
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(WatchlistAlert, Integer, Hash)>] WatchlistAlert data, response status code and response headers
    def get_watchlist_alert_with_http_info(alert_id, customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WatchlistDeprecatedApi.get_watchlist_alert ...'
      end
      # verify the required parameter 'alert_id' is set
      if @api_client.config.client_side_validation && alert_id.nil?
        fail ArgumentError, "Missing the required parameter 'alert_id' when calling WatchlistDeprecatedApi.get_watchlist_alert"
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling WatchlistDeprecatedApi.get_watchlist_alert"
      end
      # resource path
      local_var_path = '/customers/{customer_id}/watchlists/alerts/{alert_id}'.sub('{' + 'alert_id' + '}', CGI.escape(alert_id.to_s)).sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WatchlistAlert'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"WatchlistDeprecatedApi.get_watchlist_alert",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WatchlistDeprecatedApi#get_watchlist_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve watchlist monitoring subscription
    # @param subscription_id [String] Watchlist monitoring subscription ID
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param [Hash] opts the optional parameters
    # @return [WatchlistSubscription]
    def get_watchlist_subscription(subscription_id, customer_id, opts = {})
      data, _status_code, _headers = get_watchlist_subscription_with_http_info(subscription_id, customer_id, opts)
      data
    end

    # Retrieve watchlist monitoring subscription
    # @param subscription_id [String] Watchlist monitoring subscription ID
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(WatchlistSubscription, Integer, Hash)>] WatchlistSubscription data, response status code and response headers
    def get_watchlist_subscription_with_http_info(subscription_id, customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WatchlistDeprecatedApi.get_watchlist_subscription ...'
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling WatchlistDeprecatedApi.get_watchlist_subscription"
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling WatchlistDeprecatedApi.get_watchlist_subscription"
      end
      # resource path
      local_var_path = '/customers/{customer_id}/watchlists/subscriptions/{subscription_id}'.sub('{' + 'subscription_id' + '}', CGI.escape(subscription_id.to_s)).sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WatchlistSubscription'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"WatchlistDeprecatedApi.get_watchlist_subscription",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WatchlistDeprecatedApi#get_watchlist_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List watchlist monitoring alerts for a customer
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param [Hash] opts the optional parameters
    # @return [WatchlistAlertList]
    def list_watchlist_alerts(customer_id, opts = {})
      data, _status_code, _headers = list_watchlist_alerts_with_http_info(customer_id, opts)
      data
    end

    # List watchlist monitoring alerts for a customer
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(WatchlistAlertList, Integer, Hash)>] WatchlistAlertList data, response status code and response headers
    def list_watchlist_alerts_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WatchlistDeprecatedApi.list_watchlist_alerts ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling WatchlistDeprecatedApi.list_watchlist_alerts"
      end
      # resource path
      local_var_path = '/customers/{customer_id}/watchlists/alerts'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WatchlistAlertList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"WatchlistDeprecatedApi.list_watchlist_alerts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WatchlistDeprecatedApi#list_watchlist_alerts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List watchlist monitoring subscriptions for a customer
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param [Hash] opts the optional parameters
    # @return [WatchlistSubscriptionList]
    def list_watchlist_subscriptions(customer_id, opts = {})
      data, _status_code, _headers = list_watchlist_subscriptions_with_http_info(customer_id, opts)
      data
    end

    # List watchlist monitoring subscriptions for a customer
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(WatchlistSubscriptionList, Integer, Hash)>] WatchlistSubscriptionList data, response status code and response headers
    def list_watchlist_subscriptions_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WatchlistDeprecatedApi.list_watchlist_subscriptions ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling WatchlistDeprecatedApi.list_watchlist_subscriptions"
      end
      # resource path
      local_var_path = '/customers/{customer_id}/watchlists/subscriptions'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WatchlistSubscriptionList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"WatchlistDeprecatedApi.list_watchlist_subscriptions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WatchlistDeprecatedApi#list_watchlist_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Suppress entity alert
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param watchlist_suppress [WatchlistSuppress] A watchlist suppression object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [nil]
    def suppress_watchlist_entity_alert(customer_id, watchlist_suppress, opts = {})
      suppress_watchlist_entity_alert_with_http_info(customer_id, watchlist_suppress, opts)
      nil
    end

    # Suppress entity alert
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param watchlist_suppress [WatchlistSuppress] A watchlist suppression object
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def suppress_watchlist_entity_alert_with_http_info(customer_id, watchlist_suppress, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WatchlistDeprecatedApi.suppress_watchlist_entity_alert ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling WatchlistDeprecatedApi.suppress_watchlist_entity_alert"
      end
      # verify the required parameter 'watchlist_suppress' is set
      if @api_client.config.client_side_validation && watchlist_suppress.nil?
        fail ArgumentError, "Missing the required parameter 'watchlist_suppress' when calling WatchlistDeprecatedApi.suppress_watchlist_entity_alert"
      end
      # resource path
      local_var_path = '/customers/{customer_id}/watchlists/suppressions'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(watchlist_suppress)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"WatchlistDeprecatedApi.suppress_watchlist_entity_alert",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WatchlistDeprecatedApi#suppress_watchlist_entity_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update watchlist alert
    # @param alert_id [String] Unique identifier for this watchlist alert.
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param watchlist_alert [WatchlistAlert] A watchlist body
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_watchlist_alert(alert_id, customer_id, watchlist_alert, opts = {})
      update_watchlist_alert_with_http_info(alert_id, customer_id, watchlist_alert, opts)
      nil
    end

    # Update watchlist alert
    # @param alert_id [String] Unique identifier for this watchlist alert.
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param watchlist_alert [WatchlistAlert] A watchlist body
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_watchlist_alert_with_http_info(alert_id, customer_id, watchlist_alert, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WatchlistDeprecatedApi.update_watchlist_alert ...'
      end
      # verify the required parameter 'alert_id' is set
      if @api_client.config.client_side_validation && alert_id.nil?
        fail ArgumentError, "Missing the required parameter 'alert_id' when calling WatchlistDeprecatedApi.update_watchlist_alert"
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling WatchlistDeprecatedApi.update_watchlist_alert"
      end
      # verify the required parameter 'watchlist_alert' is set
      if @api_client.config.client_side_validation && watchlist_alert.nil?
        fail ArgumentError, "Missing the required parameter 'watchlist_alert' when calling WatchlistDeprecatedApi.update_watchlist_alert"
      end
      # resource path
      local_var_path = '/customers/{customer_id}/watchlists/alerts/{alert_id}'.sub('{' + 'alert_id' + '}', CGI.escape(alert_id.to_s)).sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(watchlist_alert)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"WatchlistDeprecatedApi.update_watchlist_alert",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WatchlistDeprecatedApi#update_watchlist_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update watchlist monitoring subscription
    # @param subscription_id [String] Watchlist monitoring subscription ID
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param watchlist_subscription [WatchlistSubscription] Watchlist monitoring subscription to be updated. The only field that matters is &#x60;status&#x60;; all other fields are ignored. 
    # @param [Hash] opts the optional parameters
    # @return [WatchlistSubscription]
    def update_watchlist_subscription(subscription_id, customer_id, watchlist_subscription, opts = {})
      data, _status_code, _headers = update_watchlist_subscription_with_http_info(subscription_id, customer_id, watchlist_subscription, opts)
      data
    end

    # Update watchlist monitoring subscription
    # @param subscription_id [String] Watchlist monitoring subscription ID
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param watchlist_subscription [WatchlistSubscription] Watchlist monitoring subscription to be updated. The only field that matters is &#x60;status&#x60;; all other fields are ignored. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WatchlistSubscription, Integer, Hash)>] WatchlistSubscription data, response status code and response headers
    def update_watchlist_subscription_with_http_info(subscription_id, customer_id, watchlist_subscription, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WatchlistDeprecatedApi.update_watchlist_subscription ...'
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling WatchlistDeprecatedApi.update_watchlist_subscription"
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling WatchlistDeprecatedApi.update_watchlist_subscription"
      end
      # verify the required parameter 'watchlist_subscription' is set
      if @api_client.config.client_side_validation && watchlist_subscription.nil?
        fail ArgumentError, "Missing the required parameter 'watchlist_subscription' when calling WatchlistDeprecatedApi.update_watchlist_subscription"
      end
      # resource path
      local_var_path = '/customers/{customer_id}/watchlists/subscriptions/{subscription_id}'.sub('{' + 'subscription_id' + '}', CGI.escape(subscription_id.to_s)).sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(watchlist_subscription)

      # return_type
      return_type = opts[:debug_return_type] || 'WatchlistSubscription'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"WatchlistDeprecatedApi.update_watchlist_subscription",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WatchlistDeprecatedApi#update_watchlist_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Subscribe a customer to watchlist monitoring
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param watchlist_subscription [WatchlistSubscription] A watchlist subscription
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [WatchlistSubscription]
    def watchlist_subscribe(customer_id, watchlist_subscription, opts = {})
      data, _status_code, _headers = watchlist_subscribe_with_http_info(customer_id, watchlist_subscription, opts)
      data
    end

    # Subscribe a customer to watchlist monitoring
    # @param customer_id [String] The customer&#39;s unique identifier
    # @param watchlist_subscription [WatchlistSubscription] A watchlist subscription
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(WatchlistSubscription, Integer, Hash)>] WatchlistSubscription data, response status code and response headers
    def watchlist_subscribe_with_http_info(customer_id, watchlist_subscription, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WatchlistDeprecatedApi.watchlist_subscribe ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling WatchlistDeprecatedApi.watchlist_subscribe"
      end
      # verify the required parameter 'watchlist_subscription' is set
      if @api_client.config.client_side_validation && watchlist_subscription.nil?
        fail ArgumentError, "Missing the required parameter 'watchlist_subscription' when calling WatchlistDeprecatedApi.watchlist_subscribe"
      end
      # resource path
      local_var_path = '/customers/{customer_id}/watchlists/subscriptions'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(watchlist_subscription)

      # return_type
      return_type = opts[:debug_return_type] || 'WatchlistSubscription'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"WatchlistDeprecatedApi.watchlist_subscribe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WatchlistDeprecatedApi#watchlist_subscribe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
