=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.108.0

Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'cgi'

module Synctera
  class ExternalAccountsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add an external account
    # Add an external account for a customer. The account will be created in an unverified state. 
    # @param add_accounts_request [AddAccountsRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [ExternalAccount]
    def add_external_accounts(add_accounts_request, opts = {})
      data, _status_code, _headers = add_external_accounts_with_http_info(add_accounts_request, opts)
      data
    end

    # Add an external account
    # Add an external account for a customer. The account will be created in an unverified state. 
    # @param add_accounts_request [AddAccountsRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(ExternalAccount, Integer, Hash)>] ExternalAccount data, response status code and response headers
    def add_external_accounts_with_http_info(add_accounts_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalAccountsApi.add_external_accounts ...'
      end
      # verify the required parameter 'add_accounts_request' is set
      if @api_client.config.client_side_validation && add_accounts_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_accounts_request' when calling ExternalAccountsApi.add_external_accounts"
      end
      # resource path
      local_var_path = '/external_accounts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_accounts_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalAccount'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalAccountsApi.add_external_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalAccountsApi#add_external_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add external accounts through a vendor, such as Plaid.
    # Add external accounts for a customer through an existing access token. The token must be valid, and the information on the accounts returned by the vendor must correspond to the customer. A success response for this route may include failures if an account could not be added, so it's important that the caller checks the response body. 
    # @param add_vendor_accounts_request [AddVendorAccountsRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [AddVendorAccountsResponse]
    def add_vendor_external_accounts(add_vendor_accounts_request, opts = {})
      data, _status_code, _headers = add_vendor_external_accounts_with_http_info(add_vendor_accounts_request, opts)
      data
    end

    # Add external accounts through a vendor, such as Plaid.
    # Add external accounts for a customer through an existing access token. The token must be valid, and the information on the accounts returned by the vendor must correspond to the customer. A success response for this route may include failures if an account could not be added, so it&#39;s important that the caller checks the response body. 
    # @param add_vendor_accounts_request [AddVendorAccountsRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(AddVendorAccountsResponse, Integer, Hash)>] AddVendorAccountsResponse data, response status code and response headers
    def add_vendor_external_accounts_with_http_info(add_vendor_accounts_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalAccountsApi.add_vendor_external_accounts ...'
      end
      # verify the required parameter 'add_vendor_accounts_request' is set
      if @api_client.config.client_side_validation && add_vendor_accounts_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_vendor_accounts_request' when calling ExternalAccountsApi.add_vendor_external_accounts"
      end
      # resource path
      local_var_path = '/external_accounts/add_vendor_accounts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_vendor_accounts_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AddVendorAccountsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalAccountsApi.add_vendor_external_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalAccountsApi#add_vendor_external_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a permanent access token for an external account
    # @param external_account_access_token [ExternalAccountAccessToken] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [ExternalAccountAccessToken]
    def create_access_token(external_account_access_token, opts = {})
      data, _status_code, _headers = create_access_token_with_http_info(external_account_access_token, opts)
      data
    end

    # Create a permanent access token for an external account
    # @param external_account_access_token [ExternalAccountAccessToken] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(ExternalAccountAccessToken, Integer, Hash)>] ExternalAccountAccessToken data, response status code and response headers
    def create_access_token_with_http_info(external_account_access_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalAccountsApi.create_access_token ...'
      end
      # verify the required parameter 'external_account_access_token' is set
      if @api_client.config.client_side_validation && external_account_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'external_account_access_token' when calling ExternalAccountsApi.create_access_token"
      end
      # resource path
      local_var_path = '/external_accounts/access_tokens'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(external_account_access_token)

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalAccountAccessToken'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalAccountsApi.create_access_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalAccountsApi#create_access_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a link token to verify an external account
    # @param external_account_link_token [ExternalAccountLinkToken] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [ExternalAccountLinkToken]
    def create_verification_link_token(external_account_link_token, opts = {})
      data, _status_code, _headers = create_verification_link_token_with_http_info(external_account_link_token, opts)
      data
    end

    # Create a link token to verify an external account
    # @param external_account_link_token [ExternalAccountLinkToken] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(ExternalAccountLinkToken, Integer, Hash)>] ExternalAccountLinkToken data, response status code and response headers
    def create_verification_link_token_with_http_info(external_account_link_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalAccountsApi.create_verification_link_token ...'
      end
      # verify the required parameter 'external_account_link_token' is set
      if @api_client.config.client_side_validation && external_account_link_token.nil?
        fail ArgumentError, "Missing the required parameter 'external_account_link_token' when calling ExternalAccountsApi.create_verification_link_token"
      end
      # resource path
      local_var_path = '/external_accounts/link_tokens'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(external_account_link_token)

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalAccountLinkToken'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalAccountsApi.create_verification_link_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalAccountsApi#create_verification_link_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an external account
    # Deletes an external account, given an external account ID. If no accounts left, the access token to the financial institution will be removed 
    # @param external_account_id [String] External Account ID
    # @param [Hash] opts the optional parameters
    # @return [DeleteResponse]
    def delete_external_account(external_account_id, opts = {})
      data, _status_code, _headers = delete_external_account_with_http_info(external_account_id, opts)
      data
    end

    # Delete an external account
    # Deletes an external account, given an external account ID. If no accounts left, the access token to the financial institution will be removed 
    # @param external_account_id [String] External Account ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteResponse, Integer, Hash)>] DeleteResponse data, response status code and response headers
    def delete_external_account_with_http_info(external_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalAccountsApi.delete_external_account ...'
      end
      # verify the required parameter 'external_account_id' is set
      if @api_client.config.client_side_validation && external_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_account_id' when calling ExternalAccountsApi.delete_external_account"
      end
      # resource path
      local_var_path = '/external_accounts/{external_account_id}'.sub('{' + 'external_account_id' + '}', CGI.escape(external_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalAccountsApi.delete_external_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalAccountsApi#delete_external_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sync external account transactions through a vendor, such as Plaid
    # Sync external accounts for a customer through an existing access token. The token must be valid. Accounts linked in the same auth session (having the same access token) will be synced together. 
    # @param external_account_id [String] External Account ID
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :restricted Is External Account Restricted for Access
    # @option opts [Boolean] :force_vendor_refresh Force a vendor refresh of the external account. 
    # @return [ExternalAccountTransactionRefreshResponse]
    def external_account_refresh_transactions(external_account_id, opts = {})
      data, _status_code, _headers = external_account_refresh_transactions_with_http_info(external_account_id, opts)
      data
    end

    # Sync external account transactions through a vendor, such as Plaid
    # Sync external accounts for a customer through an existing access token. The token must be valid. Accounts linked in the same auth session (having the same access token) will be synced together. 
    # @param external_account_id [String] External Account ID
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :restricted Is External Account Restricted for Access
    # @option opts [Boolean] :force_vendor_refresh Force a vendor refresh of the external account. 
    # @return [Array<(ExternalAccountTransactionRefreshResponse, Integer, Hash)>] ExternalAccountTransactionRefreshResponse data, response status code and response headers
    def external_account_refresh_transactions_with_http_info(external_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalAccountsApi.external_account_refresh_transactions ...'
      end
      # verify the required parameter 'external_account_id' is set
      if @api_client.config.client_side_validation && external_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_account_id' when calling ExternalAccountsApi.external_account_refresh_transactions"
      end
      # resource path
      local_var_path = '/external_accounts/{external_account_id}/refresh_transactions'.sub('{' + 'external_account_id' + '}', CGI.escape(external_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'restricted'] = opts[:'restricted'] if !opts[:'restricted'].nil?
      query_params[:'force_vendor_refresh'] = opts[:'force_vendor_refresh'] if !opts[:'force_vendor_refresh'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalAccountTransactionRefreshResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalAccountsApi.external_account_refresh_transactions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalAccountsApi#external_account_refresh_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an external account
    # Returns an external account, given an external account ID. 
    # @param external_account_id [String] External Account ID
    # @param [Hash] opts the optional parameters
    # @return [ExternalAccount]
    def get_external_account(external_account_id, opts = {})
      data, _status_code, _headers = get_external_account_with_http_info(external_account_id, opts)
      data
    end

    # Get an external account
    # Returns an external account, given an external account ID. 
    # @param external_account_id [String] External Account ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExternalAccount, Integer, Hash)>] ExternalAccount data, response status code and response headers
    def get_external_account_with_http_info(external_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalAccountsApi.get_external_account ...'
      end
      # verify the required parameter 'external_account_id' is set
      if @api_client.config.client_side_validation && external_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_account_id' when calling ExternalAccountsApi.get_external_account"
      end
      # resource path
      local_var_path = '/external_accounts/{external_account_id}'.sub('{' + 'external_account_id' + '}', CGI.escape(external_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalAccount'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalAccountsApi.get_external_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalAccountsApi#get_external_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get external account balances
    # Given an external account ID, return the account balances in real time.  The data returned by this endpoint is always fetched synchronously; it is not cached by Synctera. As a result, response latency is often high. 
    # @param external_account_id [String] External Account ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_age Optional relative age of a balance in seconds. If the balance is older than the requested seconds it will fail. This field is optional for most financial institutions, but required for some, so you should probably send it. 
    # @return [ExternalAccountBalance]
    def get_external_account_balance(external_account_id, opts = {})
      data, _status_code, _headers = get_external_account_balance_with_http_info(external_account_id, opts)
      data
    end

    # Get external account balances
    # Given an external account ID, return the account balances in real time.  The data returned by this endpoint is always fetched synchronously; it is not cached by Synctera. As a result, response latency is often high. 
    # @param external_account_id [String] External Account ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_age Optional relative age of a balance in seconds. If the balance is older than the requested seconds it will fail. This field is optional for most financial institutions, but required for some, so you should probably send it. 
    # @return [Array<(ExternalAccountBalance, Integer, Hash)>] ExternalAccountBalance data, response status code and response headers
    def get_external_account_balance_with_http_info(external_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalAccountsApi.get_external_account_balance ...'
      end
      # verify the required parameter 'external_account_id' is set
      if @api_client.config.client_side_validation && external_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_account_id' when calling ExternalAccountsApi.get_external_account_balance"
      end
      if @api_client.config.client_side_validation && !opts[:'max_age'].nil? && opts[:'max_age'] < 0
        fail ArgumentError, 'invalid value for "opts[:"max_age"]" when calling ExternalAccountsApi.get_external_account_balance, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/external_accounts/{external_account_id}/balance'.sub('{' + 'external_account_id' + '}', CGI.escape(external_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'max_age'] = opts[:'max_age'] if !opts[:'max_age'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalAccountBalance'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalAccountsApi.get_external_account_balance",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalAccountsApi#get_external_account_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List transactions of a given external account
    # Returns a list of transactions on from the external account, given an external account ID. Maximum 500 transctions will be returned. 
    # @param start_date [Date] Date range filtering for transactions. Date is inclusive. Date must be in UTC.
    # @param external_account_id [String] External Account ID
    # @param end_date [Date] Date range filtering for transactions. Date is exclusive. Date must be in UTC.
    # @param [Hash] opts the optional parameters
    # @return [ExternalAccountsTransactionList]
    def get_external_account_transactions(start_date, external_account_id, end_date, opts = {})
      data, _status_code, _headers = get_external_account_transactions_with_http_info(start_date, external_account_id, end_date, opts)
      data
    end

    # List transactions of a given external account
    # Returns a list of transactions on from the external account, given an external account ID. Maximum 500 transctions will be returned. 
    # @param start_date [Date] Date range filtering for transactions. Date is inclusive. Date must be in UTC.
    # @param external_account_id [String] External Account ID
    # @param end_date [Date] Date range filtering for transactions. Date is exclusive. Date must be in UTC.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExternalAccountsTransactionList, Integer, Hash)>] ExternalAccountsTransactionList data, response status code and response headers
    def get_external_account_transactions_with_http_info(start_date, external_account_id, end_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalAccountsApi.get_external_account_transactions ...'
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling ExternalAccountsApi.get_external_account_transactions"
      end
      # verify the required parameter 'external_account_id' is set
      if @api_client.config.client_side_validation && external_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_account_id' when calling ExternalAccountsApi.get_external_account_transactions"
      end
      # verify the required parameter 'end_date' is set
      if @api_client.config.client_side_validation && end_date.nil?
        fail ArgumentError, "Missing the required parameter 'end_date' when calling ExternalAccountsApi.get_external_account_transactions"
      end
      # resource path
      local_var_path = '/external_accounts/{external_account_id}/transactions'.sub('{' + 'external_account_id' + '}', CGI.escape(external_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_date'] = start_date
      query_params[:'end_date'] = end_date

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalAccountsTransactionList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalAccountsApi.get_external_account_transactions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalAccountsApi#get_external_account_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List external accounts
    # Returns a list of all external accounts assigned to customers. 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :id External account ID(s). Multiple IDs can be provided as a comma-separated list. 
    # @option opts [Array<String>] :customer_id A list of customer unique identifiers, with a comma separating any values.
    # @option opts [Boolean] :include_history If true, include old (inactive) records as well. (default to false)
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [Array<String>] :business_id A list of business unique identifiers, with a comma separating any values.
    # @return [ExternalAccountsList]
    def list_external_accounts(opts = {})
      data, _status_code, _headers = list_external_accounts_with_http_info(opts)
      data
    end

    # List external accounts
    # Returns a list of all external accounts assigned to customers. 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :id External account ID(s). Multiple IDs can be provided as a comma-separated list. 
    # @option opts [Array<String>] :customer_id A list of customer unique identifiers, with a comma separating any values.
    # @option opts [Boolean] :include_history If true, include old (inactive) records as well. (default to false)
    # @option opts [String] :page_token 
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [Array<String>] :business_id A list of business unique identifiers, with a comma separating any values.
    # @return [Array<(ExternalAccountsList, Integer, Hash)>] ExternalAccountsList data, response status code and response headers
    def list_external_accounts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalAccountsApi.list_external_accounts ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ExternalAccountsApi.list_external_accounts, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/external_accounts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = @api_client.build_collection_param(opts[:'id'], :csv) if !opts[:'id'].nil?
      query_params[:'customer_id'] = @api_client.build_collection_param(opts[:'customer_id'], :csv) if !opts[:'customer_id'].nil?
      query_params[:'include_history'] = opts[:'include_history'] if !opts[:'include_history'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'business_id'] = @api_client.build_collection_param(opts[:'business_id'], :csv) if !opts[:'business_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalAccountsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalAccountsApi.list_external_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalAccountsApi#list_external_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sync external accounts through a vendor, such as Plaid.
    # Sync external accounts for a customer through an existing access token. The token must be valid, and the information on the accounts returned by the vendor must correspond to the customer. A success response for this route may include failures if an account could not be added and deletions if the account is removed by the end user, so it's important that the caller checks the response body. 
    # @param add_vendor_accounts_request [AddVendorAccountsRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [AddVendorAccountsResponse]
    def sync_vendor_external_accounts(add_vendor_accounts_request, opts = {})
      data, _status_code, _headers = sync_vendor_external_accounts_with_http_info(add_vendor_accounts_request, opts)
      data
    end

    # Sync external accounts through a vendor, such as Plaid.
    # Sync external accounts for a customer through an existing access token. The token must be valid, and the information on the accounts returned by the vendor must correspond to the customer. A success response for this route may include failures if an account could not be added and deletions if the account is removed by the end user, so it&#39;s important that the caller checks the response body. 
    # @param add_vendor_accounts_request [AddVendorAccountsRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(AddVendorAccountsResponse, Integer, Hash)>] AddVendorAccountsResponse data, response status code and response headers
    def sync_vendor_external_accounts_with_http_info(add_vendor_accounts_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalAccountsApi.sync_vendor_external_accounts ...'
      end
      # verify the required parameter 'add_vendor_accounts_request' is set
      if @api_client.config.client_side_validation && add_vendor_accounts_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_vendor_accounts_request' when calling ExternalAccountsApi.sync_vendor_external_accounts"
      end
      # resource path
      local_var_path = '/external_accounts/sync_vendor_accounts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_vendor_accounts_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AddVendorAccountsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalAccountsApi.sync_vendor_external_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalAccountsApi#sync_vendor_external_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patch an external account
    # Edits an unverified external account, given an external account ID. 
    # @param external_account_id [String] External Account ID
    # @param patch_external_account [PatchExternalAccount] External account to be updated
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [ExternalAccount]
    def update_external_account(external_account_id, patch_external_account, opts = {})
      data, _status_code, _headers = update_external_account_with_http_info(external_account_id, patch_external_account, opts)
      data
    end

    # Patch an external account
    # Edits an unverified external account, given an external account ID. 
    # @param external_account_id [String] External Account ID
    # @param patch_external_account [PatchExternalAccount] External account to be updated
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
    # @return [Array<(ExternalAccount, Integer, Hash)>] ExternalAccount data, response status code and response headers
    def update_external_account_with_http_info(external_account_id, patch_external_account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalAccountsApi.update_external_account ...'
      end
      # verify the required parameter 'external_account_id' is set
      if @api_client.config.client_side_validation && external_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_account_id' when calling ExternalAccountsApi.update_external_account"
      end
      # verify the required parameter 'patch_external_account' is set
      if @api_client.config.client_side_validation && patch_external_account.nil?
        fail ArgumentError, "Missing the required parameter 'patch_external_account' when calling ExternalAccountsApi.update_external_account"
      end
      # resource path
      local_var_path = '/external_accounts/{external_account_id}'.sub('{' + 'external_account_id' + '}', CGI.escape(external_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(patch_external_account)

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalAccount'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ExternalAccountsApi.update_external_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalAccountsApi#update_external_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
