=begin
#Synctera API

#<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.74.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'spec_helper'
require 'json'

# Unit tests for Synctera::PersonsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'PersonsApi' do
  before do
    # run before each test
    @api_instance = Synctera::PersonsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PersonsApi' do
    it 'should create an instance of PersonsApi' do
      expect(@api_instance).to be_instance_of(Synctera::PersonsApi)
    end
  end

  # unit tests for create_person
  # Create a person
  # Create a person who may act as a personal customer or a director/officer/owner of a business. You can then verify the identity of this customer and associate them with other people and accounts. 
  # @param post_person 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [ResponsePerson]
  describe 'create_person test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_personal_id
  # Create a personal identifier
  # Create a personal identifier, e.g. SSN, for this customer
  # @param post_personal_id_w_cust 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [ResponsePersonalIdWCust]
  describe 'create_personal_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_personal_id
  # Delete a personal identifier
  # Delete personal identifier 
  # @param personal_id_id UUID for a personal identifier.
  # @param [Hash] opts the optional parameters
  # @return [DeleteResponse]
  describe 'delete_personal_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_person
  # Get person
  # Get person by ID.
  # @param person_id Person&#39;s unique identifier.
  # @param [Hash] opts the optional parameters
  # @return [ResponsePerson]
  describe 'get_person test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_persons
  # List persons
  # Retrieves paginated list of persons associated with the authorized requester.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort_by Specifies the sort order for the returned persons. 
  # @option opts [Boolean] :is_customer If true, show only customers. If false, show non-customer parties.
  # @option opts [Boolean] :has_accounts Filter on resources that have an account(s) 
  # @option opts [String] :ssn_last_4 
  # @option opts [Array<String>] :id Unique identifier for the resource. Multiple IDs can be provided as a comma-separated list. 
  # @option opts [String] :last_name 
  # @option opts [String] :email 
  # @option opts [String] :first_name 
  # @option opts [String] :phone_number 
  # @option opts [Status2] :status 
  # @option opts [String] :page_token 
  # @option opts [Array<BanStatus>] :ban_status (alpha) Ban status of the person. Multiple values can be provided as a comma-seperated list of the following: * &#x60;ALLOWED&#x60; – person is not banned or suspended * &#x60;SUSPENDED&#x60; - person is suspended * &#x60;BANNED&#x60; – person is banned 
  # @option opts [Integer] :limit 
  # @return [PersonList]
  describe 'list_persons test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_person
  # Update person
  # Update person by ID.
  # @param person_id Person&#39;s unique identifier.
  # @param patch_person 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [ResponsePerson]
  describe 'update_person test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_personal_id
  # Update a personal identifier
  # Update a personal identifier, e.g. SSN, for this customer
  # @param personal_id_id UUID for a personal identifier.
  # @param patch_personal_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [ResponsePersonalIdWCust]
  describe 'update_personal_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
