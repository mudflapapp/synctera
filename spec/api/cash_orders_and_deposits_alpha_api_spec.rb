=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.108.0

Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Synctera::CashOrdersAndDepositsAlphaApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'CashOrdersAndDepositsAlphaApi' do
  before do
    # run before each test
    @api_instance = Synctera::CashOrdersAndDepositsAlphaApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CashOrdersAndDepositsAlphaApi' do
    it 'should create an instance of CashOrdersAndDepositsAlphaApi' do
      expect(@api_instance).to be_instance_of(Synctera::CashOrdersAndDepositsAlphaApi)
    end
  end

  # unit tests for create_cash_authorization
  # Cash Authorization for an upcoming transfer
  # Create a new cash authorization &gt; ðŸš§ Alpha &gt; This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @option opts [CashAuthorizationPost] :cash_authorization_post The cash authorization to be created.
  # @return [CashAuthorizationResponse]
  describe 'create_cash_authorization test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_cash_authorizations
  # Get cash authorizations
  # Get all cash authorizations &gt; ðŸš§ Alpha &gt; This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes. 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :max_amount Maximum amount of the transfer
  # @option opts [String] :destination_account_id Destination account ID
  # @option opts [String] :client_name Client name of the transfer
  # @option opts [Date] :from_order_date From order date of the transfer
  # @option opts [Date] :to_order_date To order date of the transfer
  # @option opts [Array<String>] :id Cashier Authorization ID
  # @option opts [Date] :order_date order date of the transfer
  # @option opts [String] :originating_account_id Originating account ID
  # @option opts [String] :partner_id Partner ID of the transfer
  # @option opts [String] :bank_id Bank ID of the transfer
  # @option opts [String] :account_number Account number of the transfer, known as \&quot;Location ID\&quot; in the cash order csv
  # @option opts [String] :amount Amount of the transfer
  # @option opts [Integer] :min_amount Minimum amount of the transfer
  # @return [CashAuthorizationResponseList]
  describe 'get_cash_authorizations test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_cash_order_authorization
  # Get cash order authorization
  # Get a specific cash order authorization &gt; ðŸš§ Alpha &gt; This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes. 
  # @param id Cashier Authorization ID
  # @param [Hash] opts the optional parameters
  # @return [CashOrderAuthorizationResponse]
  describe 'get_cash_order_authorization test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_cash_transfer
  # Get cash transfer
  # Get a specific cash transfer &gt; ðŸš§ Alpha &gt; This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes. 
  # @param id Cashier Transfer ID
  # @param [Hash] opts the optional parameters
  # @return [CashResponse]
  describe 'get_cash_transfer test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_cash_transfers
  # Get cash transfers
  # Get all cash transfers &gt; ðŸš§ Alpha &gt; This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :from_posting_date From posting date of the transfer
  # @option opts [String] :currency Currency of the transfer
  # @option opts [String] :to_effective_date To effective date of the transfer
  # @option opts [String] :to_posting_date To posting date of the transfer
  # @option opts [String] :customer_id Customer ID of the transfer
  # @option opts [String] :dc_sign DC sign of the transfer
  # @option opts [String] :from_effective_date From effective date of the transfer
  # @option opts [Integer] :max_amount Maximum amount of the transfer
  # @option opts [String] :destination_account_id Destination account ID
  # @option opts [Boolean] :is_same_day Is same day transfer
  # @option opts [String] :id Cashier Transfer ID
  # @option opts [String] :effective_date Effective date of the transfer
  # @option opts [String] :destination_account_number Destination account number
  # @option opts [String] :posting_date Posting date of the transfer
  # @option opts [String] :network_status Network status of the transfer
  # @option opts [String] :originating_account_number Originating account number
  # @option opts [String] :subtype Subtype of the transfer
  # @option opts [String] :originating_account_id Originating account ID
  # @option opts [String] :partner_id Partner ID of the transfer
  # @option opts [String] :destination_account_owner_name Destination account owner name
  # @option opts [String] :bank_id Bank ID of the transfer
  # @option opts [String] :reference_id Reference ID of the transfer
  # @option opts [String] :status Status of the transfer
  # @option opts [String] :amount Amount of the transfer
  # @option opts [Integer] :min_amount Minimum amount of the transfer
  # @option opts [String] :originating_account_owner_name Originating account owner name
  # @return [CashList]
  describe 'get_cash_transfers test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for patch_cash_order_authorization
  # Update a cash order authorization
  # &gt; ðŸš§ Alpha &gt; This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes. 
  # @param id Cashier Authorization ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @option opts [CashOrderAuthorizationPatch] :cash_order_authorization_patch Properties of the Cashier order authorization to update.
  # @return [CashOrderAuthorizationResponse]
  describe 'patch_cash_order_authorization test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for patch_cash_transfer
  # Update a cash transfer
  # To cancel a transfer, update the status to &#39;CANCELLED&#39;. Only &#39;INITIATED&#39; or &#39;PENDING&#x60; transfers can be cancelled. &gt; ðŸš§ Alpha &gt; This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes. 
  # @param id Cashier Transfer ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @option opts [CashPatch] :cash_patch Properties of the Cashier transfer to update.
  # @return [CashResponse]
  describe 'patch_cash_transfer test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
