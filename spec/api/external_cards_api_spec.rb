=begin
#Synctera API

#<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.74.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'spec_helper'
require 'json'

# Unit tests for Synctera::ExternalCardsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ExternalCardsApi' do
  before do
    # run before each test
    @api_instance = Synctera::ExternalCardsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ExternalCardsApi' do
    it 'should create an instance of ExternalCardsApi' do
      expect(@api_instance).to be_instance_of(Synctera::ExternalCardsApi)
    end
  end

  # unit tests for authenticate3_ds
  # Authenticate 3DS (beta)
  # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Validates the results of an External Card Transfer 3DS authentication challenge. 
  # @param authenticate3ds_request Details of the External Card Transfer 3DS authentication challenge validation.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [Authenticate3dsResponse]
  describe 'authenticate3_ds test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_external_card_from_token
  # Create External Card from token
  # Create an External Card from token. The token is obtained through the iFrame, along with cardholder name, which also must be provided. Cardholder name is matched against customer name. 
  # @param external_card_request Details of the External Card to create
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [ExternalCardResponse]
  describe 'create_external_card_from_token test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_external_card_transfer
  # Create External Card Transfer
  # Create an External Card Transfer 
  # @param transfer_request Details of the External Card Transfer to create
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [TransferResponse]
  describe 'create_external_card_transfer test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_external_card_transfer_reversal
  # Create External Card Transfer Reversal
  # Create an External Card Transfer Reversal 
  # @param transfer_id The unique identifier of a transfer
  # @param transfer_reversal_request Details of the External Card Transfer Reversal to create
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [TransferResponse]
  describe 'create_external_card_transfer_reversal test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_external_card
  # Delete External Card
  # Delete an External Card
  # @param external_card_id The unique identifier of an external card
  # @param [Hash] opts the optional parameters
  # @return [DeleteResponse]
  describe 'delete_external_card test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_external_card
  # Get External Card
  # Get an External Card 
  # @param external_card_id The unique identifier of an external card
  # @param [Hash] opts the optional parameters
  # @return [ExternalCardResponse]
  describe 'get_external_card test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_external_card_transfer
  # Get External Card Transfer
  # Get an External Card Transfer 
  # @param transfer_id The unique identifier of a transfer
  # @param [Hash] opts the optional parameters
  # @return [TransferResponse]
  describe 'get_external_card_transfer test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for initialize3_ds
  # Initialize 3DS (beta)
  # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Initializes an External Card Transfer 3DS authentication. 
  # @param initialize3ds_request Details of the External Card Transfer 3DS authentication to initialize.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [Initialize3dsResponse]
  describe 'initialize3_ds test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_external_card_transfers
  # List External Card Transfers
  # Get a paginated list of External Card Transfers 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :customer_id 
  # @option opts [TransferType] :type The type of an external transfer
  # @option opts [Array<String>] :originating_account_id 
  # @option opts [String] :external_card_id 
  # @option opts [String] :page_token 
  # @option opts [Integer] :limit 
  # @return [TransferListResponse]
  describe 'list_external_card_transfers test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_external_cards
  # List External Cards
  # Get a paginated list of External Cards 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :customer_id 
  # @option opts [String] :business_id 
  # @option opts [String] :page_token 
  # @option opts [ExternalCardStatus] :status 
  # @option opts [Integer] :limit 
  # @return [ExternalCardListResponse]
  describe 'list_external_cards test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for lookup3_ds
  # Lookup 3DS (beta)
  # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.  Using device collection data, performs a lookup for an External Card Transfer 3DS authentication. The results will indicate whether the transfer is successfully authenticated or if a 3DS challenge is required. 
  # @param lookup3ds_request Details of the External Card Transfer 3DS authentication lookup.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [Lookup3dsResponse]
  describe 'lookup3_ds test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_external_card
  # Update External Card
  # Update External Card data 
  # @param external_card_id The unique identifier of an external card
  # @param external_card_update_request Fields to update
  # @param [Hash] opts the optional parameters
  # @return [ExternalCardResponse]
  describe 'update_external_card test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
