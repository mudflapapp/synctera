=begin
#Synctera API

#<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.74.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'spec_helper'
require 'json'

# Unit tests for Synctera::EFTCanadaAlphaApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'EFTCanadaAlphaApi' do
  before do
    # run before each test
    @api_instance = Synctera::EFTCanadaAlphaApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of EFTCanadaAlphaApi' do
    it 'should create an instance of EFTCanadaAlphaApi' do
      expect(@api_instance).to be_instance_of(Synctera::EFTCanadaAlphaApi)
    end
  end

  # unit tests for create_eftca_transfer
  # Create EFT Canada Transfer
  # Create a new EFT Canada transfer &gt; ðŸš§ Alpha &gt; This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @option opts [EftCaPost] :eft_ca_post The EFT Canada transfer to be created.
  # @return [EftCaResponse]
  describe 'create_eftca_transfer test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_eftca_transfer
  # Get EFT Canada Transfer
  # Get a specific EFT Canada transfer &gt; ðŸš§ Alpha &gt; This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes. 
  # @param id EFT Canada Transfer ID
  # @param [Hash] opts the optional parameters
  # @return [EftCaResponse]
  describe 'get_eftca_transfer test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_eftca_transfers
  # Get EFT Canada Transfers
  # Get all EFT Canada transfers &gt; ðŸš§ Alpha &gt; This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id EFT Canada Transfer ID
  # @option opts [Boolean] :is_same_day Is same day transfer
  # @option opts [String] :network_status Network status of the transfer
  # @option opts [String] :subtype Subtype of the transfer
  # @option opts [String] :to_posting_date To posting date of the transfer
  # @option opts [Integer] :min_amount Minimum amount of the transfer
  # @option opts [String] :originating_account_owner_name Originating account owner name
  # @option opts [String] :from_effective_date From effective date of the transfer
  # @option opts [String] :originating_account_number Originating account number
  # @option opts [String] :originating_account_id Originating account ID
  # @option opts [String] :currency Currency of the transfer
  # @option opts [String] :to_effective_date To effective date of the transfer
  # @option opts [String] :dc_sign DC sign of the transfer
  # @option opts [String] :posting_date Posting date of the transfer
  # @option opts [String] :effective_date Effective date of the transfer
  # @option opts [String] :customer_id Customer ID of the transfer
  # @option opts [String] :amount Amount of the transfer
  # @option opts [String] :destination_account_owner_name Destination account owner name
  # @option opts [String] :reference_id Reference ID of the transfer
  # @option opts [String] :from_posting_date From posting date of the transfer
  # @option opts [String] :status Status of the transfer
  # @option opts [String] :partner_id Partner ID of the transfer
  # @option opts [String] :destination_account_id Destination account ID
  # @option opts [String] :destination_account_number Destination account number
  # @option opts [String] :bank_id Bank ID of the transfer
  # @option opts [Integer] :max_amount Maximum amount of the transfer
  # @return [EftCaList]
  describe 'get_eftca_transfers test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for patch_eftca_transfer
  # Update a EFT Canada Transfer
  # To cancel a transfer, update the status to &#39;CANCELLED&#39;. Only &#39;INITIATED&#39; or &#39;PENDING&#x60; transfers can be cancelled. &gt; ðŸš§ Alpha &gt; This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes. 
  # @param id EFT Canada Transfer ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @option opts [EftCaPatch] :eft_ca_patch Properties of the EFT Canada transfer to update.
  # @return [EftCaResponse]
  describe 'patch_eftca_transfer test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for return_eftca_transfer
  # Return an EFT Canada Transfer
  # Trigger a return upon an existing transfer. &gt; ðŸš§ Alpha &gt; This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes. 
  # @param id EFT Canada Transfer ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [EftCaResponse]
  describe 'return_eftca_transfer test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
