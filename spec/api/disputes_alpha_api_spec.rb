=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 1.82.0

Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Synctera::DisputesAlphaApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'DisputesAlphaApi' do
  before do
    # run before each test
    @api_instance = Synctera::DisputesAlphaApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DisputesAlphaApi' do
    it 'should create an instance of DisputesAlphaApi' do
      expect(@api_instance).to be_instance_of(Synctera::DisputesAlphaApi)
    end
  end

  # unit tests for add_dispute_document
  # Add a document to a dispute
  # Add a supporting document to a dispute object 
  # @param dispute_id 
  # @param file 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [DisputeDocumentResponse]
  describe 'add_dispute_document test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_action
  # Create a dispute action
  # Create an action on a disputed transaction  &gt; ðŸš§ Alpha &gt; Spec only: This is an Alpha endpoint that is not yet implemented. Feedback from the community is welcome. We may make breaking changes. 
  # @param dispute_id 
  # @param dispute_action_request Details of the dispute action
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [DisputeActionResponse]
  describe 'create_action test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_dispute
  # Dispute a transaction
  # Create a dispute against a transaction.  &gt; ðŸš§ Alpha &gt; This is an Alpha endpoint. Feedback from the community is welcome. We may make breaking changes. 
  # @param dispute_request Details of the disputed transaction.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [DisputeResponse]
  describe 'create_dispute test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_dispute
  # Get a Dispute
  # Get a dispute by ID.  &gt; ðŸš§ Alpha &gt; This is an Alpha endpoint. Feedback from the community is welcome. We may make breaking changes. 
  # @param dispute_id 
  # @param [Hash] opts the optional parameters
  # @return [DisputeResponse]
  describe 'get_dispute test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_dispute_document_contents
  # Get dispute document contents
  # Returns the bytes of the requested document
  # @param document_id 
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_dispute_document_contents test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_disputes
  # List disputes
  # Get paginated list of disputes  &gt; ðŸš§ Alpha &gt; This is an Alpha endpoint. Feedback from the community is welcome. We may make breaking changes. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :transaction_id 
  # @option opts [PaymentRail] :payment_rail Specifies the payment rail type for the returned disputes. 
  # @option opts [String] :page_token 
  # @option opts [Integer] :limit 
  # @return [DisputeList]
  describe 'list_disputes test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_dispute
  # Update an dispute
  # Update an dispute.  &gt; ðŸš§ Alpha &gt; This is an Alpha endpoint. Feedback from the community is welcome. We may make breaking changes. 
  # @param dispute_id 
  # @param dispute_patch_request Dispute update request body
  # @param [Hash] opts the optional parameters
  # @return [DisputeResponse]
  describe 'update_dispute test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
