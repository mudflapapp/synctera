=begin
#Synctera API

#<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.74.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'spec_helper'
require 'json'

# Unit tests for Synctera::AccountsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'AccountsApi' do
  before do
    # run before each test
    @api_instance = Synctera::AccountsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AccountsApi' do
    it 'should create an instance of AccountsApi' do
      expect(@api_instance).to be_instance_of(Synctera::AccountsApi)
    end
  end

  # unit tests for create_account
  # Create an account
  # Creates an account copying values from account template into the account resource.  Any fields defined as part of account creation will overwrite the ones provided from the account template.  Required fields:   - relationships 
  # @param account_creation Account to create
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [AccountGenericResponse]
  describe 'create_account test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_account_relationship
  # Create account relationship
  # Add a customer to an account
  # @param account_id Unique identifier for the account.
  # @param relationship Account relationship object
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [RelationshipResponse]
  describe 'create_account_relationship test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_account_resource_product
  # Create an account product
  # Create an account product. Rates cannot be nil or empty. 
  # @param account_product Account product to create
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [AccountProduct]
  describe 'create_account_resource_product test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_account_template
  # Create an account template
  # Create an account template. An account template is needed to create an account in a lead mode. 
  # @param account_template Account template to create
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [AccountTemplateResponse]
  describe 'create_account_template test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_account_relationship
  # Delete account relationship
  # Delete account relationship
  # @param relationship_id Relationship ID of the account associate with the account entity
  # @param account_id Unique identifier for the account.
  # @param [Hash] opts the optional parameters
  # @return [DeleteResponse]
  describe 'delete_account_relationship test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_account_template
  # Delete account template
  # Delete account template
  # @param template_id Account Template ID
  # @param [Hash] opts the optional parameters
  # @return [DeleteResponse]
  describe 'delete_account_template test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_account
  # Get account
  # Get an account
  # @param account_id Unique identifier for the account.
  # @param [Hash] opts the optional parameters
  # @return [AccountGenericResponse]
  describe 'get_account test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_account_relationship
  # Get account relationship
  # Get account relationship by ID
  # @param relationship_id Relationship ID of the account associate with the account entity
  # @param account_id Unique identifier for the account.
  # @param [Hash] opts the optional parameters
  # @return [RelationshipResponse]
  describe 'get_account_relationship test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_account_template
  # Get account template
  # Get an account template
  # @param template_id Account Template ID
  # @param [Hash] opts the optional parameters
  # @return [AccountTemplateResponse]
  describe 'get_account_template test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_account_relationship
  # List account relationships
  # List all customers of an account
  # @param account_id Unique identifier for the account.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :page_token 
  # @option opts [Integer] :limit 
  # @return [RelationshipList]
  describe 'list_account_relationship test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_account_resource_products
  # List account products
  # List account Products 
  # @param product_type Type of account product
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :end_date Date range filtering for type INTEREST. All rates in interest resource have to have valid_to earlier or equal to end_date.
  # @option opts [String] :page_token 
  # @option opts [String] :id ID of account product. Multiple IDs can be provided as a comma-separated list.
  # @option opts [Integer] :limit 
  # @option opts [Date] :start_date Date range filtering for type INTEREST. All rates in interest resource have to have valid_from later or equal to start_date.
  # @return [AccountProductList]
  describe 'list_account_resource_products test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_account_templates
  # List account templates
  # List account templates 
  # @param [Hash] opts the optional parameters
  # @option opts [AccountType] :account_type The type of the account 
  # @option opts [String] :page_token 
  # @option opts [Integer] :limit 
  # @return [TemplateList]
  describe 'list_account_templates test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_accounts
  # List accounts
  # Get paginated list of Accounts associated
  # @param [Hash] opts the optional parameters
  # @option opts [String] :nickname Nickname of the account 
  # @option opts [Array<String>] :account_number Account number(s). Multiple account numbers can be provided as a comma-separated list. When only a single account number is provided, any * characters in the string are wildcards, and match any characters. 
  # @option opts [String] :last_name 
  # @option opts [Status] :status 
  # @option opts [String] :first_name 
  # @option opts [Array<String>] :overflow_account_id Overflow account ID(s). Multiple IDs can be provided as a comma-separated list. This parameter is deprecated and will be removed in a future API version. Use linked_account_id instead. 
  # @option opts [AccountType] :account_type The type of the account 
  # @option opts [Array<String>] :business_id Unique identifier for the business. Multiple IDs can be provided as a comma-separated list. 
  # @option opts [Array<String>] :overdraft_account_id Overdraft account ID(s). Multiple IDs can be provided as a comma-separated list. This parameter is deprecated and will be removed in a future API version. Use linked_account_id instead. 
  # @option opts [Array<String>] :spend_control_ids Spend Control ID(s). Multiple IDs can be provided as a comma-separated list. Return only resources that use the specified Spend Controls. 
  # @option opts [String] :page_token 
  # @option opts [Array<String>] :person_id Unique identifier for the person. Multiple IDs can be provided as a comma-separated list. 
  # @option opts [CustomerType] :customer_type Customer type of the account, BUSINESS or PERSONAL 
  # @option opts [Integer] :limit 
  # @option opts [String] :customer_id The customer&#39;s unique identifier
  # @option opts [String] :interest_product_id Interest product ID that accounts associate with. Multiple IDs can be provided as a comma-separated list.
  # @option opts [Array<String>] :linked_account_id Return only resources that are linked to the specified backing account in balance_floor or balance_ceiling. Multiple IDs can be provided as a comma-separated list. 
  # @option opts [Array<String>] :id Account ID(s). Multiple IDs can be provided as a comma-separated list. 
  # @option opts [Array<String>] :sort_by Specifies the sort order for the returned accounts. 
  # @return [AccountList]
  describe 'list_accounts test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for patch_account
  # Patch account
  # Patch account.  Immutable fields:   - account_number   - account_type   - account_template_id   - customer_type  Please note:   - Other fields cannot be modified when access_status is FROZEN.   - access_status has to be patched individually without other fields. 
  # @param account_id Unique identifier for the account.
  # @param patch_account Account fields to be patched
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [AccountGenericResponse]
  describe 'patch_account test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for patch_account_product
  # Patch account product
  # Patch account product. Rates requires at minimum 1 entry if specified. 
  # @param product_id Account Product ID
  # @param patch_account_product Account product fields to be patched
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [AccountProduct]
  describe 'patch_account_product test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_account
  # Update account
  # &gt; Deprecated. Please use PATCH /v0/accounts. This route only supports types CHECKING and SAVING.  Update account  Shadow mode required fields:   - account_number   - status  Lead mode required fields:   - All fields are required.  Please note:   - access_status needs to be in ACTIVE.   - PUT request cannot change access_status. 
  # @param account_id Unique identifier for the account.
  # @param update_account Account to update
  # @param [Hash] opts the optional parameters
  # @return [AccountGenericResponse]
  describe 'update_account test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_account_relationship
  # Update account relationship
  # Update account relationship. Only relationship_type can be updated. customer_id should not be modified.
  # @param relationship_id Relationship ID of the account associate with the account entity
  # @param account_id Unique identifier for the account.
  # @param relationship Account relationship to be updated
  # @param [Hash] opts the optional parameters
  # @return [RelationshipResponse]
  describe 'update_account_relationship test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_account_template
  # Update account template
  # Update account template 
  # @param template_id Account Template ID
  # @param account_template Account template to update
  # @param [Hash] opts the optional parameters
  # @return [AccountTemplateResponse]
  describe 'update_account_template test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
