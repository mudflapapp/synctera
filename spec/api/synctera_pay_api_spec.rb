=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 1.82.0

Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Synctera::SyncteraPayApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'SyncteraPayApi' do
  before do
    # run before each test
    @api_instance = Synctera::SyncteraPayApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of SyncteraPayApi' do
    it 'should create an instance of SyncteraPayApi' do
      expect(@api_instance).to be_instance_of(Synctera::SyncteraPayApi)
    end
  end

  # unit tests for create_synctera_pay_transfer
  # Create Synctera Pay Transfer
  # Create a Synctera Pay transfer &gt; ðŸš§ Alpha &gt; This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @option opts [SyncteraPayPost] :synctera_pay_post Attributes of the Synctera Pay transfer
  # @return [SyncteraPayResponse]
  describe 'create_synctera_pay_transfer test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_synctera_pay_transfer
  # Get Synctera Pay Transfer
  # Get a Synctera Pay transfer &gt; ðŸš§ Alpha &gt; This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes. 
  # @param id ID
  # @param [Hash] opts the optional parameters
  # @return [SyncteraPayResponse]
  describe 'get_synctera_pay_transfer test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_synctera_pay_transfers
  # Get Synctera Pay Transfers
  # Get all Synctera Pay transfers &gt; ðŸš§ Alpha &gt; This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes. 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :max_amount Maximum amount of the transfer
  # @option opts [String] :subtype Subtype of the transfer
  # @option opts [String] :from_posting_date From posting date of the transfer
  # @option opts [String] :to_posting_date To posting date of the transfer
  # @option opts [String] :id Synctera Pay Transfer ID
  # @option opts [String] :amount Amount of the transfer
  # @option opts [String] :reference_id Reference ID of the transfer
  # @option opts [String] :effective_date Effective date of the transfer
  # @option opts [Integer] :min_amount Minimum amount of the transfer
  # @option opts [Boolean] :is_same_day Is same day transfer
  # @option opts [String] :originating_account_id Originating account ID
  # @option opts [String] :from_effective_date From effective date of the transfer
  # @option opts [String] :customer_id Customer ID of the transfer
  # @option opts [String] :originating_account_owner_name Originating account owner name
  # @option opts [String] :to_effective_date To effective date of the transfer
  # @option opts [String] :dc_sign DC sign of the transfer
  # @option opts [String] :currency Currency of the transfer
  # @option opts [String] :network_status Network status of the transfer
  # @option opts [String] :status Status of the transfer
  # @option opts [String] :posting_date Posting date of the transfer
  # @option opts [String] :destination_account_id Destination account ID
  # @option opts [String] :destination_account_owner_name Destination account owner name
  # @return [SyncteraPayList]
  describe 'get_synctera_pay_transfers test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_synctera_pay_vendor
  # Get a Synctera Pay vendor
  # Get a Synctera Pay vendor  &gt; ðŸš§ Alpha &gt; This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes. 
  # @param id ID
  # @param [Hash] opts the optional parameters
  # @return [SyncteraPayVendorResponse]
  describe 'get_synctera_pay_vendor test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_synctera_pay_vendors
  # List Synctera Pay vendors
  # Get paginated list of Synctera Pay vendors associated  &gt; ðŸš§ Alpha &gt; This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :name The name of the Synctera Pay vendor. 
  # @option opts [String] :id Synctera Pay Vendor ID
  # @option opts [Boolean] :enabled Whether the resource is enabled. 
  # @option opts [String] :page_token 
  # @option opts [Integer] :limit 
  # @return [SyncteraPayVendorList]
  describe 'get_synctera_pay_vendors test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for return_synctera_pay_transfer
  # Return a Synctera Pay Transfer
  # Trigger a return upon an existing Synctera Pay transfer &gt; ðŸš§ Alpha &gt; This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes. 
  # @param id ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [SyncteraPayResponse]
  describe 'return_synctera_pay_transfer test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_synctera_pay_transfer
  # Update Synctera Pay Transfer
  # Update a Synctera Pay transfer &gt; ðŸš§ Alpha &gt; This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes. 
  # @param id ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @option opts [SyncteraPayPatch] :synctera_pay_patch Attributes of the Synctera Pay transfer
  # @return [SyncteraPayResponse]
  describe 'update_synctera_pay_transfer test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
