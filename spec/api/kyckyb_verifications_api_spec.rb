=begin
#Synctera API

#<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.74.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'spec_helper'
require 'json'

# Unit tests for Synctera::KYCKYBVerificationsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'KYCKYBVerificationsApi' do
  before do
    # run before each test
    @api_instance = Synctera::KYCKYBVerificationsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of KYCKYBVerificationsApi' do
    it 'should create an instance of KYCKYBVerificationsApi' do
      expect(@api_instance).to be_instance_of(Synctera::KYCKYBVerificationsApi)
    end
  end

  # unit tests for create_verification
  # Create a verification
  # Upload evidence of an externally performed KYC/KYB.  You may use your own KYC/KYB provider and upload evidence of that result to Synctera instead of using Synctera&#39;s providers. 
  # @param verification Verification result to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [Verification]
  describe 'create_verification test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_verification1
  # Get verification
  # Get customer verification result.
  # @param verification_id Verification&#39;s unique identifier.
  # @param [Hash] opts the optional parameters
  # @return [Verification]
  describe 'get_verification1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_verifications1
  # List verifications
  # List customer verification results.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<VerificationType1>] :verification_type The type of verification run. Multiple values can be provided as a comma-separated list. 
  # @option opts [Array<String>] :business_id Unique identifier for the business. Multiple IDs can be provided as a comma-separated list. 
  # @option opts [Boolean] :include_history If true, include old (inactive) records as well.
  # @option opts [Array<String>] :id Unique identifier for the resource. Multiple IDs can be provided as a comma-separated list. 
  # @option opts [String] :page_token 
  # @option opts [Array<VerificationResult>] :result The result of the verification that was run on the party. Multiple values can be provided as a comma-separated list. 
  # @option opts [Array<String>] :person_id Unique identifier for the person. Multiple IDs can be provided as a comma-separated list. 
  # @option opts [Integer] :limit 
  # @return [VerificationList]
  describe 'list_verifications1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for verify
  # Verify a customer&#39;s identity
  # Initiate identity verification and run the specified identity checks.  Verifying a personal customer requires that the following fields already be set: * &#x60;first_name&#x60; * &#x60;last_name&#x60; * &#x60;dob&#x60; * &#x60;email&#x60; * &#x60;phone_number&#x60; * &#x60;legal_address&#x60; * &#x60;ssn&#x60;  Verifying a business customer requires that the following fields already be set: * &#x60;entity_name&#x60; * &#x60;legal_address&#x60; 
  # @param verification_request 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [VerifyResponse]
  describe 'verify test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for verify_ad_hoc
  # Check if an individual is on any watchlists
  # @param adhoc_verification_request 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [AdhocVerificationResponse]
  describe 'verify_ad_hoc test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
