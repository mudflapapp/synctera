=begin
#Synctera API

#<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.74.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'spec_helper'
require 'json'

# Unit tests for Synctera::InternationalWiresAlphaApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'InternationalWiresAlphaApi' do
  before do
    # run before each test
    @api_instance = Synctera::InternationalWiresAlphaApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of InternationalWiresAlphaApi' do
    it 'should create an instance of InternationalWiresAlphaApi' do
      expect(@api_instance).to be_instance_of(Synctera::InternationalWiresAlphaApi)
    end
  end

  # unit tests for create_international_wire
  # Create an International Wire
  # Create an international wire transfer. For now these need manual approval and submission to the wire terminal by bank operations team. Created wires will result in an auth, posting only happens when bank operations team confirms the wire. The wire will be subsequently updated with the reference ID and synctera case ID when the wire is submitted via the wire terminal. Wire processing is subject to the bank&#39;s processing schedule. Cross currency wires may only be available during certain hours of banking days.
  # @param international_wire_post International wire transfer request
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [InternationalWireResponse]
  describe 'create_international_wire test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_international_wire
  # Get an international wire by id
  # Get an international wire by id
  # @param wire_id The unique identifier of a wire transfer.
  # @param [Hash] opts the optional parameters
  # @return [InternationalWireResponse]
  describe 'get_international_wire test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_international_wires
  # List International Wires
  # Get paginated list of international wires
  # @param [Hash] opts the optional parameters
  # @option opts [InternationalWireStatus] :international_wire_status The status of the international wire transfer.
  # @option opts [String] :originating_account_id The unique identifier of the originating account.
  # @option opts [String] :customer_id The unique identifier of a customer.
  # @option opts [String] :receiving_account_id The unique identifier of the receiving account.
  # @option opts [String] :page_token 
  # @option opts [Integer] :limit 
  # @return [InternationalWireList]
  describe 'list_international_wires test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for patch_international_wire
  # Update an international wire to various statuses
  # Update an outgoing international wire. End customers can only cancel a wire while its status is still PENDING. All other updates must be done by Synctera operations team or bank operations team.
  # @param wire_id The unique identifier of a wire transfer.
  # @param international_wire_patch Instruction to update an international wire
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [InternationalWireResponse]
  describe 'patch_international_wire test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
