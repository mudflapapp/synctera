=begin
#Synctera API

#<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 0.74.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'spec_helper'
require 'json'

# Unit tests for Synctera::CardsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'CardsApi' do
  before do
    # run before each test
    @api_instance = Synctera::CardsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CardsApi' do
    it 'should create an instance of CardsApi' do
      expect(@api_instance).to be_instance_of(Synctera::CardsApi)
    end
  end

  # unit tests for activate_card
  # Activate a card
  # Activate a card 
  # @param card_activation_request Card activation code
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [CardResponse]
  describe 'activate_card test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_card_image
  # Create Card Image
  # Create a card image entity. Note that this does not include the image data itself. You can upload the image data via a subsequent uploadCardImageData request using the ID created here. 
  # @param create_card_image_request Details of the image to create
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [CardImageDetails]
  describe 'create_card_image test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_gateway
  # Create Gateway
  # Create a new Authorization Gateway Configuration 
  # @param create_gateway_request Create a new Authorization Gateway Configuration
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [GatewayResponse]
  describe 'create_gateway test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_card
  # Get Card
  # Get the details about a card that has been issued 
  # @param card_id 
  # @param [Hash] opts the optional parameters
  # @return [CardResponse]
  describe 'get_card test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_card_barcode
  # Get Card Barcode
  # This endpoint is for testing environment only to provide access to barcode of a test card 
  # @param card_id 
  # @param [Hash] opts the optional parameters
  # @return [GetCardBarcode200Response]
  describe 'get_card_barcode test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_card_image_data
  # Get Card Image Data
  # Get card image data
  # @param card_image_id 
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_card_image_data test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_card_image_details
  # Get Card Image Details
  # Get card image details
  # @param card_image_id 
  # @param [Hash] opts the optional parameters
  # @return [CardImageDetails]
  describe 'get_card_image_details test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_card_widget_url
  # Get card widget URL
  # This endpoint returns a URL address of the specified widget for a given card 
  # @param account_id 
  # @param customer_id 
  # @param widget_type The type of widget for which to construct the URL
  # @param [Hash] opts the optional parameters
  # @option opts [String] :card_id The ID of the card (required for set PIN widget)
  # @return [CardWidgetUrlResponse]
  describe 'get_card_widget_url test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_client_access_token
  # Get a client token
  # Create a client access token for interacting with a card.  This token will be used on the client to identify the card for flows like viewing Full PAN or setting the PIN in a PCI compliant manner. 
  # @param card_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [ClientToken]
  describe 'get_client_access_token test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_client_single_use_token
  # Get single-use token
  # This endpoint returns a single-use access token. This type of token authorizes a single request to access API endpoints and data associated with a particular user 
  # @param single_use_token_request User token details
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [SingleUseTokenResponse]
  describe 'get_client_single_use_token test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_gateway
  # Get Gateway
  # Get the details of an Authorization Gateway that has been configured 
  # @param gateway_id 
  # @param [Hash] opts the optional parameters
  # @return [GatewayResponse]
  describe 'get_gateway test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for issue_card
  # Issue a Card
  # Issue or reissue a new card for a customer 
  # @param card_issuance_request Card to issue
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [CardResponse]
  describe 'issue_card test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_card_image_details
  # List Card Image Details
  # List all card image details 
  # @param customer_id 
  # @param [Hash] opts the optional parameters
  # @return [CardImageDetailsList]
  describe 'list_card_image_details test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_card_products
  # List Card Products
  # @param [Hash] opts the optional parameters
  # @option opts [Form] :form The format of the card
  # @option opts [String] :page_token 
  # @option opts [Integer] :limit 
  # @return [CardProductListResponse]
  describe 'list_card_products test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_cards
  # List Cards
  # List of cards matching query parameters 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :last_four The last 4 digits of the card PAN
  # @option opts [String] :postal_code The postal code of a card user
  # @option opts [String] :customer_id 
  # @option opts [CardBrand] :card_brand The brand of a card product
  # @option opts [String] :emboss_name emboss name
  # @option opts [CardType] :card_type Indicates the type of card
  # @option opts [Form] :form The format of the card
  # @option opts [String] :page_token 
  # @option opts [CardStatus] :card_status The status of a card
  # @option opts [String] :card_product_id 
  # @option opts [Array<String>] :account_id Account ID(s). Multiple IDs can be provided as a comma-separated list.
  # @option opts [Integer] :limit 
  # @option opts [String] :barcode 
  # @option opts [Date] :expiration_date The date representing when the card would expire at
  # @option opts [Array<String>] :sort_by Specifies the sort order for the returned cards. 
  # @return [CardListResponse]
  describe 'list_cards test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_changes
  # List Card Changes
  # List card change history 
  # @param card_id 
  # @param [Hash] opts the optional parameters
  # @return [CardChangesList]
  describe 'list_changes test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_gateways
  # List Gateways
  # List of gateways matching query parameters 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :page_token 
  # @option opts [Integer] :limit 
  # @return [GatewayListResponse]
  describe 'list_gateways test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_card
  # Update Card
  # Integrators can update the card resource to change status, update shipping (if the card hasn&#39;t been shipped) or edit metadata. 
  # @param card_id 
  # @param card_edit_request Card edits
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [CardResponse]
  describe 'update_card test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_card_image_details
  # Update Card Image Details
  # Update card image details. The only detail that can be updated is the card status as APPROVED or REJECTED.
  # @param card_image_id 
  # @param update_card_image_request Details of the image to create
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [CardImageDetails]
  describe 'update_card_image_details test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_gateway
  # Update Gateway
  # Update Authorization Gateway configuration 
  # @param gateway_id 
  # @param update_gateway_request Gateway edits
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [GatewayResponse]
  describe 'update_gateway test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for upload_card_image_data
  # Upload Card Image
  # Upload card image data
  # @param card_image_id 
  # @param body Binary image data
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [CardImageDetails]
  describe 'upload_card_image_data test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
