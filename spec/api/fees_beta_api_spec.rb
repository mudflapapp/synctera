=begin
#Synctera API

#This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

The version of the OpenAPI document: 1.82.0

Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Synctera::FeesBetaApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'FeesBetaApi' do
  before do
    # run before each test
    @api_instance = Synctera::FeesBetaApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of FeesBetaApi' do
    it 'should create an instance of FeesBetaApi' do
      expect(@api_instance).to be_instance_of(Synctera::FeesBetaApi)
    end
  end

  # unit tests for create_fee
  # Create a fee
  # Create a fee  &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
  # @param fee_post Fee to create
  # @param [Hash] opts the optional parameters
  # @return [FeeResponse]
  describe 'create_fee test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_fee_template
  # Create a fee template
  # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.  Create a fee template A fee template defines the properties of a fee that a fintech wishes to use to easily charge their customers. The fintech can then create fee templates for different amounts or categories of fees that represent different instances of services or charges 
  # @param fee_template_post Fee to create  &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
  # @param [Hash] opts the optional parameters
  # @return [FeeTemplateResponse]
  describe 'create_fee_template test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_fee
  # Get Fee
  # Get a fee by ID.  &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
  # @param fee_id The unique identifier of a fee
  # @param [Hash] opts the optional parameters
  # @return [FeeResponse]
  describe 'get_fee test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_fee_template
  # Get a Fee template
  # Get a fee template by ID.  &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
  # @param fee_template_id The unique identifier of a fee template
  # @param [Hash] opts the optional parameters
  # @return [FeeTemplateResponse]
  describe 'get_fee_template test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_fees
  # List fees
  # Get paginated list of fees  &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_time Return fees created before this time.
  # @option opts [Array<String>] :account_id Return fees for the specified account.
  # @option opts [FeeSubtype] :subtype 
  # @option opts [Array<String>] :id Return the fee with the specified id. Multiple IDs can be provided as a comma-separated list. 
  # @option opts [String] :page_token 
  # @option opts [Time] :start_time Return fees created at or after this time.
  # @option opts [Integer] :limit 
  # @option opts [String] :description Return fees with the specified description. A * character can be used as a wildcard to match any characters.
  # @option opts [Array<String>] :fee_template_id Return fees resources with a fee template of the specified id. Multiple IDs can be provided as a comma-separated list. 
  # @return [FeeList]
  describe 'list_fees test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_feetemplates
  # List fee templates
  # &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced.  Get paginated list of fee templates 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :id Return fee templates with the specified id. Multiple IDs can be provided as a comma-separated list. 
  # @option opts [FeeSubtype] :subtype 
  # @option opts [Array<String>] :sort_by Specifies the sort order for the returned fee templates. 
  # @option opts [Boolean] :is_enabled Return fee templates with the specified is_enabled flag.
  # @option opts [String] :page_token 
  # @option opts [Integer] :limit 
  # @option opts [String] :description Return fee templates with the specified description. A * character can be used as a wildcard to match any characters.
  # @return [FeeTemplateList]
  describe 'list_feetemplates test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for patch_fee_template
  # Patch Fee Template
  # Update a fee template by ID.  &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
  # @param fee_template_id The unique identifier of a fee template
  # @param fee_template_patch 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [FeeTemplateResponse]
  describe 'patch_fee_template test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for reverse_fee
  # Reverse a fee
  # Reverse the fee by creating a reversal transaction.  &gt; ðŸš§ Beta &gt; This is a Beta endpoint. Feedback from the community is welcome. Any breaking changes to this endpoint will be pre-announced. 
  # @param fee_id The unique identifier of a fee
  # @param fee_reverse_post Fee reversal properties
  # @param [Hash] opts the optional parameters
  # @option opts [String] :idempotency_key An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
  # @return [FeeResponse]
  describe 'reverse_fee test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
